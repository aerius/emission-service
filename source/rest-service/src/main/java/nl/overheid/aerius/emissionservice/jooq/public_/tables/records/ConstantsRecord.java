/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.public_.tables.records;


import nl.overheid.aerius.emissionservice.jooq.public_.enums.ConstantType;
import nl.overheid.aerius.emissionservice.jooq.public_.tables.Constants;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Tabel voor de database constanten.
 * 
 * @file source/database/src/main/sql/essentials/00-init/03-constants.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConstantsRecord extends UpdatableRecordImpl<ConstantsRecord> implements Record4<String, String, String, ConstantType> {

    private static final long serialVersionUID = 494780976;

    /**
     * Setter for <code>public.constants.key</code>.
     */
    public void setKey(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.constants.key</code>.
     */
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.constants.value</code>.
     */
    public void setValue(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.constants.value</code>.
     */
    public String getValue() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.constants.description</code>.
     */
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.constants.description</code>.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.constants.type</code>.
     */
    public void setType(ConstantType value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.constants.type</code>.
     */
    public ConstantType getType() {
        return (ConstantType) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, ConstantType> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, ConstantType> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Constants.CONSTANTS.KEY;
    }

    @Override
    public Field<String> field2() {
        return Constants.CONSTANTS.VALUE;
    }

    @Override
    public Field<String> field3() {
        return Constants.CONSTANTS.DESCRIPTION;
    }

    @Override
    public Field<ConstantType> field4() {
        return Constants.CONSTANTS.TYPE;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getValue();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public ConstantType component4() {
        return getType();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getValue();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public ConstantType value4() {
        return getType();
    }

    @Override
    public ConstantsRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public ConstantsRecord value2(String value) {
        setValue(value);
        return this;
    }

    @Override
    public ConstantsRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public ConstantsRecord value4(ConstantType value) {
        setType(value);
        return this;
    }

    @Override
    public ConstantsRecord values(String value1, String value2, String value3, ConstantType value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ConstantsRecord
     */
    public ConstantsRecord() {
        super(Constants.CONSTANTS);
    }

    /**
     * Create a detached, initialised ConstantsRecord
     */
    public ConstantsRecord(String key, String value, String description, ConstantType type) {
        super(Constants.CONSTANTS);

        set(0, key);
        set(1, value);
        set(2, description);
        set(3, type);
    }
}
