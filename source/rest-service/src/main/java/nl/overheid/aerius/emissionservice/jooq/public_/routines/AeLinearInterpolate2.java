/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.public_.routines;


import nl.overheid.aerius.emissionservice.jooq.public_.Public;

import org.jooq.Field;
import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.impl.Internal;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AeLinearInterpolate2 extends AbstractRoutine<Float> {

    private static final long serialVersionUID = -137753347;

    /**
     * The parameter <code>public.ae_linear_interpolate.RETURN_VALUE</code>.
     */
    public static final Parameter<Float> RETURN_VALUE = Internal.createParameter("RETURN_VALUE", org.jooq.impl.SQLDataType.REAL, false, false);

    /**
     * The parameter <code>public.ae_linear_interpolate.xb</code>.
     */
    public static final Parameter<Integer> XB = Internal.createParameter("xb", org.jooq.impl.SQLDataType.INTEGER, false, false);

    /**
     * The parameter <code>public.ae_linear_interpolate.xe</code>.
     */
    public static final Parameter<Integer> XE = Internal.createParameter("xe", org.jooq.impl.SQLDataType.INTEGER, false, false);

    /**
     * The parameter <code>public.ae_linear_interpolate.yb</code>.
     */
    public static final Parameter<Float> YB = Internal.createParameter("yb", org.jooq.impl.SQLDataType.REAL, false, false);

    /**
     * The parameter <code>public.ae_linear_interpolate.ye</code>.
     */
    public static final Parameter<Float> YE = Internal.createParameter("ye", org.jooq.impl.SQLDataType.REAL, false, false);

    /**
     * The parameter <code>public.ae_linear_interpolate.xi</code>.
     */
    public static final Parameter<Integer> XI = Internal.createParameter("xi", org.jooq.impl.SQLDataType.INTEGER, false, false);

    /**
     * Create a new routine call instance
     */
    public AeLinearInterpolate2() {
        super("ae_linear_interpolate", Public.PUBLIC, org.jooq.impl.SQLDataType.REAL);

        setReturnParameter(RETURN_VALUE);
        addInParameter(XB);
        addInParameter(XE);
        addInParameter(YB);
        addInParameter(YE);
        addInParameter(XI);
        setOverloaded(true);
    }

    /**
     * Set the <code>xb</code> parameter IN value to the routine
     */
    public void setXb(Integer value) {
        setValue(XB, value);
    }

    /**
     * Set the <code>xb</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setXb(Field<Integer> field) {
        setField(XB, field);
    }

    /**
     * Set the <code>xe</code> parameter IN value to the routine
     */
    public void setXe(Integer value) {
        setValue(XE, value);
    }

    /**
     * Set the <code>xe</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setXe(Field<Integer> field) {
        setField(XE, field);
    }

    /**
     * Set the <code>yb</code> parameter IN value to the routine
     */
    public void setYb(Float value) {
        setValue(YB, value);
    }

    /**
     * Set the <code>yb</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setYb(Field<Float> field) {
        setField(YB, field);
    }

    /**
     * Set the <code>ye</code> parameter IN value to the routine
     */
    public void setYe(Float value) {
        setValue(YE, value);
    }

    /**
     * Set the <code>ye</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setYe(Field<Float> field) {
        setField(YE, field);
    }

    /**
     * Set the <code>xi</code> parameter IN value to the routine
     */
    public void setXi(Integer value) {
        setValue(XI, value);
    }

    /**
     * Set the <code>xi</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setXi(Field<Integer> field) {
        setField(XI, field);
    }
}
