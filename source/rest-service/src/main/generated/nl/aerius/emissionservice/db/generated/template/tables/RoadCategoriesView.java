/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.public_.enums.RoadType;
import nl.aerius.emissionservice.db.generated.public_.enums.SpeedLimitEnforcementType;
import nl.aerius.emissionservice.db.generated.public_.enums.VehicleType;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.RoadCategoriesViewRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * View retourneert de categorieen voor wegen. Dit bevat onder andere de
 * emissiefactoren en stagnatiefactoren.
 * Zie road_categories en road_category_emission_factors voor meer informatie.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/04-views/roads.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoadCategoriesView extends TableImpl<RoadCategoriesViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>template.road_categories_view</code>
     */
    public static final RoadCategoriesView ROAD_CATEGORIES_VIEW = new RoadCategoriesView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoadCategoriesViewRecord> getRecordType() {
        return RoadCategoriesViewRecord.class;
    }

    /**
     * The column <code>template.road_categories_view.road_category_id</code>.
     */
    public final TableField<RoadCategoriesViewRecord, Integer> ROAD_CATEGORY_ID = createField(DSL.name("road_category_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>template.road_categories_view.code</code>.
     */
    public final TableField<RoadCategoriesViewRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>template.road_categories_view.name</code>.
     */
    public final TableField<RoadCategoriesViewRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>template.road_categories_view.vehicle_type</code>.
     */
    public final TableField<RoadCategoriesViewRecord, VehicleType> VEHICLE_TYPE = createField(DSL.name("vehicle_type"), SQLDataType.VARCHAR.asEnumDataType(nl.aerius.emissionservice.db.generated.public_.enums.VehicleType.class), this, "");

    /**
     * The column <code>template.road_categories_view.road_type</code>.
     */
    public final TableField<RoadCategoriesViewRecord, RoadType> ROAD_TYPE = createField(DSL.name("road_type"), SQLDataType.VARCHAR.asEnumDataType(nl.aerius.emissionservice.db.generated.public_.enums.RoadType.class), this, "");

    /**
     * The column <code>template.road_categories_view.gcn_sector_id</code>.
     */
    public final TableField<RoadCategoriesViewRecord, Integer> GCN_SECTOR_ID = createField(DSL.name("gcn_sector_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>template.road_categories_view.road_speed_profile_id</code>.
     */
    public final TableField<RoadCategoriesViewRecord, Integer> ROAD_SPEED_PROFILE_ID = createField(DSL.name("road_speed_profile_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>template.road_categories_view.speed_limit_enforcement</code>.
     */
    public final TableField<RoadCategoriesViewRecord, SpeedLimitEnforcementType> SPEED_LIMIT_ENFORCEMENT = createField(DSL.name("speed_limit_enforcement"), SQLDataType.VARCHAR.asEnumDataType(nl.aerius.emissionservice.db.generated.public_.enums.SpeedLimitEnforcementType.class), this, "");

    /**
     * The column <code>template.road_categories_view.maximum_speed</code>.
     */
    public final TableField<RoadCategoriesViewRecord, Integer> MAXIMUM_SPEED = createField(DSL.name("maximum_speed"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>template.road_categories_view.road_speed_profile_name</code>.
     */
    public final TableField<RoadCategoriesViewRecord, String> ROAD_SPEED_PROFILE_NAME = createField(DSL.name("road_speed_profile_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>template.road_categories_view.year</code>.
     */
    public final TableField<RoadCategoriesViewRecord, Short> YEAR = createField(DSL.name("year"), nl.aerius.emissionservice.db.generated.public_.Domains.YEAR_TYPE.getDataType(), this, "");

    /**
     * The column <code>template.road_categories_view.substance_id</code>.
     */
    public final TableField<RoadCategoriesViewRecord, Short> SUBSTANCE_ID = createField(DSL.name("substance_id"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>template.road_categories_view.emission_factor</code>.
     */
    public final TableField<RoadCategoriesViewRecord, Double> EMISSION_FACTOR = createField(DSL.name("emission_factor"), SQLDataType.DOUBLE, this, "");

    /**
     * The column
     * <code>template.road_categories_view.stagnated_emission_factor</code>.
     */
    public final TableField<RoadCategoriesViewRecord, Double> STAGNATED_EMISSION_FACTOR = createField(DSL.name("stagnated_emission_factor"), SQLDataType.DOUBLE, this, "");

    private RoadCategoriesView(Name alias, Table<RoadCategoriesViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoadCategoriesView(Name alias, Table<RoadCategoriesViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("View retourneert de categorieen voor wegen. Dit bevat onder andere de emissiefactoren en stagnatiefactoren.\r\nZie road_categories en road_category_emission_factors voor meer informatie.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/04-views/roads.sql"), TableOptions.view("""
        create view "road_categories_view" as  SELECT road_categories.road_category_id,
          ((road_categories.vehicle_type || '_'::text) || road_categories.road_type) AS code,
          road_categories.name,
          road_categories.vehicle_type,
          road_categories.road_type,
          road_categories.gcn_sector_id,
          road_emission_factors_interpolated_view.road_speed_profile_id,
          road_speed_profiles.speed_limit_enforcement,
          road_speed_profiles.maximum_speed,
          road_speed_profiles.name AS road_speed_profile_name,
          road_emission_factors_interpolated_view.year,
          road_emission_factors_interpolated_view.substance_id,
          road_emission_factors_interpolated_view.emission_factor,
          road_emission_factors_interpolated_view.stagnated_emission_factor
         FROM ((template.road_categories
           JOIN template.road_emission_factors_interpolated_view USING (road_category_id))
           JOIN template.road_speed_profiles USING (road_speed_profile_id))
        ORDER BY road_categories.road_category_id;
        """));
    }

    /**
     * Create an aliased <code>template.road_categories_view</code> table
     * reference
     */
    public RoadCategoriesView(String alias) {
        this(DSL.name(alias), ROAD_CATEGORIES_VIEW);
    }

    /**
     * Create an aliased <code>template.road_categories_view</code> table
     * reference
     */
    public RoadCategoriesView(Name alias) {
        this(alias, ROAD_CATEGORIES_VIEW);
    }

    /**
     * Create a <code>template.road_categories_view</code> table reference
     */
    public RoadCategoriesView() {
        this(DSL.name("road_categories_view"), null);
    }

    public <O extends Record> RoadCategoriesView(Table<O> child, ForeignKey<O, RoadCategoriesViewRecord> key) {
        super(child, key, ROAD_CATEGORIES_VIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public RoadCategoriesView as(String alias) {
        return new RoadCategoriesView(DSL.name(alias), this);
    }

    @Override
    public RoadCategoriesView as(Name alias) {
        return new RoadCategoriesView(alias, this);
    }

    @Override
    public RoadCategoriesView as(Table<?> alias) {
        return new RoadCategoriesView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadCategoriesView rename(String name) {
        return new RoadCategoriesView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadCategoriesView rename(Name name) {
        return new RoadCategoriesView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadCategoriesView rename(Table<?> name) {
        return new RoadCategoriesView(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, String, String, VehicleType, RoadType, Integer, Integer, SpeedLimitEnforcementType, Integer, String, Short, Short, Double, Double> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Integer, ? super String, ? super String, ? super VehicleType, ? super RoadType, ? super Integer, ? super Integer, ? super SpeedLimitEnforcementType, ? super Integer, ? super String, ? super Short, ? super Short, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Integer, ? super String, ? super String, ? super VehicleType, ? super RoadType, ? super Integer, ? super Integer, ? super SpeedLimitEnforcementType, ? super Integer, ? super String, ? super Short, ? super Short, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
