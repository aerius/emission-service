/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.MobileSourceOffRoadCategoryAdbluePropertiesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table containing properties per off road mobile source category that are
 * required to do adblu validations, independent of substances.
 * 
 * Not every off road mobile source category can use adblue, in which case there
 * is no record in this table.
 * @column max_adblue_fuel_ratio Maximum ratio between liters adblue and fuel
 * that should be used.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/mobile_sources.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MobileSourceOffRoadCategoryAdblueProperties extends TableImpl<MobileSourceOffRoadCategoryAdbluePropertiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.mobile_source_off_road_category_adblue_properties</code>
     */
    public static final MobileSourceOffRoadCategoryAdblueProperties MOBILE_SOURCE_OFF_ROAD_CATEGORY_ADBLUE_PROPERTIES = new MobileSourceOffRoadCategoryAdblueProperties();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MobileSourceOffRoadCategoryAdbluePropertiesRecord> getRecordType() {
        return MobileSourceOffRoadCategoryAdbluePropertiesRecord.class;
    }

    /**
     * The column
     * <code>template.mobile_source_off_road_category_adblue_properties.mobile_source_off_road_category_id</code>.
     */
    public final TableField<MobileSourceOffRoadCategoryAdbluePropertiesRecord, Short> MOBILE_SOURCE_OFF_ROAD_CATEGORY_ID = createField(DSL.name("mobile_source_off_road_category_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>template.mobile_source_off_road_category_adblue_properties.max_adblue_fuel_ratio</code>.
     */
    public final TableField<MobileSourceOffRoadCategoryAdbluePropertiesRecord, Float> MAX_ADBLUE_FUEL_RATIO = createField(DSL.name("max_adblue_fuel_ratio"), nl.aerius.emissionservice.db.generated.public_.Domains.FRACTION.getDataType().nullable(false), this, "");

    private MobileSourceOffRoadCategoryAdblueProperties(Name alias, Table<MobileSourceOffRoadCategoryAdbluePropertiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private MobileSourceOffRoadCategoryAdblueProperties(Name alias, Table<MobileSourceOffRoadCategoryAdbluePropertiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table containing properties per off road mobile source category that are required to do adblu validations, independent of substances.\r\n\r\nNot every off road mobile source category can use adblue, in which case there is no record in this table.\r\n@column max_adblue_fuel_ratio Maximum ratio between liters adblue and fuel that should be used.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/mobile_sources.sql"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>template.mobile_source_off_road_category_adblue_properties</code>
     * table reference
     */
    public MobileSourceOffRoadCategoryAdblueProperties(String alias) {
        this(DSL.name(alias), MOBILE_SOURCE_OFF_ROAD_CATEGORY_ADBLUE_PROPERTIES);
    }

    /**
     * Create an aliased
     * <code>template.mobile_source_off_road_category_adblue_properties</code>
     * table reference
     */
    public MobileSourceOffRoadCategoryAdblueProperties(Name alias) {
        this(alias, MOBILE_SOURCE_OFF_ROAD_CATEGORY_ADBLUE_PROPERTIES);
    }

    /**
     * Create a
     * <code>template.mobile_source_off_road_category_adblue_properties</code>
     * table reference
     */
    public MobileSourceOffRoadCategoryAdblueProperties() {
        this(DSL.name("mobile_source_off_road_category_adblue_properties"), null);
    }

    public <O extends Record> MobileSourceOffRoadCategoryAdblueProperties(Table<O> child, ForeignKey<O, MobileSourceOffRoadCategoryAdbluePropertiesRecord> key) {
        super(child, key, MOBILE_SOURCE_OFF_ROAD_CATEGORY_ADBLUE_PROPERTIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<MobileSourceOffRoadCategoryAdbluePropertiesRecord> getPrimaryKey() {
        return Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORY_ADBLUE_PROP_PKEY;
    }

    @Override
    public List<ForeignKey<MobileSourceOffRoadCategoryAdbluePropertiesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORY_ADBLUE_PROPERTIES__MOBILE_SOURCE_OFF_ROAD_CATEGORY_ADBLUE_PROP_FKEY_CAT_ID);
    }

    private transient MobileSourceOffRoadCategories _mobileSourceOffRoadCategories;

    /**
     * Get the implicit join path to the
     * <code>template.mobile_source_off_road_categories</code> table.
     */
    public MobileSourceOffRoadCategories mobileSourceOffRoadCategories() {
        if (_mobileSourceOffRoadCategories == null)
            _mobileSourceOffRoadCategories = new MobileSourceOffRoadCategories(this, Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORY_ADBLUE_PROPERTIES__MOBILE_SOURCE_OFF_ROAD_CATEGORY_ADBLUE_PROP_FKEY_CAT_ID);

        return _mobileSourceOffRoadCategories;
    }

    @Override
    public MobileSourceOffRoadCategoryAdblueProperties as(String alias) {
        return new MobileSourceOffRoadCategoryAdblueProperties(DSL.name(alias), this);
    }

    @Override
    public MobileSourceOffRoadCategoryAdblueProperties as(Name alias) {
        return new MobileSourceOffRoadCategoryAdblueProperties(alias, this);
    }

    @Override
    public MobileSourceOffRoadCategoryAdblueProperties as(Table<?> alias) {
        return new MobileSourceOffRoadCategoryAdblueProperties(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileSourceOffRoadCategoryAdblueProperties rename(String name) {
        return new MobileSourceOffRoadCategoryAdblueProperties(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileSourceOffRoadCategoryAdblueProperties rename(Name name) {
        return new MobileSourceOffRoadCategoryAdblueProperties(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileSourceOffRoadCategoryAdblueProperties rename(Table<?> name) {
        return new MobileSourceOffRoadCategoryAdblueProperties(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Short, Float> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Short, ? super Float, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Short, ? super Float, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
