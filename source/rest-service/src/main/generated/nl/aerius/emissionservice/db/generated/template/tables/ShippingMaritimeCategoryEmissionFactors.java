/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.public_.enums.ShippingMovementType;
import nl.aerius.emissionservice.db.generated.public_.tables.Substances;
import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.ShippingMaritimeCategoryEmissionFactorsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table containing the emission factors for maritime shipping categories.
 * These factors are defined per shipping category, per substance, per year and
 * per movement type.
 * 
 * The unit of the emission factor depends on the movement type.
 * When moving at a certain speed, the emission factor is in kg/(kilometer *
 * number of ships).
 * When not moving/docked, the emission factor is in kg/(hours docked * number
 * of ships).
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/shipping_maritime.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShippingMaritimeCategoryEmissionFactors extends TableImpl<ShippingMaritimeCategoryEmissionFactorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.shipping_maritime_category_emission_factors</code>
     */
    public static final ShippingMaritimeCategoryEmissionFactors SHIPPING_MARITIME_CATEGORY_EMISSION_FACTORS = new ShippingMaritimeCategoryEmissionFactors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShippingMaritimeCategoryEmissionFactorsRecord> getRecordType() {
        return ShippingMaritimeCategoryEmissionFactorsRecord.class;
    }

    /**
     * The column
     * <code>template.shipping_maritime_category_emission_factors.shipping_maritime_category_id</code>.
     */
    public final TableField<ShippingMaritimeCategoryEmissionFactorsRecord, Short> SHIPPING_MARITIME_CATEGORY_ID = createField(DSL.name("shipping_maritime_category_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>template.shipping_maritime_category_emission_factors.year</code>.
     */
    public final TableField<ShippingMaritimeCategoryEmissionFactorsRecord, Short> YEAR = createField(DSL.name("year"), nl.aerius.emissionservice.db.generated.public_.Domains.YEAR_TYPE.getDataType().nullable(false), this, "");

    /**
     * The column
     * <code>template.shipping_maritime_category_emission_factors.substance_id</code>.
     */
    public final TableField<ShippingMaritimeCategoryEmissionFactorsRecord, Short> SUBSTANCE_ID = createField(DSL.name("substance_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>template.shipping_maritime_category_emission_factors.movement_type</code>.
     */
    public final TableField<ShippingMaritimeCategoryEmissionFactorsRecord, ShippingMovementType> MOVEMENT_TYPE = createField(DSL.name("movement_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(nl.aerius.emissionservice.db.generated.public_.enums.ShippingMovementType.class), this, "");

    /**
     * The column
     * <code>template.shipping_maritime_category_emission_factors.emission_factor</code>.
     */
    public final TableField<ShippingMaritimeCategoryEmissionFactorsRecord, Float> EMISSION_FACTOR = createField(DSL.name("emission_factor"), nl.aerius.emissionservice.db.generated.public_.Domains.POSREAL.getDataType().nullable(false), this, "");

    private ShippingMaritimeCategoryEmissionFactors(Name alias, Table<ShippingMaritimeCategoryEmissionFactorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShippingMaritimeCategoryEmissionFactors(Name alias, Table<ShippingMaritimeCategoryEmissionFactorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table containing the emission factors for maritime shipping categories.\r\nThese factors are defined per shipping category, per substance, per year and per movement type.\r\n\r\nThe unit of the emission factor depends on the movement type.\r\nWhen moving at a certain speed, the emission factor is in kg/(kilometer * number of ships).\r\nWhen not moving/docked, the emission factor is in kg/(hours docked * number of ships).\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/shipping_maritime.sql"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>template.shipping_maritime_category_emission_factors</code> table
     * reference
     */
    public ShippingMaritimeCategoryEmissionFactors(String alias) {
        this(DSL.name(alias), SHIPPING_MARITIME_CATEGORY_EMISSION_FACTORS);
    }

    /**
     * Create an aliased
     * <code>template.shipping_maritime_category_emission_factors</code> table
     * reference
     */
    public ShippingMaritimeCategoryEmissionFactors(Name alias) {
        this(alias, SHIPPING_MARITIME_CATEGORY_EMISSION_FACTORS);
    }

    /**
     * Create a
     * <code>template.shipping_maritime_category_emission_factors</code> table
     * reference
     */
    public ShippingMaritimeCategoryEmissionFactors() {
        this(DSL.name("shipping_maritime_category_emission_factors"), null);
    }

    public <O extends Record> ShippingMaritimeCategoryEmissionFactors(Table<O> child, ForeignKey<O, ShippingMaritimeCategoryEmissionFactorsRecord> key) {
        super(child, key, SHIPPING_MARITIME_CATEGORY_EMISSION_FACTORS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<ShippingMaritimeCategoryEmissionFactorsRecord> getPrimaryKey() {
        return Keys.SHIPPING_MARITIME_CATEGORY_EMISSION_FACTORS_PKEY;
    }

    @Override
    public List<ForeignKey<ShippingMaritimeCategoryEmissionFactorsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SHIPPING_MARITIME_CATEGORY_EMISSION_FACTORS__SHIPPING_MARITIME_CATEGORY_EMISSION_FACTORS_FKEY_CATEGORIES, Keys.SHIPPING_MARITIME_CATEGORY_EMISSION_FACTORS__SHIPPING_MARITIME_CATEGORY_EMISSION_FACTORS_FKEY_SUBSTANCES);
    }

    private transient ShippingMaritimeCategories _shippingMaritimeCategories;
    private transient Substances _substances;

    /**
     * Get the implicit join path to the
     * <code>template.shipping_maritime_categories</code> table.
     */
    public ShippingMaritimeCategories shippingMaritimeCategories() {
        if (_shippingMaritimeCategories == null)
            _shippingMaritimeCategories = new ShippingMaritimeCategories(this, Keys.SHIPPING_MARITIME_CATEGORY_EMISSION_FACTORS__SHIPPING_MARITIME_CATEGORY_EMISSION_FACTORS_FKEY_CATEGORIES);

        return _shippingMaritimeCategories;
    }

    /**
     * Get the implicit join path to the <code>public.substances</code> table.
     */
    public Substances substances() {
        if (_substances == null)
            _substances = new Substances(this, Keys.SHIPPING_MARITIME_CATEGORY_EMISSION_FACTORS__SHIPPING_MARITIME_CATEGORY_EMISSION_FACTORS_FKEY_SUBSTANCES);

        return _substances;
    }

    @Override
    public ShippingMaritimeCategoryEmissionFactors as(String alias) {
        return new ShippingMaritimeCategoryEmissionFactors(DSL.name(alias), this);
    }

    @Override
    public ShippingMaritimeCategoryEmissionFactors as(Name alias) {
        return new ShippingMaritimeCategoryEmissionFactors(alias, this);
    }

    @Override
    public ShippingMaritimeCategoryEmissionFactors as(Table<?> alias) {
        return new ShippingMaritimeCategoryEmissionFactors(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingMaritimeCategoryEmissionFactors rename(String name) {
        return new ShippingMaritimeCategoryEmissionFactors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingMaritimeCategoryEmissionFactors rename(Name name) {
        return new ShippingMaritimeCategoryEmissionFactors(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingMaritimeCategoryEmissionFactors rename(Table<?> name) {
        return new ShippingMaritimeCategoryEmissionFactors(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Short, Short, Short, ShippingMovementType, Float> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Short, ? super Short, ? super Short, ? super ShippingMovementType, ? super Float, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Short, ? super Short, ? super Short, ? super ShippingMovementType, ? super Float, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
