/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.public_.enums.ShippingInlandLadenState;
import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.ShippingInlandCategorySourceCharacteristicsDockedRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table containing the OPS characteristics for inland shipping categories for
 * docked ships.
 * These characteristics are defined per ship type and laden state.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/shipping_inland.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShippingInlandCategorySourceCharacteristicsDocked extends TableImpl<ShippingInlandCategorySourceCharacteristicsDockedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.shipping_inland_category_source_characteristics_docked</code>
     */
    public static final ShippingInlandCategorySourceCharacteristicsDocked SHIPPING_INLAND_CATEGORY_SOURCE_CHARACTERISTICS_DOCKED = new ShippingInlandCategorySourceCharacteristicsDocked();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShippingInlandCategorySourceCharacteristicsDockedRecord> getRecordType() {
        return ShippingInlandCategorySourceCharacteristicsDockedRecord.class;
    }

    /**
     * The column
     * <code>template.shipping_inland_category_source_characteristics_docked.shipping_inland_category_id</code>.
     */
    public final TableField<ShippingInlandCategorySourceCharacteristicsDockedRecord, Short> SHIPPING_INLAND_CATEGORY_ID = createField(DSL.name("shipping_inland_category_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>template.shipping_inland_category_source_characteristics_docked.laden_state</code>.
     */
    public final TableField<ShippingInlandCategorySourceCharacteristicsDockedRecord, ShippingInlandLadenState> LADEN_STATE = createField(DSL.name("laden_state"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(nl.aerius.emissionservice.db.generated.public_.enums.ShippingInlandLadenState.class), this, "");

    /**
     * The column
     * <code>template.shipping_inland_category_source_characteristics_docked.gcn_sector_id</code>.
     */
    public final TableField<ShippingInlandCategorySourceCharacteristicsDockedRecord, Integer> GCN_SECTOR_ID = createField(DSL.name("gcn_sector_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>template.shipping_inland_category_source_characteristics_docked.heat_content</code>.
     */
    public final TableField<ShippingInlandCategorySourceCharacteristicsDockedRecord, Float> HEAT_CONTENT = createField(DSL.name("heat_content"), nl.aerius.emissionservice.db.generated.public_.Domains.POSREAL.getDataType().nullable(false), this, "");

    /**
     * The column
     * <code>template.shipping_inland_category_source_characteristics_docked.height</code>.
     */
    public final TableField<ShippingInlandCategorySourceCharacteristicsDockedRecord, Float> HEIGHT = createField(DSL.name("height"), nl.aerius.emissionservice.db.generated.public_.Domains.POSREAL.getDataType().nullable(false), this, "");

    /**
     * The column
     * <code>template.shipping_inland_category_source_characteristics_docked.spread</code>.
     */
    public final TableField<ShippingInlandCategorySourceCharacteristicsDockedRecord, Float> SPREAD = createField(DSL.name("spread"), nl.aerius.emissionservice.db.generated.public_.Domains.POSREAL.getDataType().nullable(false), this, "");

    private ShippingInlandCategorySourceCharacteristicsDocked(Name alias, Table<ShippingInlandCategorySourceCharacteristicsDockedRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShippingInlandCategorySourceCharacteristicsDocked(Name alias, Table<ShippingInlandCategorySourceCharacteristicsDockedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table containing the OPS characteristics for inland shipping categories for docked ships.\r\nThese characteristics are defined per ship type and laden state.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/shipping_inland.sql"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>template.shipping_inland_category_source_characteristics_docked</code>
     * table reference
     */
    public ShippingInlandCategorySourceCharacteristicsDocked(String alias) {
        this(DSL.name(alias), SHIPPING_INLAND_CATEGORY_SOURCE_CHARACTERISTICS_DOCKED);
    }

    /**
     * Create an aliased
     * <code>template.shipping_inland_category_source_characteristics_docked</code>
     * table reference
     */
    public ShippingInlandCategorySourceCharacteristicsDocked(Name alias) {
        this(alias, SHIPPING_INLAND_CATEGORY_SOURCE_CHARACTERISTICS_DOCKED);
    }

    /**
     * Create a
     * <code>template.shipping_inland_category_source_characteristics_docked</code>
     * table reference
     */
    public ShippingInlandCategorySourceCharacteristicsDocked() {
        this(DSL.name("shipping_inland_category_source_characteristics_docked"), null);
    }

    public <O extends Record> ShippingInlandCategorySourceCharacteristicsDocked(Table<O> child, ForeignKey<O, ShippingInlandCategorySourceCharacteristicsDockedRecord> key) {
        super(child, key, SHIPPING_INLAND_CATEGORY_SOURCE_CHARACTERISTICS_DOCKED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<ShippingInlandCategorySourceCharacteristicsDockedRecord> getPrimaryKey() {
        return Keys.SHIPPING_INLAND_CATEGORY_SOURCE_CHAR_DOCKED_PKEY;
    }

    @Override
    public List<ForeignKey<ShippingInlandCategorySourceCharacteristicsDockedRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SHIPPING_INLAND_CATEGORY_SOURCE_CHARACTERISTICS_DOCKED__SHIPPING_INLAND_CATEGORY_SOURCE_CHAR_DOCKED_FKEY_CATEGORIES, Keys.SHIPPING_INLAND_CATEGORY_SOURCE_CHARACTERISTICS_DOCKED__SHIPPING_INLAND_CATEGORY_SOURCE_CHAR_DOCKED_FKEY_GCN_SECTORS);
    }

    private transient ShippingInlandCategories _shippingInlandCategories;
    private transient GcnSectors _gcnSectors;

    /**
     * Get the implicit join path to the
     * <code>template.shipping_inland_categories</code> table.
     */
    public ShippingInlandCategories shippingInlandCategories() {
        if (_shippingInlandCategories == null)
            _shippingInlandCategories = new ShippingInlandCategories(this, Keys.SHIPPING_INLAND_CATEGORY_SOURCE_CHARACTERISTICS_DOCKED__SHIPPING_INLAND_CATEGORY_SOURCE_CHAR_DOCKED_FKEY_CATEGORIES);

        return _shippingInlandCategories;
    }

    /**
     * Get the implicit join path to the <code>template.gcn_sectors</code>
     * table.
     */
    public GcnSectors gcnSectors() {
        if (_gcnSectors == null)
            _gcnSectors = new GcnSectors(this, Keys.SHIPPING_INLAND_CATEGORY_SOURCE_CHARACTERISTICS_DOCKED__SHIPPING_INLAND_CATEGORY_SOURCE_CHAR_DOCKED_FKEY_GCN_SECTORS);

        return _gcnSectors;
    }

    @Override
    public ShippingInlandCategorySourceCharacteristicsDocked as(String alias) {
        return new ShippingInlandCategorySourceCharacteristicsDocked(DSL.name(alias), this);
    }

    @Override
    public ShippingInlandCategorySourceCharacteristicsDocked as(Name alias) {
        return new ShippingInlandCategorySourceCharacteristicsDocked(alias, this);
    }

    @Override
    public ShippingInlandCategorySourceCharacteristicsDocked as(Table<?> alias) {
        return new ShippingInlandCategorySourceCharacteristicsDocked(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingInlandCategorySourceCharacteristicsDocked rename(String name) {
        return new ShippingInlandCategorySourceCharacteristicsDocked(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingInlandCategorySourceCharacteristicsDocked rename(Name name) {
        return new ShippingInlandCategorySourceCharacteristicsDocked(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingInlandCategorySourceCharacteristicsDocked rename(Table<?> name) {
        return new ShippingInlandCategorySourceCharacteristicsDocked(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Short, ShippingInlandLadenState, Integer, Float, Float, Float> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Short, ? super ShippingInlandLadenState, ? super Integer, ? super Float, ? super Float, ? super Float, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Short, ? super ShippingInlandLadenState, ? super Integer, ? super Float, ? super Float, ? super Float, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
