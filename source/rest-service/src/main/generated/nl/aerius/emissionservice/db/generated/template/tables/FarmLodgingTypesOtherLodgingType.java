/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.FarmLodgingTypesOtherLodgingTypeRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Geeft voor emissiearme stalsystemen aan wat het bijbehorende 'overige'
 * stalsysteem is.
 * De koppeling (N:1) is alleen opgenomen als het stalsysteem als 'emissiearm'
 * is geklassificeerd. In bepaalde gevallen wordt dan namelijk de emissiefactor
 * begrensd in de emissie berekening, o.b.v. die van het 'overige' stalsysteem.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/farms.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FarmLodgingTypesOtherLodgingType extends TableImpl<FarmLodgingTypesOtherLodgingTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.farm_lodging_types_other_lodging_type</code>
     */
    public static final FarmLodgingTypesOtherLodgingType FARM_LODGING_TYPES_OTHER_LODGING_TYPE = new FarmLodgingTypesOtherLodgingType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FarmLodgingTypesOtherLodgingTypeRecord> getRecordType() {
        return FarmLodgingTypesOtherLodgingTypeRecord.class;
    }

    /**
     * The column
     * <code>template.farm_lodging_types_other_lodging_type.farm_lodging_type_id</code>.
     */
    public final TableField<FarmLodgingTypesOtherLodgingTypeRecord, Integer> FARM_LODGING_TYPE_ID = createField(DSL.name("farm_lodging_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>template.farm_lodging_types_other_lodging_type.farm_other_lodging_type_id</code>.
     */
    public final TableField<FarmLodgingTypesOtherLodgingTypeRecord, Integer> FARM_OTHER_LODGING_TYPE_ID = createField(DSL.name("farm_other_lodging_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private FarmLodgingTypesOtherLodgingType(Name alias, Table<FarmLodgingTypesOtherLodgingTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private FarmLodgingTypesOtherLodgingType(Name alias, Table<FarmLodgingTypesOtherLodgingTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Geeft voor emissiearme stalsystemen aan wat het bijbehorende 'overige' stalsysteem is.\r\nDe koppeling (N:1) is alleen opgenomen als het stalsysteem als 'emissiearm' is geklassificeerd. In bepaalde gevallen wordt dan namelijk de emissiefactor begrensd in de emissie berekening, o.b.v. die van het 'overige' stalsysteem.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/farms.sql"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>template.farm_lodging_types_other_lodging_type</code> table
     * reference
     */
    public FarmLodgingTypesOtherLodgingType(String alias) {
        this(DSL.name(alias), FARM_LODGING_TYPES_OTHER_LODGING_TYPE);
    }

    /**
     * Create an aliased
     * <code>template.farm_lodging_types_other_lodging_type</code> table
     * reference
     */
    public FarmLodgingTypesOtherLodgingType(Name alias) {
        this(alias, FARM_LODGING_TYPES_OTHER_LODGING_TYPE);
    }

    /**
     * Create a <code>template.farm_lodging_types_other_lodging_type</code>
     * table reference
     */
    public FarmLodgingTypesOtherLodgingType() {
        this(DSL.name("farm_lodging_types_other_lodging_type"), null);
    }

    public <O extends Record> FarmLodgingTypesOtherLodgingType(Table<O> child, ForeignKey<O, FarmLodgingTypesOtherLodgingTypeRecord> key) {
        super(child, key, FARM_LODGING_TYPES_OTHER_LODGING_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<FarmLodgingTypesOtherLodgingTypeRecord> getPrimaryKey() {
        return Keys.FARM_LODGING_TYPE_OTHER_TYPES_PKEY;
    }

    @Override
    public List<ForeignKey<FarmLodgingTypesOtherLodgingTypeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FARM_LODGING_TYPES_OTHER_LODGING_TYPE__FARM_LODGING_TYPE_OTHER_TYPES_FKEY_FARM_LODGING_TYPES, Keys.FARM_LODGING_TYPES_OTHER_LODGING_TYPE__FARM_LODGING_TYPE_OTHER_TYPES_FKEY_FARM_OTHER_LODGING_TYPES);
    }

    private transient FarmLodgingTypes _farmLodgingTypeOtherTypesFkeyFarmLodgingTypes;
    private transient FarmLodgingTypes _farmLodgingTypeOtherTypesFkeyFarmOtherLodgingTypes;

    /**
     * Get the implicit join path to the
     * <code>template.farm_lodging_types</code> table, via the
     * <code>farm_lodging_type_other_types_fkey_farm_lodging_types</code> key.
     */
    public FarmLodgingTypes farmLodgingTypeOtherTypesFkeyFarmLodgingTypes() {
        if (_farmLodgingTypeOtherTypesFkeyFarmLodgingTypes == null)
            _farmLodgingTypeOtherTypesFkeyFarmLodgingTypes = new FarmLodgingTypes(this, Keys.FARM_LODGING_TYPES_OTHER_LODGING_TYPE__FARM_LODGING_TYPE_OTHER_TYPES_FKEY_FARM_LODGING_TYPES);

        return _farmLodgingTypeOtherTypesFkeyFarmLodgingTypes;
    }

    /**
     * Get the implicit join path to the
     * <code>template.farm_lodging_types</code> table, via the
     * <code>farm_lodging_type_other_types_fkey_farm_other_lodging_types</code>
     * key.
     */
    public FarmLodgingTypes farmLodgingTypeOtherTypesFkeyFarmOtherLodgingTypes() {
        if (_farmLodgingTypeOtherTypesFkeyFarmOtherLodgingTypes == null)
            _farmLodgingTypeOtherTypesFkeyFarmOtherLodgingTypes = new FarmLodgingTypes(this, Keys.FARM_LODGING_TYPES_OTHER_LODGING_TYPE__FARM_LODGING_TYPE_OTHER_TYPES_FKEY_FARM_OTHER_LODGING_TYPES);

        return _farmLodgingTypeOtherTypesFkeyFarmOtherLodgingTypes;
    }

    @Override
    public List<Check<FarmLodgingTypesOtherLodgingTypeRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("farm_lodging_type_other_types_chk_selfref"), "((farm_lodging_type_id <> farm_other_lodging_type_id))", true)
        );
    }

    @Override
    public FarmLodgingTypesOtherLodgingType as(String alias) {
        return new FarmLodgingTypesOtherLodgingType(DSL.name(alias), this);
    }

    @Override
    public FarmLodgingTypesOtherLodgingType as(Name alias) {
        return new FarmLodgingTypesOtherLodgingType(alias, this);
    }

    @Override
    public FarmLodgingTypesOtherLodgingType as(Table<?> alias) {
        return new FarmLodgingTypesOtherLodgingType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmLodgingTypesOtherLodgingType rename(String name) {
        return new FarmLodgingTypesOtherLodgingType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmLodgingTypesOtherLodgingType rename(Name name) {
        return new FarmLodgingTypesOtherLodgingType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmLodgingTypesOtherLodgingType rename(Table<?> name) {
        return new FarmLodgingTypesOtherLodgingType(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
