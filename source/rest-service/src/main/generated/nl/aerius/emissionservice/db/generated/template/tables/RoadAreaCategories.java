/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.RoadAreaCategoriesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table containing the different area categories for road traffic.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/roads.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoadAreaCategories extends TableImpl<RoadAreaCategoriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>template.road_area_categories</code>
     */
    public static final RoadAreaCategories ROAD_AREA_CATEGORIES = new RoadAreaCategories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoadAreaCategoriesRecord> getRecordType() {
        return RoadAreaCategoriesRecord.class;
    }

    /**
     * The column
     * <code>template.road_area_categories.road_area_category_id</code>.
     */
    public final TableField<RoadAreaCategoriesRecord, Integer> ROAD_AREA_CATEGORY_ID = createField(DSL.name("road_area_category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>template.road_area_categories.code</code>.
     */
    public final TableField<RoadAreaCategoriesRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>template.road_area_categories.name</code>.
     */
    public final TableField<RoadAreaCategoriesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    private RoadAreaCategories(Name alias, Table<RoadAreaCategoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoadAreaCategories(Name alias, Table<RoadAreaCategoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table containing the different area categories for road traffic.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/roads.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>template.road_area_categories</code> table
     * reference
     */
    public RoadAreaCategories(String alias) {
        this(DSL.name(alias), ROAD_AREA_CATEGORIES);
    }

    /**
     * Create an aliased <code>template.road_area_categories</code> table
     * reference
     */
    public RoadAreaCategories(Name alias) {
        this(alias, ROAD_AREA_CATEGORIES);
    }

    /**
     * Create a <code>template.road_area_categories</code> table reference
     */
    public RoadAreaCategories() {
        this(DSL.name("road_area_categories"), null);
    }

    public <O extends Record> RoadAreaCategories(Table<O> child, ForeignKey<O, RoadAreaCategoriesRecord> key) {
        super(child, key, ROAD_AREA_CATEGORIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<RoadAreaCategoriesRecord> getPrimaryKey() {
        return Keys.ROAD_AREA_CATEGORIES_PKEY;
    }

    @Override
    public List<UniqueKey<RoadAreaCategoriesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ROAD_AREA_CATEGORIES_CODE_KEY, Keys.ROAD_AREA_CATEGORIES_NAME_KEY);
    }

    @Override
    public RoadAreaCategories as(String alias) {
        return new RoadAreaCategories(DSL.name(alias), this);
    }

    @Override
    public RoadAreaCategories as(Name alias) {
        return new RoadAreaCategories(alias, this);
    }

    @Override
    public RoadAreaCategories as(Table<?> alias) {
        return new RoadAreaCategories(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadAreaCategories rename(String name) {
        return new RoadAreaCategories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadAreaCategories rename(Name name) {
        return new RoadAreaCategories(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadAreaCategories rename(Table<?> name) {
        return new RoadAreaCategories(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
