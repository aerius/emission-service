/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.public_;


import java.util.Arrays;
import java.util.List;

import nl.aerius.emissionservice.db.generated.DefaultCatalog;
import nl.aerius.emissionservice.db.generated.public_.tables.Constants;
import nl.aerius.emissionservice.db.generated.public_.tables.Datasets;
import nl.aerius.emissionservice.db.generated.public_.tables.I18nDatasets;
import nl.aerius.emissionservice.db.generated.public_.tables.Substances;
import nl.aerius.emissionservice.db.generated.public_.udt.AeKeyValueRs;

import org.jooq.Catalog;
import org.jooq.Domain;
import org.jooq.Table;
import org.jooq.UDT;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Public extends SchemaImpl {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public</code>
     */
    public static final Public PUBLIC = new Public();

    /**
     * Table for database constants.
     * 
     * @file source/database/src/main/sql/essentials/00-init/03-constants.sql
     */
    public final Constants CONSTANTS = Constants.CONSTANTS;

    /**
     * The different datasets that are available.
     * The data for each dataset will reside in their own database schema.
     * 
     * @file source/database/src/main/sql/datasets/02-tables.sql
     */
    public final Datasets DATASETS = Datasets.DATASETS;

    /**
     * Translation table for the different available datasets.
     * 
     * @file source/database/src/main/sql/datasets/02-tables.sql
     */
    public final I18nDatasets I18N_DATASETS = I18nDatasets.I18N_DATASETS;

    /**
     * Substances available within the system.
     * 
     * @file source/database/src/main/sql/substances/02-tables.sql
     */
    public final Substances SUBSTANCES = Substances.SUBSTANCES;

    /**
     * No further instances allowed
     */
    private Public() {
        super("public", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Domain<?>> getDomains() {
        return Arrays.asList(
            Domains.FRACTION,
            Domains.POSINT,
            Domains.POSREAL,
            Domains.YEAR_TYPE
        );
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.asList(
            Constants.CONSTANTS,
            Datasets.DATASETS,
            I18nDatasets.I18N_DATASETS,
            Substances.SUBSTANCES
        );
    }

    @Override
    public final List<UDT<?>> getUDTs() {
        return Arrays.asList(
            AeKeyValueRs.AE_KEY_VALUE_RS
        );
    }
}
