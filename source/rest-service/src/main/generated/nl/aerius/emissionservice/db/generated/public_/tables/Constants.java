/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.public_.tables;


import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.public_.Keys;
import nl.aerius.emissionservice.db.generated.public_.Public;
import nl.aerius.emissionservice.db.generated.public_.enums.ConstantType;
import nl.aerius.emissionservice.db.generated.public_.tables.records.ConstantsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table for database constants.
 * 
 * @file source/database/src/main/sql/essentials/00-init/03-constants.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Constants extends TableImpl<ConstantsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.constants</code>
     */
    public static final Constants CONSTANTS = new Constants();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConstantsRecord> getRecordType() {
        return ConstantsRecord.class;
    }

    /**
     * The column <code>public.constants.key</code>.
     */
    public final TableField<ConstantsRecord, String> KEY = createField(DSL.name("key"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.constants.value</code>.
     */
    public final TableField<ConstantsRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.constants.description</code>.
     */
    public final TableField<ConstantsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.constants.type</code>.
     */
    public final TableField<ConstantsRecord, ConstantType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.asEnumDataType(nl.aerius.emissionservice.db.generated.public_.enums.ConstantType.class), this, "");

    private Constants(Name alias, Table<ConstantsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Constants(Name alias, Table<ConstantsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table for database constants.\r\n\r\n@file source/database/src/main/sql/essentials/00-init/03-constants.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.constants</code> table reference
     */
    public Constants(String alias) {
        this(DSL.name(alias), CONSTANTS);
    }

    /**
     * Create an aliased <code>public.constants</code> table reference
     */
    public Constants(Name alias) {
        this(alias, CONSTANTS);
    }

    /**
     * Create a <code>public.constants</code> table reference
     */
    public Constants() {
        this(DSL.name("constants"), null);
    }

    public <O extends Record> Constants(Table<O> child, ForeignKey<O, ConstantsRecord> key) {
        super(child, key, CONSTANTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ConstantsRecord> getPrimaryKey() {
        return Keys.CONSTANTS_PKEY;
    }

    @Override
    public Constants as(String alias) {
        return new Constants(DSL.name(alias), this);
    }

    @Override
    public Constants as(Name alias) {
        return new Constants(alias, this);
    }

    @Override
    public Constants as(Table<?> alias) {
        return new Constants(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Constants rename(String name) {
        return new Constants(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Constants rename(Name name) {
        return new Constants(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Constants rename(Table<?> name) {
        return new Constants(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, ConstantType> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super ConstantType, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super ConstantType, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
