/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.public_;


import nl.aerius.emissionservice.db.generated.public_.tables.Constants;
import nl.aerius.emissionservice.db.generated.public_.tables.Datasets;
import nl.aerius.emissionservice.db.generated.public_.tables.I18nDatasets;
import nl.aerius.emissionservice.db.generated.public_.tables.Substances;
import nl.aerius.emissionservice.db.generated.public_.tables.records.ConstantsRecord;
import nl.aerius.emissionservice.db.generated.public_.tables.records.DatasetsRecord;
import nl.aerius.emissionservice.db.generated.public_.tables.records.I18nDatasetsRecord;
import nl.aerius.emissionservice.db.generated.public_.tables.records.SubstancesRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ConstantsRecord> CONSTANTS_PKEY = Internal.createUniqueKey(Constants.CONSTANTS, DSL.name("constants_pkey"), new TableField[] { Constants.CONSTANTS.KEY }, true);
    public static final UniqueKey<DatasetsRecord> DATASETS_NAME_KEY = Internal.createUniqueKey(Datasets.DATASETS, DSL.name("datasets_name_key"), new TableField[] { Datasets.DATASETS.NAME }, true);
    public static final UniqueKey<DatasetsRecord> DATASETS_PKEY = Internal.createUniqueKey(Datasets.DATASETS, DSL.name("datasets_pkey"), new TableField[] { Datasets.DATASETS.CODE }, true);
    public static final UniqueKey<I18nDatasetsRecord> I18N_DATASETS_PKEY = Internal.createUniqueKey(I18nDatasets.I18N_DATASETS, DSL.name("i18n_datasets_pkey"), new TableField[] { I18nDatasets.I18N_DATASETS.CODE, I18nDatasets.I18N_DATASETS.LANGUAGE_CODE }, true);
    public static final UniqueKey<SubstancesRecord> SUBSTANCES_PKEY = Internal.createUniqueKey(Substances.SUBSTANCES, DSL.name("substances_pkey"), new TableField[] { Substances.SUBSTANCES.SUBSTANCE_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<I18nDatasetsRecord, DatasetsRecord> I18N_DATASETS__I18N_DATASETS = Internal.createForeignKey(I18nDatasets.I18N_DATASETS, DSL.name("i18n_datasets"), new TableField[] { I18nDatasets.I18N_DATASETS.CODE }, Keys.DATASETS_PKEY, new TableField[] { Datasets.DATASETS.CODE }, true);
}
