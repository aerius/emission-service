/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.DatasetMetadataRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Metadata voor deze dataset
 * 
 * @file source/database/src/main/sql/template/dataset_metadata.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatasetMetadata extends TableImpl<DatasetMetadataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>template.dataset_metadata</code>
     */
    public static final DatasetMetadata DATASET_METADATA = new DatasetMetadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetMetadataRecord> getRecordType() {
        return DatasetMetadataRecord.class;
    }

    /**
     * The column <code>template.dataset_metadata.key</code>.
     */
    public final TableField<DatasetMetadataRecord, String> KEY = createField(DSL.name("key"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>template.dataset_metadata.value</code>.
     */
    public final TableField<DatasetMetadataRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    private DatasetMetadata(Name alias, Table<DatasetMetadataRecord> aliased) {
        this(alias, aliased, null);
    }

    private DatasetMetadata(Name alias, Table<DatasetMetadataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Metadata voor deze dataset\r\n\r\n@file source/database/src/main/sql/template/dataset_metadata.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>template.dataset_metadata</code> table reference
     */
    public DatasetMetadata(String alias) {
        this(DSL.name(alias), DATASET_METADATA);
    }

    /**
     * Create an aliased <code>template.dataset_metadata</code> table reference
     */
    public DatasetMetadata(Name alias) {
        this(alias, DATASET_METADATA);
    }

    /**
     * Create a <code>template.dataset_metadata</code> table reference
     */
    public DatasetMetadata() {
        this(DSL.name("dataset_metadata"), null);
    }

    public <O extends Record> DatasetMetadata(Table<O> child, ForeignKey<O, DatasetMetadataRecord> key) {
        super(child, key, DATASET_METADATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<DatasetMetadataRecord> getPrimaryKey() {
        return Keys.DATASET_METADATA_PKEY;
    }

    @Override
    public DatasetMetadata as(String alias) {
        return new DatasetMetadata(DSL.name(alias), this);
    }

    @Override
    public DatasetMetadata as(Name alias) {
        return new DatasetMetadata(alias, this);
    }

    @Override
    public DatasetMetadata as(Table<?> alias) {
        return new DatasetMetadata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetMetadata rename(String name) {
        return new DatasetMetadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetMetadata rename(Name name) {
        return new DatasetMetadata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetMetadata rename(Table<?> name) {
        return new DatasetMetadata(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
