/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.MobileSourceOnRoadCategoriesViewRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * View returning the on road mobile source categories.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/04-views/roads.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MobileSourceOnRoadCategoriesView extends TableImpl<MobileSourceOnRoadCategoriesViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.mobile_source_on_road_categories_view</code>
     */
    public static final MobileSourceOnRoadCategoriesView MOBILE_SOURCE_ON_ROAD_CATEGORIES_VIEW = new MobileSourceOnRoadCategoriesView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MobileSourceOnRoadCategoriesViewRecord> getRecordType() {
        return MobileSourceOnRoadCategoriesViewRecord.class;
    }

    /**
     * The column
     * <code>template.mobile_source_on_road_categories_view.mobile_source_on_road_category_id</code>.
     */
    public final TableField<MobileSourceOnRoadCategoriesViewRecord, Short> MOBILE_SOURCE_ON_ROAD_CATEGORY_ID = createField(DSL.name("mobile_source_on_road_category_id"), SQLDataType.SMALLINT, this, "");

    /**
     * The column
     * <code>template.mobile_source_on_road_categories_view.code</code>.
     */
    public final TableField<MobileSourceOnRoadCategoriesViewRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>template.mobile_source_on_road_categories_view.name</code>.
     */
    public final TableField<MobileSourceOnRoadCategoriesViewRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>template.mobile_source_on_road_categories_view.road_type_code</code>.
     */
    public final TableField<MobileSourceOnRoadCategoriesViewRecord, String> ROAD_TYPE_CODE = createField(DSL.name("road_type_code"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>template.mobile_source_on_road_categories_view.road_type_name</code>.
     */
    public final TableField<MobileSourceOnRoadCategoriesViewRecord, String> ROAD_TYPE_NAME = createField(DSL.name("road_type_name"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>template.mobile_source_on_road_categories_view.year</code>.
     */
    public final TableField<MobileSourceOnRoadCategoriesViewRecord, Short> YEAR = createField(DSL.name("year"), nl.aerius.emissionservice.db.generated.public_.Domains.YEAR_TYPE.getDataType(), this, "");

    /**
     * The column
     * <code>template.mobile_source_on_road_categories_view.substance_id</code>.
     */
    public final TableField<MobileSourceOnRoadCategoriesViewRecord, Short> SUBSTANCE_ID = createField(DSL.name("substance_id"), SQLDataType.SMALLINT, this, "");

    /**
     * The column
     * <code>template.mobile_source_on_road_categories_view.emission_factor</code>.
     */
    public final TableField<MobileSourceOnRoadCategoriesViewRecord, Float> EMISSION_FACTOR = createField(DSL.name("emission_factor"), nl.aerius.emissionservice.db.generated.public_.Domains.POSREAL.getDataType(), this, "");

    private MobileSourceOnRoadCategoriesView(Name alias, Table<MobileSourceOnRoadCategoriesViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private MobileSourceOnRoadCategoriesView(Name alias, Table<MobileSourceOnRoadCategoriesViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("View returning the on road mobile source categories.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/04-views/roads.sql"), TableOptions.view("""
        create view "mobile_source_on_road_categories_view" as  SELECT mobile_source_on_road_categories.mobile_source_on_road_category_id,
          mobile_source_on_road_categories.code,
          mobile_source_on_road_categories.name,
          road_type_categories.code AS road_type_code,
          road_type_categories.name AS road_type_name,
          mobile_source_on_road_category_emission_factors.year,
          mobile_source_on_road_category_emission_factors.substance_id,
          mobile_source_on_road_category_emission_factors.emission_factor
         FROM ((template.mobile_source_on_road_categories
           JOIN template.mobile_source_on_road_category_emission_factors USING (mobile_source_on_road_category_id))
           JOIN template.road_type_categories USING (road_type_category_id))
        ORDER BY mobile_source_on_road_categories.mobile_source_on_road_category_id;
        """));
    }

    /**
     * Create an aliased
     * <code>template.mobile_source_on_road_categories_view</code> table
     * reference
     */
    public MobileSourceOnRoadCategoriesView(String alias) {
        this(DSL.name(alias), MOBILE_SOURCE_ON_ROAD_CATEGORIES_VIEW);
    }

    /**
     * Create an aliased
     * <code>template.mobile_source_on_road_categories_view</code> table
     * reference
     */
    public MobileSourceOnRoadCategoriesView(Name alias) {
        this(alias, MOBILE_SOURCE_ON_ROAD_CATEGORIES_VIEW);
    }

    /**
     * Create a <code>template.mobile_source_on_road_categories_view</code>
     * table reference
     */
    public MobileSourceOnRoadCategoriesView() {
        this(DSL.name("mobile_source_on_road_categories_view"), null);
    }

    public <O extends Record> MobileSourceOnRoadCategoriesView(Table<O> child, ForeignKey<O, MobileSourceOnRoadCategoriesViewRecord> key) {
        super(child, key, MOBILE_SOURCE_ON_ROAD_CATEGORIES_VIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public MobileSourceOnRoadCategoriesView as(String alias) {
        return new MobileSourceOnRoadCategoriesView(DSL.name(alias), this);
    }

    @Override
    public MobileSourceOnRoadCategoriesView as(Name alias) {
        return new MobileSourceOnRoadCategoriesView(alias, this);
    }

    @Override
    public MobileSourceOnRoadCategoriesView as(Table<?> alias) {
        return new MobileSourceOnRoadCategoriesView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileSourceOnRoadCategoriesView rename(String name) {
        return new MobileSourceOnRoadCategoriesView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileSourceOnRoadCategoriesView rename(Name name) {
        return new MobileSourceOnRoadCategoriesView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileSourceOnRoadCategoriesView rename(Table<?> name) {
        return new MobileSourceOnRoadCategoriesView(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Short, String, String, String, String, Short, Short, Float> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Short, ? super String, ? super String, ? super String, ? super String, ? super Short, ? super Short, ? super Float, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Short, ? super String, ? super String, ? super String, ? super String, ? super Short, ? super Short, ? super Float, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
