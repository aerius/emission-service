/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.public_.tables.Substances;
import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.PlanCategoryEmissionFactorsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * De emissie factoren voor verschillende soorten plannen.
 * De emissie factoren zijn hier afhankelijk van de category_unit van de
 * bijbehorende plan_category.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/plans.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlanCategoryEmissionFactors extends TableImpl<PlanCategoryEmissionFactorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.plan_category_emission_factors</code>
     */
    public static final PlanCategoryEmissionFactors PLAN_CATEGORY_EMISSION_FACTORS = new PlanCategoryEmissionFactors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanCategoryEmissionFactorsRecord> getRecordType() {
        return PlanCategoryEmissionFactorsRecord.class;
    }

    /**
     * The column
     * <code>template.plan_category_emission_factors.plan_category_id</code>.
     */
    public final TableField<PlanCategoryEmissionFactorsRecord, Short> PLAN_CATEGORY_ID = createField(DSL.name("plan_category_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>template.plan_category_emission_factors.substance_id</code>.
     */
    public final TableField<PlanCategoryEmissionFactorsRecord, Short> SUBSTANCE_ID = createField(DSL.name("substance_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>template.plan_category_emission_factors.emission_factor</code>.
     */
    public final TableField<PlanCategoryEmissionFactorsRecord, Float> EMISSION_FACTOR = createField(DSL.name("emission_factor"), nl.aerius.emissionservice.db.generated.public_.Domains.POSREAL.getDataType().nullable(false), this, "");

    private PlanCategoryEmissionFactors(Name alias, Table<PlanCategoryEmissionFactorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlanCategoryEmissionFactors(Name alias, Table<PlanCategoryEmissionFactorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("De emissie factoren voor verschillende soorten plannen.\r\nDe emissie factoren zijn hier afhankelijk van de category_unit van de bijbehorende plan_category.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/plans.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>template.plan_category_emission_factors</code>
     * table reference
     */
    public PlanCategoryEmissionFactors(String alias) {
        this(DSL.name(alias), PLAN_CATEGORY_EMISSION_FACTORS);
    }

    /**
     * Create an aliased <code>template.plan_category_emission_factors</code>
     * table reference
     */
    public PlanCategoryEmissionFactors(Name alias) {
        this(alias, PLAN_CATEGORY_EMISSION_FACTORS);
    }

    /**
     * Create a <code>template.plan_category_emission_factors</code> table
     * reference
     */
    public PlanCategoryEmissionFactors() {
        this(DSL.name("plan_category_emission_factors"), null);
    }

    public <O extends Record> PlanCategoryEmissionFactors(Table<O> child, ForeignKey<O, PlanCategoryEmissionFactorsRecord> key) {
        super(child, key, PLAN_CATEGORY_EMISSION_FACTORS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<PlanCategoryEmissionFactorsRecord> getPrimaryKey() {
        return Keys.PLAN_CATEGORY_EMISSION_FACTORS_PKEY;
    }

    @Override
    public List<ForeignKey<PlanCategoryEmissionFactorsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PLAN_CATEGORY_EMISSION_FACTORS__PLAN_CATEGORY_EMISSION_FACTORS_FKEY_PLAN_CATEGORIES, Keys.PLAN_CATEGORY_EMISSION_FACTORS__PLAN_CATEGORY_EMISSION_FACTORS_FKEY_SUBSTANCES);
    }

    private transient PlanCategories _planCategories;
    private transient Substances _substances;

    /**
     * Get the implicit join path to the <code>template.plan_categories</code>
     * table.
     */
    public PlanCategories planCategories() {
        if (_planCategories == null)
            _planCategories = new PlanCategories(this, Keys.PLAN_CATEGORY_EMISSION_FACTORS__PLAN_CATEGORY_EMISSION_FACTORS_FKEY_PLAN_CATEGORIES);

        return _planCategories;
    }

    /**
     * Get the implicit join path to the <code>public.substances</code> table.
     */
    public Substances substances() {
        if (_substances == null)
            _substances = new Substances(this, Keys.PLAN_CATEGORY_EMISSION_FACTORS__PLAN_CATEGORY_EMISSION_FACTORS_FKEY_SUBSTANCES);

        return _substances;
    }

    @Override
    public PlanCategoryEmissionFactors as(String alias) {
        return new PlanCategoryEmissionFactors(DSL.name(alias), this);
    }

    @Override
    public PlanCategoryEmissionFactors as(Name alias) {
        return new PlanCategoryEmissionFactors(alias, this);
    }

    @Override
    public PlanCategoryEmissionFactors as(Table<?> alias) {
        return new PlanCategoryEmissionFactors(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanCategoryEmissionFactors rename(String name) {
        return new PlanCategoryEmissionFactors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanCategoryEmissionFactors rename(Name name) {
        return new PlanCategoryEmissionFactors(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanCategoryEmissionFactors rename(Table<?> name) {
        return new PlanCategoryEmissionFactors(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Short, Short, Float> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Short, ? super Short, ? super Float, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Short, ? super Short, ? super Float, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
