/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.ShippingMaritimeCategoriesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table containing the maritime shipping categories.
 * The name of the category should indicate a tonnage-range.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/shipping_maritime.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShippingMaritimeCategories extends TableImpl<ShippingMaritimeCategoriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.shipping_maritime_categories</code>
     */
    public static final ShippingMaritimeCategories SHIPPING_MARITIME_CATEGORIES = new ShippingMaritimeCategories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShippingMaritimeCategoriesRecord> getRecordType() {
        return ShippingMaritimeCategoriesRecord.class;
    }

    /**
     * The column
     * <code>template.shipping_maritime_categories.shipping_maritime_category_id</code>.
     */
    public final TableField<ShippingMaritimeCategoriesRecord, Short> SHIPPING_MARITIME_CATEGORY_ID = createField(DSL.name("shipping_maritime_category_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>template.shipping_maritime_categories.code</code>.
     */
    public final TableField<ShippingMaritimeCategoriesRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>template.shipping_maritime_categories.name</code>.
     */
    public final TableField<ShippingMaritimeCategoriesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>template.shipping_maritime_categories.description</code>.
     */
    public final TableField<ShippingMaritimeCategoriesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private ShippingMaritimeCategories(Name alias, Table<ShippingMaritimeCategoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShippingMaritimeCategories(Name alias, Table<ShippingMaritimeCategoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table containing the maritime shipping categories.\r\nThe name of the category should indicate a tonnage-range.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/shipping_maritime.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>template.shipping_maritime_categories</code>
     * table reference
     */
    public ShippingMaritimeCategories(String alias) {
        this(DSL.name(alias), SHIPPING_MARITIME_CATEGORIES);
    }

    /**
     * Create an aliased <code>template.shipping_maritime_categories</code>
     * table reference
     */
    public ShippingMaritimeCategories(Name alias) {
        this(alias, SHIPPING_MARITIME_CATEGORIES);
    }

    /**
     * Create a <code>template.shipping_maritime_categories</code> table
     * reference
     */
    public ShippingMaritimeCategories() {
        this(DSL.name("shipping_maritime_categories"), null);
    }

    public <O extends Record> ShippingMaritimeCategories(Table<O> child, ForeignKey<O, ShippingMaritimeCategoriesRecord> key) {
        super(child, key, SHIPPING_MARITIME_CATEGORIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<ShippingMaritimeCategoriesRecord> getPrimaryKey() {
        return Keys.SHIPPING_MARITIME_CATEGORIES_PKEY;
    }

    @Override
    public List<UniqueKey<ShippingMaritimeCategoriesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SHIPPING_MARITIME_CATEGORIES_CODE_KEY, Keys.SHIPPING_MARITIME_CATEGORIES_NAME_KEY);
    }

    @Override
    public ShippingMaritimeCategories as(String alias) {
        return new ShippingMaritimeCategories(DSL.name(alias), this);
    }

    @Override
    public ShippingMaritimeCategories as(Name alias) {
        return new ShippingMaritimeCategories(alias, this);
    }

    @Override
    public ShippingMaritimeCategories as(Table<?> alias) {
        return new ShippingMaritimeCategories(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingMaritimeCategories rename(String name) {
        return new ShippingMaritimeCategories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingMaritimeCategories rename(Name name) {
        return new ShippingMaritimeCategories(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingMaritimeCategories rename(Table<?> name) {
        return new ShippingMaritimeCategories(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Short, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Short, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Short, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
