/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.public_.tables.Substances;
import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.MobileSourceOffRoadCategoryEmissionFactorsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table containing the emission factors for off road mobile sources.
 * 
 * There are emission factors available for fuel use and for operating hours.
 * Based on the category, 1 of these is present (or not 0), or both are present.
 * 
 * Besides these factors, an adblue emissionfactor can be present, which can
 * reduce the total emissions (these are expected to be negative values).
 * 
 * @column emission_factor_per_liter_fuel f1 Emission factor per liter brandstof
 * (kg/l)
 * @column emission_factor_per_operating_hour f2 Emission factor per operating
 * hour (stationary + working) (kg/hour)
 * @column emission_factor_per_liter_adblue f3 Emission factor per liter adblue
 * (kg/l).
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/mobile_sources.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MobileSourceOffRoadCategoryEmissionFactors extends TableImpl<MobileSourceOffRoadCategoryEmissionFactorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.mobile_source_off_road_category_emission_factors</code>
     */
    public static final MobileSourceOffRoadCategoryEmissionFactors MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS = new MobileSourceOffRoadCategoryEmissionFactors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MobileSourceOffRoadCategoryEmissionFactorsRecord> getRecordType() {
        return MobileSourceOffRoadCategoryEmissionFactorsRecord.class;
    }

    /**
     * The column
     * <code>template.mobile_source_off_road_category_emission_factors.mobile_source_off_road_category_id</code>.
     */
    public final TableField<MobileSourceOffRoadCategoryEmissionFactorsRecord, Short> MOBILE_SOURCE_OFF_ROAD_CATEGORY_ID = createField(DSL.name("mobile_source_off_road_category_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>template.mobile_source_off_road_category_emission_factors.substance_id</code>.
     */
    public final TableField<MobileSourceOffRoadCategoryEmissionFactorsRecord, Short> SUBSTANCE_ID = createField(DSL.name("substance_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>template.mobile_source_off_road_category_emission_factors.emission_factor_per_liter_fuel</code>.
     */
    public final TableField<MobileSourceOffRoadCategoryEmissionFactorsRecord, Float> EMISSION_FACTOR_PER_LITER_FUEL = createField(DSL.name("emission_factor_per_liter_fuel"), nl.aerius.emissionservice.db.generated.public_.Domains.POSREAL.getDataType(), this, "");

    /**
     * The column
     * <code>template.mobile_source_off_road_category_emission_factors.emission_factor_per_operating_hour</code>.
     */
    public final TableField<MobileSourceOffRoadCategoryEmissionFactorsRecord, Float> EMISSION_FACTOR_PER_OPERATING_HOUR = createField(DSL.name("emission_factor_per_operating_hour"), nl.aerius.emissionservice.db.generated.public_.Domains.POSREAL.getDataType(), this, "");

    /**
     * The column
     * <code>template.mobile_source_off_road_category_emission_factors.emission_factor_per_liter_adblue</code>.
     */
    public final TableField<MobileSourceOffRoadCategoryEmissionFactorsRecord, Float> EMISSION_FACTOR_PER_LITER_ADBLUE = createField(DSL.name("emission_factor_per_liter_adblue"), SQLDataType.REAL, this, "");

    private MobileSourceOffRoadCategoryEmissionFactors(Name alias, Table<MobileSourceOffRoadCategoryEmissionFactorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MobileSourceOffRoadCategoryEmissionFactors(Name alias, Table<MobileSourceOffRoadCategoryEmissionFactorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table containing the emission factors for off road mobile sources.\r\n\r\nThere are emission factors available for fuel use and for operating hours.\r\nBased on the category, 1 of these is present (or not 0), or both are present.\r\nBesides these factors, an adblue emissionfactor can be present, which can reduce the total emissions (these are expected to be negative values).\r\n\r\n@column emission_factor_per_liter_fuel f1 Emission factor per liter brandstof (kg/l)\r\n@column emission_factor_per_operating_hour f2 Emission factor per operating hour (stationary + working) (kg/hour)\r\n@column emission_factor_per_liter_adblue f3 Emission factor per liter adblue (kg/l).\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/mobile_sources.sql"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>template.mobile_source_off_road_category_emission_factors</code>
     * table reference
     */
    public MobileSourceOffRoadCategoryEmissionFactors(String alias) {
        this(DSL.name(alias), MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS);
    }

    /**
     * Create an aliased
     * <code>template.mobile_source_off_road_category_emission_factors</code>
     * table reference
     */
    public MobileSourceOffRoadCategoryEmissionFactors(Name alias) {
        this(alias, MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS);
    }

    /**
     * Create a
     * <code>template.mobile_source_off_road_category_emission_factors</code>
     * table reference
     */
    public MobileSourceOffRoadCategoryEmissionFactors() {
        this(DSL.name("mobile_source_off_road_category_emission_factors"), null);
    }

    public <O extends Record> MobileSourceOffRoadCategoryEmissionFactors(Table<O> child, ForeignKey<O, MobileSourceOffRoadCategoryEmissionFactorsRecord> key) {
        super(child, key, MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<MobileSourceOffRoadCategoryEmissionFactorsRecord> getPrimaryKey() {
        return Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EFAC_PKEY;
    }

    @Override
    public List<ForeignKey<MobileSourceOffRoadCategoryEmissionFactorsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS__MOBILE_SOURCE_OFF_ROAD_CATEGORY_EFAC_FKEY_MOBILE_OFF_ROAD_CAT, Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS__MOBILE_SOURCE_OFF_ROAD_CATEGORY_EFAC_FKEY_SUBSTANCES);
    }

    private transient MobileSourceOffRoadCategories _mobileSourceOffRoadCategories;
    private transient Substances _substances;

    /**
     * Get the implicit join path to the
     * <code>template.mobile_source_off_road_categories</code> table.
     */
    public MobileSourceOffRoadCategories mobileSourceOffRoadCategories() {
        if (_mobileSourceOffRoadCategories == null)
            _mobileSourceOffRoadCategories = new MobileSourceOffRoadCategories(this, Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS__MOBILE_SOURCE_OFF_ROAD_CATEGORY_EFAC_FKEY_MOBILE_OFF_ROAD_CAT);

        return _mobileSourceOffRoadCategories;
    }

    /**
     * Get the implicit join path to the <code>public.substances</code> table.
     */
    public Substances substances() {
        if (_substances == null)
            _substances = new Substances(this, Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS__MOBILE_SOURCE_OFF_ROAD_CATEGORY_EFAC_FKEY_SUBSTANCES);

        return _substances;
    }

    @Override
    public MobileSourceOffRoadCategoryEmissionFactors as(String alias) {
        return new MobileSourceOffRoadCategoryEmissionFactors(DSL.name(alias), this);
    }

    @Override
    public MobileSourceOffRoadCategoryEmissionFactors as(Name alias) {
        return new MobileSourceOffRoadCategoryEmissionFactors(alias, this);
    }

    @Override
    public MobileSourceOffRoadCategoryEmissionFactors as(Table<?> alias) {
        return new MobileSourceOffRoadCategoryEmissionFactors(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileSourceOffRoadCategoryEmissionFactors rename(String name) {
        return new MobileSourceOffRoadCategoryEmissionFactors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileSourceOffRoadCategoryEmissionFactors rename(Name name) {
        return new MobileSourceOffRoadCategoryEmissionFactors(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileSourceOffRoadCategoryEmissionFactors rename(Table<?> name) {
        return new MobileSourceOffRoadCategoryEmissionFactors(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Short, Short, Float, Float, Float> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Short, ? super Short, ? super Float, ? super Float, ? super Float, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Short, ? super Short, ? super Float, ? super Float, ? super Float, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
