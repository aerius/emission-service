/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.FarmlandCategoriesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table containing categories for the different farmland activities.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/farmlands.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FarmlandCategories extends TableImpl<FarmlandCategoriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>template.farmland_categories</code>
     */
    public static final FarmlandCategories FARMLAND_CATEGORIES = new FarmlandCategories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FarmlandCategoriesRecord> getRecordType() {
        return FarmlandCategoriesRecord.class;
    }

    /**
     * The column
     * <code>template.farmland_categories.farmland_category_id</code>.
     */
    public final TableField<FarmlandCategoriesRecord, Short> FARMLAND_CATEGORY_ID = createField(DSL.name("farmland_category_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>template.farmland_categories.sector_id</code>.
     */
    public final TableField<FarmlandCategoriesRecord, Integer> SECTOR_ID = createField(DSL.name("sector_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>template.farmland_categories.code</code>.
     */
    public final TableField<FarmlandCategoriesRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>template.farmland_categories.name</code>.
     */
    public final TableField<FarmlandCategoriesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>template.farmland_categories.description</code>.
     */
    public final TableField<FarmlandCategoriesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private FarmlandCategories(Name alias, Table<FarmlandCategoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private FarmlandCategories(Name alias, Table<FarmlandCategoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table containing categories for the different farmland activities.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/farmlands.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>template.farmland_categories</code> table
     * reference
     */
    public FarmlandCategories(String alias) {
        this(DSL.name(alias), FARMLAND_CATEGORIES);
    }

    /**
     * Create an aliased <code>template.farmland_categories</code> table
     * reference
     */
    public FarmlandCategories(Name alias) {
        this(alias, FARMLAND_CATEGORIES);
    }

    /**
     * Create a <code>template.farmland_categories</code> table reference
     */
    public FarmlandCategories() {
        this(DSL.name("farmland_categories"), null);
    }

    public <O extends Record> FarmlandCategories(Table<O> child, ForeignKey<O, FarmlandCategoriesRecord> key) {
        super(child, key, FARMLAND_CATEGORIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<FarmlandCategoriesRecord> getPrimaryKey() {
        return Keys.FARMLAND_CATEGORIES_PKEY;
    }

    @Override
    public List<UniqueKey<FarmlandCategoriesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.FARMLAND_CATEGORIES_CODE_KEY, Keys.FARMLAND_CATEGORIES_NAME_KEY);
    }

    @Override
    public List<ForeignKey<FarmlandCategoriesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FARMLAND_CATEGORIES__FARMLAND_CATEGORIES_FKEY_SECTORS);
    }

    private transient Sectors _sectors;

    /**
     * Get the implicit join path to the <code>template.sectors</code> table.
     */
    public Sectors sectors() {
        if (_sectors == null)
            _sectors = new Sectors(this, Keys.FARMLAND_CATEGORIES__FARMLAND_CATEGORIES_FKEY_SECTORS);

        return _sectors;
    }

    @Override
    public FarmlandCategories as(String alias) {
        return new FarmlandCategories(DSL.name(alias), this);
    }

    @Override
    public FarmlandCategories as(Name alias) {
        return new FarmlandCategories(alias, this);
    }

    @Override
    public FarmlandCategories as(Table<?> alias) {
        return new FarmlandCategories(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmlandCategories rename(String name) {
        return new FarmlandCategories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmlandCategories rename(Name name) {
        return new FarmlandCategories(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmlandCategories rename(Table<?> name) {
        return new FarmlandCategories(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Short, Integer, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Short, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Short, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
