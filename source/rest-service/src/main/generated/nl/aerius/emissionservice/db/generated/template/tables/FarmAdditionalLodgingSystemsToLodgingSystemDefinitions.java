/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.FarmAdditionalLodgingSystemsToLodgingSystemDefinitionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Koppeling tussen additionele staltechnieken en stalbeschrijvingen (N:N).
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/farms.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FarmAdditionalLodgingSystemsToLodgingSystemDefinitions extends TableImpl<FarmAdditionalLodgingSystemsToLodgingSystemDefinitionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.farm_additional_lodging_systems_to_lodging_system_definitions</code>
     */
    public static final FarmAdditionalLodgingSystemsToLodgingSystemDefinitions FARM_ADDITIONAL_LODGING_SYSTEMS_TO_LODGING_SYSTEM_DEFINITIONS = new FarmAdditionalLodgingSystemsToLodgingSystemDefinitions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FarmAdditionalLodgingSystemsToLodgingSystemDefinitionsRecord> getRecordType() {
        return FarmAdditionalLodgingSystemsToLodgingSystemDefinitionsRecord.class;
    }

    /**
     * The column
     * <code>template.farm_additional_lodging_systems_to_lodging_system_definitions.farm_additional_lodging_system_id</code>.
     */
    public final TableField<FarmAdditionalLodgingSystemsToLodgingSystemDefinitionsRecord, Integer> FARM_ADDITIONAL_LODGING_SYSTEM_ID = createField(DSL.name("farm_additional_lodging_system_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>template.farm_additional_lodging_systems_to_lodging_system_definitions.farm_lodging_system_definition_id</code>.
     */
    public final TableField<FarmAdditionalLodgingSystemsToLodgingSystemDefinitionsRecord, Integer> FARM_LODGING_SYSTEM_DEFINITION_ID = createField(DSL.name("farm_lodging_system_definition_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private FarmAdditionalLodgingSystemsToLodgingSystemDefinitions(Name alias, Table<FarmAdditionalLodgingSystemsToLodgingSystemDefinitionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private FarmAdditionalLodgingSystemsToLodgingSystemDefinitions(Name alias, Table<FarmAdditionalLodgingSystemsToLodgingSystemDefinitionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Koppeling tussen additionele staltechnieken en stalbeschrijvingen (N:N).\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/farms.sql"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>template.farm_additional_lodging_systems_to_lodging_system_definitions</code>
     * table reference
     */
    public FarmAdditionalLodgingSystemsToLodgingSystemDefinitions(String alias) {
        this(DSL.name(alias), FARM_ADDITIONAL_LODGING_SYSTEMS_TO_LODGING_SYSTEM_DEFINITIONS);
    }

    /**
     * Create an aliased
     * <code>template.farm_additional_lodging_systems_to_lodging_system_definitions</code>
     * table reference
     */
    public FarmAdditionalLodgingSystemsToLodgingSystemDefinitions(Name alias) {
        this(alias, FARM_ADDITIONAL_LODGING_SYSTEMS_TO_LODGING_SYSTEM_DEFINITIONS);
    }

    /**
     * Create a
     * <code>template.farm_additional_lodging_systems_to_lodging_system_definitions</code>
     * table reference
     */
    public FarmAdditionalLodgingSystemsToLodgingSystemDefinitions() {
        this(DSL.name("farm_additional_lodging_systems_to_lodging_system_definitions"), null);
    }

    public <O extends Record> FarmAdditionalLodgingSystemsToLodgingSystemDefinitions(Table<O> child, ForeignKey<O, FarmAdditionalLodgingSystemsToLodgingSystemDefinitionsRecord> key) {
        super(child, key, FARM_ADDITIONAL_LODGING_SYSTEMS_TO_LODGING_SYSTEM_DEFINITIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<FarmAdditionalLodgingSystemsToLodgingSystemDefinitionsRecord> getPrimaryKey() {
        return Keys.FARM_ADDITIONAL_LODGING_SYSTEMS_TO_DEFINITIONS_PKEY;
    }

    @Override
    public List<ForeignKey<FarmAdditionalLodgingSystemsToLodgingSystemDefinitionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FARM_ADDITIONAL_LODGING_SYSTEMS_TO_LODGING_SYSTEM_DEFINITIONS__FARM_ADDITIONAL_LODGING_SYSTEMS_TO_DEFINITIONS_FKEY_ADDITIONAL, Keys.FARM_ADDITIONAL_LODGING_SYSTEMS_TO_LODGING_SYSTEM_DEFINITIONS__FARM_ADDITIONAL_LODGING_SYSTEMS_TO_DEFINITIONS_FKEY_DEFS);
    }

    private transient FarmAdditionalLodgingSystems _farmAdditionalLodgingSystems;
    private transient FarmLodgingSystemDefinitions _farmLodgingSystemDefinitions;

    /**
     * Get the implicit join path to the
     * <code>template.farm_additional_lodging_systems</code> table.
     */
    public FarmAdditionalLodgingSystems farmAdditionalLodgingSystems() {
        if (_farmAdditionalLodgingSystems == null)
            _farmAdditionalLodgingSystems = new FarmAdditionalLodgingSystems(this, Keys.FARM_ADDITIONAL_LODGING_SYSTEMS_TO_LODGING_SYSTEM_DEFINITIONS__FARM_ADDITIONAL_LODGING_SYSTEMS_TO_DEFINITIONS_FKEY_ADDITIONAL);

        return _farmAdditionalLodgingSystems;
    }

    /**
     * Get the implicit join path to the
     * <code>template.farm_lodging_system_definitions</code> table.
     */
    public FarmLodgingSystemDefinitions farmLodgingSystemDefinitions() {
        if (_farmLodgingSystemDefinitions == null)
            _farmLodgingSystemDefinitions = new FarmLodgingSystemDefinitions(this, Keys.FARM_ADDITIONAL_LODGING_SYSTEMS_TO_LODGING_SYSTEM_DEFINITIONS__FARM_ADDITIONAL_LODGING_SYSTEMS_TO_DEFINITIONS_FKEY_DEFS);

        return _farmLodgingSystemDefinitions;
    }

    @Override
    public FarmAdditionalLodgingSystemsToLodgingSystemDefinitions as(String alias) {
        return new FarmAdditionalLodgingSystemsToLodgingSystemDefinitions(DSL.name(alias), this);
    }

    @Override
    public FarmAdditionalLodgingSystemsToLodgingSystemDefinitions as(Name alias) {
        return new FarmAdditionalLodgingSystemsToLodgingSystemDefinitions(alias, this);
    }

    @Override
    public FarmAdditionalLodgingSystemsToLodgingSystemDefinitions as(Table<?> alias) {
        return new FarmAdditionalLodgingSystemsToLodgingSystemDefinitions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmAdditionalLodgingSystemsToLodgingSystemDefinitions rename(String name) {
        return new FarmAdditionalLodgingSystemsToLodgingSystemDefinitions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmAdditionalLodgingSystemsToLodgingSystemDefinitions rename(Name name) {
        return new FarmAdditionalLodgingSystemsToLodgingSystemDefinitions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmAdditionalLodgingSystemsToLodgingSystemDefinitions rename(Table<?> name) {
        return new FarmAdditionalLodgingSystemsToLodgingSystemDefinitions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
