/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.public_.tables;


import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.public_.Keys;
import nl.aerius.emissionservice.db.generated.public_.Public;
import nl.aerius.emissionservice.db.generated.public_.tables.records.SubstancesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Substances available within the system.
 * 
 * @file source/database/src/main/sql/substances/02-tables.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Substances extends TableImpl<SubstancesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.substances</code>
     */
    public static final Substances SUBSTANCES = new Substances();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubstancesRecord> getRecordType() {
        return SubstancesRecord.class;
    }

    /**
     * The column <code>public.substances.substance_id</code>.
     */
    public final TableField<SubstancesRecord, Short> SUBSTANCE_ID = createField(DSL.name("substance_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.substances.name</code>.
     */
    public final TableField<SubstancesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.substances.description</code>.
     */
    public final TableField<SubstancesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private Substances(Name alias, Table<SubstancesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Substances(Name alias, Table<SubstancesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Substances available within the system.\r\n\r\n@file source/database/src/main/sql/substances/02-tables.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.substances</code> table reference
     */
    public Substances(String alias) {
        this(DSL.name(alias), SUBSTANCES);
    }

    /**
     * Create an aliased <code>public.substances</code> table reference
     */
    public Substances(Name alias) {
        this(alias, SUBSTANCES);
    }

    /**
     * Create a <code>public.substances</code> table reference
     */
    public Substances() {
        this(DSL.name("substances"), null);
    }

    public <O extends Record> Substances(Table<O> child, ForeignKey<O, SubstancesRecord> key) {
        super(child, key, SUBSTANCES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SubstancesRecord> getPrimaryKey() {
        return Keys.SUBSTANCES_PKEY;
    }

    @Override
    public Substances as(String alias) {
        return new Substances(DSL.name(alias), this);
    }

    @Override
    public Substances as(Name alias) {
        return new Substances(alias, this);
    }

    @Override
    public Substances as(Table<?> alias) {
        return new Substances(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Substances rename(String name) {
        return new Substances(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Substances rename(Name name) {
        return new Substances(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Substances rename(Table<?> name) {
        return new Substances(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Short, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Short, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Short, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
