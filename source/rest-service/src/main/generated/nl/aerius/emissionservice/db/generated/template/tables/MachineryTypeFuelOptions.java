/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.MachineryTypeFuelOptionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Parameters per werktuig en brandstof voor de emissieberekening.
 * @column power vermogen in kW.
 * @column load belasting, een percentage als fractie.
 * @column energy_efficiency efficientie van de motor in g/kWh (hoeveel gram
 * brandstof benodigd is voor 1 kWh).
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/machinery_types.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MachineryTypeFuelOptions extends TableImpl<MachineryTypeFuelOptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.machinery_type_fuel_options</code>
     */
    public static final MachineryTypeFuelOptions MACHINERY_TYPE_FUEL_OPTIONS = new MachineryTypeFuelOptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MachineryTypeFuelOptionsRecord> getRecordType() {
        return MachineryTypeFuelOptionsRecord.class;
    }

    /**
     * The column
     * <code>template.machinery_type_fuel_options.machinery_type_id</code>.
     */
    public final TableField<MachineryTypeFuelOptionsRecord, Integer> MACHINERY_TYPE_ID = createField(DSL.name("machinery_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>template.machinery_type_fuel_options.machinery_fuel_type_id</code>.
     */
    public final TableField<MachineryTypeFuelOptionsRecord, Integer> MACHINERY_FUEL_TYPE_ID = createField(DSL.name("machinery_fuel_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>template.machinery_type_fuel_options.power</code>.
     */
    public final TableField<MachineryTypeFuelOptionsRecord, Integer> POWER = createField(DSL.name("power"), nl.aerius.emissionservice.db.generated.public_.Domains.POSINT.getDataType().nullable(false), this, "");

    /**
     * The column <code>template.machinery_type_fuel_options.load</code>.
     */
    public final TableField<MachineryTypeFuelOptionsRecord, Float> LOAD = createField(DSL.name("load"), nl.aerius.emissionservice.db.generated.public_.Domains.FRACTION.getDataType().nullable(false), this, "");

    /**
     * The column
     * <code>template.machinery_type_fuel_options.energy_efficiency</code>.
     */
    public final TableField<MachineryTypeFuelOptionsRecord, Float> ENERGY_EFFICIENCY = createField(DSL.name("energy_efficiency"), nl.aerius.emissionservice.db.generated.public_.Domains.POSREAL.getDataType().nullable(false), this, "");

    private MachineryTypeFuelOptions(Name alias, Table<MachineryTypeFuelOptionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MachineryTypeFuelOptions(Name alias, Table<MachineryTypeFuelOptionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Parameters per werktuig en brandstof voor de emissieberekening.\r\n@column power vermogen in kW.\r\n@column load belasting, een percentage als fractie.\r\n@column energy_efficiency efficientie van de motor in g/kWh (hoeveel gram brandstof benodigd is voor 1 kWh).\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/machinery_types.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>template.machinery_type_fuel_options</code> table
     * reference
     */
    public MachineryTypeFuelOptions(String alias) {
        this(DSL.name(alias), MACHINERY_TYPE_FUEL_OPTIONS);
    }

    /**
     * Create an aliased <code>template.machinery_type_fuel_options</code> table
     * reference
     */
    public MachineryTypeFuelOptions(Name alias) {
        this(alias, MACHINERY_TYPE_FUEL_OPTIONS);
    }

    /**
     * Create a <code>template.machinery_type_fuel_options</code> table
     * reference
     */
    public MachineryTypeFuelOptions() {
        this(DSL.name("machinery_type_fuel_options"), null);
    }

    public <O extends Record> MachineryTypeFuelOptions(Table<O> child, ForeignKey<O, MachineryTypeFuelOptionsRecord> key) {
        super(child, key, MACHINERY_TYPE_FUEL_OPTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<MachineryTypeFuelOptionsRecord> getPrimaryKey() {
        return Keys.MACHINERY_TYPE_FUEL_OPTIONS_PKEY;
    }

    @Override
    public List<ForeignKey<MachineryTypeFuelOptionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MACHINERY_TYPE_FUEL_OPTIONS__MACHINERY_TYPE_FUEL_OPTIONS_FKEY_MACHINERY_TYPES, Keys.MACHINERY_TYPE_FUEL_OPTIONS__MACHINERY_TYPE_FUEL_OPTIONS_FKEY_MACHINERY_FUEL_TYPES);
    }

    private transient MachineryTypes _machineryTypes;
    private transient MachineryFuelTypes _machineryFuelTypes;

    /**
     * Get the implicit join path to the <code>template.machinery_types</code>
     * table.
     */
    public MachineryTypes machineryTypes() {
        if (_machineryTypes == null)
            _machineryTypes = new MachineryTypes(this, Keys.MACHINERY_TYPE_FUEL_OPTIONS__MACHINERY_TYPE_FUEL_OPTIONS_FKEY_MACHINERY_TYPES);

        return _machineryTypes;
    }

    /**
     * Get the implicit join path to the
     * <code>template.machinery_fuel_types</code> table.
     */
    public MachineryFuelTypes machineryFuelTypes() {
        if (_machineryFuelTypes == null)
            _machineryFuelTypes = new MachineryFuelTypes(this, Keys.MACHINERY_TYPE_FUEL_OPTIONS__MACHINERY_TYPE_FUEL_OPTIONS_FKEY_MACHINERY_FUEL_TYPES);

        return _machineryFuelTypes;
    }

    @Override
    public MachineryTypeFuelOptions as(String alias) {
        return new MachineryTypeFuelOptions(DSL.name(alias), this);
    }

    @Override
    public MachineryTypeFuelOptions as(Name alias) {
        return new MachineryTypeFuelOptions(alias, this);
    }

    @Override
    public MachineryTypeFuelOptions as(Table<?> alias) {
        return new MachineryTypeFuelOptions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MachineryTypeFuelOptions rename(String name) {
        return new MachineryTypeFuelOptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MachineryTypeFuelOptions rename(Name name) {
        return new MachineryTypeFuelOptions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MachineryTypeFuelOptions rename(Table<?> name) {
        return new MachineryTypeFuelOptions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, Float, Float> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super Integer, ? super Float, ? super Float, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super Integer, ? super Float, ? super Float, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
