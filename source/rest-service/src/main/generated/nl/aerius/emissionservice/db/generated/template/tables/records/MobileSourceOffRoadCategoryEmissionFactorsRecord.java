/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables.records;


import nl.aerius.emissionservice.db.generated.template.tables.MobileSourceOffRoadCategoryEmissionFactors;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Table containing the emission factors for off road mobile sources.
 * 
 * There are emission factors available for fuel use and for operating hours.
 * Based on the category, 1 of these is present (or not 0), or both are present.
 * 
 * Besides these factors, an adblue emissionfactor can be present, which can
 * reduce the total emissions (these are expected to be negative values).
 * 
 * @column emission_factor_per_liter_fuel f1 Emission factor per liter brandstof
 * (kg/l)
 * @column emission_factor_per_operating_hour f2 Emission factor per operating
 * hour (stationary + working) (kg/hour)
 * @column emission_factor_per_liter_adblue f3 Emission factor per liter adblue
 * (kg/l).
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/mobile_sources.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MobileSourceOffRoadCategoryEmissionFactorsRecord extends UpdatableRecordImpl<MobileSourceOffRoadCategoryEmissionFactorsRecord> implements Record5<Short, Short, Float, Float, Float> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>template.mobile_source_off_road_category_emission_factors.mobile_source_off_road_category_id</code>.
     */
    public void setMobileSourceOffRoadCategoryId(Short value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>template.mobile_source_off_road_category_emission_factors.mobile_source_off_road_category_id</code>.
     */
    public Short getMobileSourceOffRoadCategoryId() {
        return (Short) get(0);
    }

    /**
     * Setter for
     * <code>template.mobile_source_off_road_category_emission_factors.substance_id</code>.
     */
    public void setSubstanceId(Short value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>template.mobile_source_off_road_category_emission_factors.substance_id</code>.
     */
    public Short getSubstanceId() {
        return (Short) get(1);
    }

    /**
     * Setter for
     * <code>template.mobile_source_off_road_category_emission_factors.emission_factor_per_liter_fuel</code>.
     */
    public void setEmissionFactorPerLiterFuel(Float value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>template.mobile_source_off_road_category_emission_factors.emission_factor_per_liter_fuel</code>.
     */
    public Float getEmissionFactorPerLiterFuel() {
        return (Float) get(2);
    }

    /**
     * Setter for
     * <code>template.mobile_source_off_road_category_emission_factors.emission_factor_per_operating_hour</code>.
     */
    public void setEmissionFactorPerOperatingHour(Float value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>template.mobile_source_off_road_category_emission_factors.emission_factor_per_operating_hour</code>.
     */
    public Float getEmissionFactorPerOperatingHour() {
        return (Float) get(3);
    }

    /**
     * Setter for
     * <code>template.mobile_source_off_road_category_emission_factors.emission_factor_per_liter_adblue</code>.
     */
    public void setEmissionFactorPerLiterAdblue(Float value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>template.mobile_source_off_road_category_emission_factors.emission_factor_per_liter_adblue</code>.
     */
    public Float getEmissionFactorPerLiterAdblue() {
        return (Float) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Short, Short> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Short, Short, Float, Float, Float> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Short, Short, Float, Float, Float> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return MobileSourceOffRoadCategoryEmissionFactors.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS.MOBILE_SOURCE_OFF_ROAD_CATEGORY_ID;
    }

    @Override
    public Field<Short> field2() {
        return MobileSourceOffRoadCategoryEmissionFactors.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS.SUBSTANCE_ID;
    }

    @Override
    public Field<Float> field3() {
        return MobileSourceOffRoadCategoryEmissionFactors.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS.EMISSION_FACTOR_PER_LITER_FUEL;
    }

    @Override
    public Field<Float> field4() {
        return MobileSourceOffRoadCategoryEmissionFactors.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS.EMISSION_FACTOR_PER_OPERATING_HOUR;
    }

    @Override
    public Field<Float> field5() {
        return MobileSourceOffRoadCategoryEmissionFactors.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS.EMISSION_FACTOR_PER_LITER_ADBLUE;
    }

    @Override
    public Short component1() {
        return getMobileSourceOffRoadCategoryId();
    }

    @Override
    public Short component2() {
        return getSubstanceId();
    }

    @Override
    public Float component3() {
        return getEmissionFactorPerLiterFuel();
    }

    @Override
    public Float component4() {
        return getEmissionFactorPerOperatingHour();
    }

    @Override
    public Float component5() {
        return getEmissionFactorPerLiterAdblue();
    }

    @Override
    public Short value1() {
        return getMobileSourceOffRoadCategoryId();
    }

    @Override
    public Short value2() {
        return getSubstanceId();
    }

    @Override
    public Float value3() {
        return getEmissionFactorPerLiterFuel();
    }

    @Override
    public Float value4() {
        return getEmissionFactorPerOperatingHour();
    }

    @Override
    public Float value5() {
        return getEmissionFactorPerLiterAdblue();
    }

    @Override
    public MobileSourceOffRoadCategoryEmissionFactorsRecord value1(Short value) {
        setMobileSourceOffRoadCategoryId(value);
        return this;
    }

    @Override
    public MobileSourceOffRoadCategoryEmissionFactorsRecord value2(Short value) {
        setSubstanceId(value);
        return this;
    }

    @Override
    public MobileSourceOffRoadCategoryEmissionFactorsRecord value3(Float value) {
        setEmissionFactorPerLiterFuel(value);
        return this;
    }

    @Override
    public MobileSourceOffRoadCategoryEmissionFactorsRecord value4(Float value) {
        setEmissionFactorPerOperatingHour(value);
        return this;
    }

    @Override
    public MobileSourceOffRoadCategoryEmissionFactorsRecord value5(Float value) {
        setEmissionFactorPerLiterAdblue(value);
        return this;
    }

    @Override
    public MobileSourceOffRoadCategoryEmissionFactorsRecord values(Short value1, Short value2, Float value3, Float value4, Float value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MobileSourceOffRoadCategoryEmissionFactorsRecord
     */
    public MobileSourceOffRoadCategoryEmissionFactorsRecord() {
        super(MobileSourceOffRoadCategoryEmissionFactors.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS);
    }

    /**
     * Create a detached, initialised
     * MobileSourceOffRoadCategoryEmissionFactorsRecord
     */
    public MobileSourceOffRoadCategoryEmissionFactorsRecord(Short mobileSourceOffRoadCategoryId, Short substanceId, Float emissionFactorPerLiterFuel, Float emissionFactorPerOperatingHour, Float emissionFactorPerLiterAdblue) {
        super(MobileSourceOffRoadCategoryEmissionFactors.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS);

        setMobileSourceOffRoadCategoryId(mobileSourceOffRoadCategoryId);
        setSubstanceId(substanceId);
        setEmissionFactorPerLiterFuel(emissionFactorPerLiterFuel);
        setEmissionFactorPerOperatingHour(emissionFactorPerOperatingHour);
        setEmissionFactorPerLiterAdblue(emissionFactorPerLiterAdblue);
    }
}
