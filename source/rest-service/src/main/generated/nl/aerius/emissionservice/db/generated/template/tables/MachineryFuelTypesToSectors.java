/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.MachineryFuelTypesToSectorsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Hiermee wordt expliciet een koppeling gemaakt tussen sectoren en
 * brandstof-types.
 * Dit wordt gebruikt om het algemene werktuigtype 'Anders' samen te stellen
 * door middel van de machinery_fuel_types_view.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/machinery_types.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MachineryFuelTypesToSectors extends TableImpl<MachineryFuelTypesToSectorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.machinery_fuel_types_to_sectors</code>
     */
    public static final MachineryFuelTypesToSectors MACHINERY_FUEL_TYPES_TO_SECTORS = new MachineryFuelTypesToSectors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MachineryFuelTypesToSectorsRecord> getRecordType() {
        return MachineryFuelTypesToSectorsRecord.class;
    }

    /**
     * The column
     * <code>template.machinery_fuel_types_to_sectors.machinery_fuel_type_id</code>.
     */
    public final TableField<MachineryFuelTypesToSectorsRecord, Integer> MACHINERY_FUEL_TYPE_ID = createField(DSL.name("machinery_fuel_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>template.machinery_fuel_types_to_sectors.sector_id</code>.
     */
    public final TableField<MachineryFuelTypesToSectorsRecord, Integer> SECTOR_ID = createField(DSL.name("sector_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private MachineryFuelTypesToSectors(Name alias, Table<MachineryFuelTypesToSectorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MachineryFuelTypesToSectors(Name alias, Table<MachineryFuelTypesToSectorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Hiermee wordt expliciet een koppeling gemaakt tussen sectoren en brandstof-types.\r\nDit wordt gebruikt om het algemene werktuigtype 'Anders' samen te stellen door middel van de machinery_fuel_types_view.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/machinery_types.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>template.machinery_fuel_types_to_sectors</code>
     * table reference
     */
    public MachineryFuelTypesToSectors(String alias) {
        this(DSL.name(alias), MACHINERY_FUEL_TYPES_TO_SECTORS);
    }

    /**
     * Create an aliased <code>template.machinery_fuel_types_to_sectors</code>
     * table reference
     */
    public MachineryFuelTypesToSectors(Name alias) {
        this(alias, MACHINERY_FUEL_TYPES_TO_SECTORS);
    }

    /**
     * Create a <code>template.machinery_fuel_types_to_sectors</code> table
     * reference
     */
    public MachineryFuelTypesToSectors() {
        this(DSL.name("machinery_fuel_types_to_sectors"), null);
    }

    public <O extends Record> MachineryFuelTypesToSectors(Table<O> child, ForeignKey<O, MachineryFuelTypesToSectorsRecord> key) {
        super(child, key, MACHINERY_FUEL_TYPES_TO_SECTORS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<MachineryFuelTypesToSectorsRecord> getPrimaryKey() {
        return Keys.MACHINERY_FUEL_TYPES_TO_SECTORS_PKEY;
    }

    @Override
    public List<ForeignKey<MachineryFuelTypesToSectorsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MACHINERY_FUEL_TYPES_TO_SECTORS__MACHINERY_FUEL_TYPES_TO_SECTORS_FKEY_MACHINERY_FUEL_TYPES, Keys.MACHINERY_FUEL_TYPES_TO_SECTORS__MACHINERY_FUEL_TYPES_TO_SECTORS_FKEY_SECTORS);
    }

    private transient MachineryFuelTypes _machineryFuelTypes;
    private transient Sectors _sectors;

    /**
     * Get the implicit join path to the
     * <code>template.machinery_fuel_types</code> table.
     */
    public MachineryFuelTypes machineryFuelTypes() {
        if (_machineryFuelTypes == null)
            _machineryFuelTypes = new MachineryFuelTypes(this, Keys.MACHINERY_FUEL_TYPES_TO_SECTORS__MACHINERY_FUEL_TYPES_TO_SECTORS_FKEY_MACHINERY_FUEL_TYPES);

        return _machineryFuelTypes;
    }

    /**
     * Get the implicit join path to the <code>template.sectors</code> table.
     */
    public Sectors sectors() {
        if (_sectors == null)
            _sectors = new Sectors(this, Keys.MACHINERY_FUEL_TYPES_TO_SECTORS__MACHINERY_FUEL_TYPES_TO_SECTORS_FKEY_SECTORS);

        return _sectors;
    }

    @Override
    public MachineryFuelTypesToSectors as(String alias) {
        return new MachineryFuelTypesToSectors(DSL.name(alias), this);
    }

    @Override
    public MachineryFuelTypesToSectors as(Name alias) {
        return new MachineryFuelTypesToSectors(alias, this);
    }

    @Override
    public MachineryFuelTypesToSectors as(Table<?> alias) {
        return new MachineryFuelTypesToSectors(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MachineryFuelTypesToSectors rename(String name) {
        return new MachineryFuelTypesToSectors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MachineryFuelTypesToSectors rename(Name name) {
        return new MachineryFuelTypesToSectors(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MachineryFuelTypesToSectors rename(Table<?> name) {
        return new MachineryFuelTypesToSectors(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
