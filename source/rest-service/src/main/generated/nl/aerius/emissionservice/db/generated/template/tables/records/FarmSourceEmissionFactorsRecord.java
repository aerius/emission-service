/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables.records;


import nl.aerius.emissionservice.db.generated.template.tables.FarmSourceEmissionFactors;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Table containing the emission factors for farm source categories.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/farms.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FarmSourceEmissionFactorsRecord extends UpdatableRecordImpl<FarmSourceEmissionFactorsRecord> implements Record3<Integer, Integer, Float> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>template.farm_source_emission_factors.farm_source_category_id</code>.
     */
    public void setFarmSourceCategoryId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>template.farm_source_emission_factors.farm_source_category_id</code>.
     */
    public Integer getFarmSourceCategoryId() {
        return (Integer) get(0);
    }

    /**
     * Setter for
     * <code>template.farm_source_emission_factors.substance_id</code>.
     */
    public void setSubstanceId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>template.farm_source_emission_factors.substance_id</code>.
     */
    public Integer getSubstanceId() {
        return (Integer) get(1);
    }

    /**
     * Setter for
     * <code>template.farm_source_emission_factors.emission_factor</code>.
     */
    public void setEmissionFactor(Float value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>template.farm_source_emission_factors.emission_factor</code>.
     */
    public Float getEmissionFactor() {
        return (Float) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Float> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, Float> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return FarmSourceEmissionFactors.FARM_SOURCE_EMISSION_FACTORS.FARM_SOURCE_CATEGORY_ID;
    }

    @Override
    public Field<Integer> field2() {
        return FarmSourceEmissionFactors.FARM_SOURCE_EMISSION_FACTORS.SUBSTANCE_ID;
    }

    @Override
    public Field<Float> field3() {
        return FarmSourceEmissionFactors.FARM_SOURCE_EMISSION_FACTORS.EMISSION_FACTOR;
    }

    @Override
    public Integer component1() {
        return getFarmSourceCategoryId();
    }

    @Override
    public Integer component2() {
        return getSubstanceId();
    }

    @Override
    public Float component3() {
        return getEmissionFactor();
    }

    @Override
    public Integer value1() {
        return getFarmSourceCategoryId();
    }

    @Override
    public Integer value2() {
        return getSubstanceId();
    }

    @Override
    public Float value3() {
        return getEmissionFactor();
    }

    @Override
    public FarmSourceEmissionFactorsRecord value1(Integer value) {
        setFarmSourceCategoryId(value);
        return this;
    }

    @Override
    public FarmSourceEmissionFactorsRecord value2(Integer value) {
        setSubstanceId(value);
        return this;
    }

    @Override
    public FarmSourceEmissionFactorsRecord value3(Float value) {
        setEmissionFactor(value);
        return this;
    }

    @Override
    public FarmSourceEmissionFactorsRecord values(Integer value1, Integer value2, Float value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FarmSourceEmissionFactorsRecord
     */
    public FarmSourceEmissionFactorsRecord() {
        super(FarmSourceEmissionFactors.FARM_SOURCE_EMISSION_FACTORS);
    }

    /**
     * Create a detached, initialised FarmSourceEmissionFactorsRecord
     */
    public FarmSourceEmissionFactorsRecord(Integer farmSourceCategoryId, Integer substanceId, Float emissionFactor) {
        super(FarmSourceEmissionFactors.FARM_SOURCE_EMISSION_FACTORS);

        setFarmSourceCategoryId(farmSourceCategoryId);
        setSubstanceId(substanceId);
        setEmissionFactor(emissionFactor);
    }
}
