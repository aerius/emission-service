/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.public_.enums.SpeedLimitEnforcementType;
import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.RoadSpeedProfilesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table containing the different speed profiles.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/roads.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoadSpeedProfiles extends TableImpl<RoadSpeedProfilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>template.road_speed_profiles</code>
     */
    public static final RoadSpeedProfiles ROAD_SPEED_PROFILES = new RoadSpeedProfiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoadSpeedProfilesRecord> getRecordType() {
        return RoadSpeedProfilesRecord.class;
    }

    /**
     * The column
     * <code>template.road_speed_profiles.road_speed_profile_id</code>.
     */
    public final TableField<RoadSpeedProfilesRecord, Integer> ROAD_SPEED_PROFILE_ID = createField(DSL.name("road_speed_profile_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>template.road_speed_profiles.speed_limit_enforcement</code>.
     */
    public final TableField<RoadSpeedProfilesRecord, SpeedLimitEnforcementType> SPEED_LIMIT_ENFORCEMENT = createField(DSL.name("speed_limit_enforcement"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(nl.aerius.emissionservice.db.generated.public_.enums.SpeedLimitEnforcementType.class), this, "");

    /**
     * The column <code>template.road_speed_profiles.maximum_speed</code>.
     */
    public final TableField<RoadSpeedProfilesRecord, Integer> MAXIMUM_SPEED = createField(DSL.name("maximum_speed"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>template.road_speed_profiles.gradient</code>.
     */
    public final TableField<RoadSpeedProfilesRecord, Integer> GRADIENT = createField(DSL.name("gradient"), SQLDataType.INTEGER, this, "");

    private RoadSpeedProfiles(Name alias, Table<RoadSpeedProfilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoadSpeedProfiles(Name alias, Table<RoadSpeedProfilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table containing the different speed profiles.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/roads.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>template.road_speed_profiles</code> table
     * reference
     */
    public RoadSpeedProfiles(String alias) {
        this(DSL.name(alias), ROAD_SPEED_PROFILES);
    }

    /**
     * Create an aliased <code>template.road_speed_profiles</code> table
     * reference
     */
    public RoadSpeedProfiles(Name alias) {
        this(alias, ROAD_SPEED_PROFILES);
    }

    /**
     * Create a <code>template.road_speed_profiles</code> table reference
     */
    public RoadSpeedProfiles() {
        this(DSL.name("road_speed_profiles"), null);
    }

    public <O extends Record> RoadSpeedProfiles(Table<O> child, ForeignKey<O, RoadSpeedProfilesRecord> key) {
        super(child, key, ROAD_SPEED_PROFILES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<RoadSpeedProfilesRecord> getPrimaryKey() {
        return Keys.ROAD_SPEED_PROFILES_PKEY;
    }

    @Override
    public RoadSpeedProfiles as(String alias) {
        return new RoadSpeedProfiles(DSL.name(alias), this);
    }

    @Override
    public RoadSpeedProfiles as(Name alias) {
        return new RoadSpeedProfiles(alias, this);
    }

    @Override
    public RoadSpeedProfiles as(Table<?> alias) {
        return new RoadSpeedProfiles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadSpeedProfiles rename(String name) {
        return new RoadSpeedProfiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadSpeedProfiles rename(Name name) {
        return new RoadSpeedProfiles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadSpeedProfiles rename(Table<?> name) {
        return new RoadSpeedProfiles(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, SpeedLimitEnforcementType, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super SpeedLimitEnforcementType, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super SpeedLimitEnforcementType, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
