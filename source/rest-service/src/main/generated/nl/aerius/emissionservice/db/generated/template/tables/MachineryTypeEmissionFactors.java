/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.public_.tables.Substances;
import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.MachineryTypeEmissionFactorsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * De emissiefactoren per werktuig, brandstof en emissiestof.
 * Emissie factor is hier in g/kWh.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/machinery_types.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MachineryTypeEmissionFactors extends TableImpl<MachineryTypeEmissionFactorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.machinery_type_emission_factors</code>
     */
    public static final MachineryTypeEmissionFactors MACHINERY_TYPE_EMISSION_FACTORS = new MachineryTypeEmissionFactors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MachineryTypeEmissionFactorsRecord> getRecordType() {
        return MachineryTypeEmissionFactorsRecord.class;
    }

    /**
     * The column
     * <code>template.machinery_type_emission_factors.machinery_type_id</code>.
     */
    public final TableField<MachineryTypeEmissionFactorsRecord, Integer> MACHINERY_TYPE_ID = createField(DSL.name("machinery_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>template.machinery_type_emission_factors.machinery_fuel_type_id</code>.
     */
    public final TableField<MachineryTypeEmissionFactorsRecord, Integer> MACHINERY_FUEL_TYPE_ID = createField(DSL.name("machinery_fuel_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>template.machinery_type_emission_factors.substance_id</code>.
     */
    public final TableField<MachineryTypeEmissionFactorsRecord, Integer> SUBSTANCE_ID = createField(DSL.name("substance_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>template.machinery_type_emission_factors.emission_factor</code>.
     */
    public final TableField<MachineryTypeEmissionFactorsRecord, Float> EMISSION_FACTOR = createField(DSL.name("emission_factor"), nl.aerius.emissionservice.db.generated.public_.Domains.POSREAL.getDataType().nullable(false), this, "");

    private MachineryTypeEmissionFactors(Name alias, Table<MachineryTypeEmissionFactorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MachineryTypeEmissionFactors(Name alias, Table<MachineryTypeEmissionFactorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("De emissiefactoren per werktuig, brandstof en emissiestof.\r\nEmissie factor is hier in g/kWh.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/machinery_types.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>template.machinery_type_emission_factors</code>
     * table reference
     */
    public MachineryTypeEmissionFactors(String alias) {
        this(DSL.name(alias), MACHINERY_TYPE_EMISSION_FACTORS);
    }

    /**
     * Create an aliased <code>template.machinery_type_emission_factors</code>
     * table reference
     */
    public MachineryTypeEmissionFactors(Name alias) {
        this(alias, MACHINERY_TYPE_EMISSION_FACTORS);
    }

    /**
     * Create a <code>template.machinery_type_emission_factors</code> table
     * reference
     */
    public MachineryTypeEmissionFactors() {
        this(DSL.name("machinery_type_emission_factors"), null);
    }

    public <O extends Record> MachineryTypeEmissionFactors(Table<O> child, ForeignKey<O, MachineryTypeEmissionFactorsRecord> key) {
        super(child, key, MACHINERY_TYPE_EMISSION_FACTORS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<MachineryTypeEmissionFactorsRecord> getPrimaryKey() {
        return Keys.MACHINERY_TYPE_EMISSION_FACTORS_PKEY;
    }

    @Override
    public List<ForeignKey<MachineryTypeEmissionFactorsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MACHINERY_TYPE_EMISSION_FACTORS__MACHINERY_TYPE_EMISSION_FACTORS_FKEY_MACHINERY_TYPES, Keys.MACHINERY_TYPE_EMISSION_FACTORS__MACHINERY_TYPE_EMISSION_FACTORS_FKEY_SUBSTANCES);
    }

    private transient MachineryTypeFuelOptions _machineryTypeFuelOptions;
    private transient Substances _substances;

    /**
     * Get the implicit join path to the
     * <code>template.machinery_type_fuel_options</code> table.
     */
    public MachineryTypeFuelOptions machineryTypeFuelOptions() {
        if (_machineryTypeFuelOptions == null)
            _machineryTypeFuelOptions = new MachineryTypeFuelOptions(this, Keys.MACHINERY_TYPE_EMISSION_FACTORS__MACHINERY_TYPE_EMISSION_FACTORS_FKEY_MACHINERY_TYPES);

        return _machineryTypeFuelOptions;
    }

    /**
     * Get the implicit join path to the <code>public.substances</code> table.
     */
    public Substances substances() {
        if (_substances == null)
            _substances = new Substances(this, Keys.MACHINERY_TYPE_EMISSION_FACTORS__MACHINERY_TYPE_EMISSION_FACTORS_FKEY_SUBSTANCES);

        return _substances;
    }

    @Override
    public MachineryTypeEmissionFactors as(String alias) {
        return new MachineryTypeEmissionFactors(DSL.name(alias), this);
    }

    @Override
    public MachineryTypeEmissionFactors as(Name alias) {
        return new MachineryTypeEmissionFactors(alias, this);
    }

    @Override
    public MachineryTypeEmissionFactors as(Table<?> alias) {
        return new MachineryTypeEmissionFactors(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MachineryTypeEmissionFactors rename(String name) {
        return new MachineryTypeEmissionFactors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MachineryTypeEmissionFactors rename(Name name) {
        return new MachineryTypeEmissionFactors(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MachineryTypeEmissionFactors rename(Table<?> name) {
        return new MachineryTypeEmissionFactors(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, Float> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super Float, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super Float, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
