/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.FarmlandCategoriesViewRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * View returning the farmland categories.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/04-views/farmlands.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FarmlandCategoriesView extends TableImpl<FarmlandCategoriesViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>template.farmland_categories_view</code>
     */
    public static final FarmlandCategoriesView FARMLAND_CATEGORIES_VIEW = new FarmlandCategoriesView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FarmlandCategoriesViewRecord> getRecordType() {
        return FarmlandCategoriesViewRecord.class;
    }

    /**
     * The column
     * <code>template.farmland_categories_view.farmland_category_id</code>.
     */
    public final TableField<FarmlandCategoriesViewRecord, Short> FARMLAND_CATEGORY_ID = createField(DSL.name("farmland_category_id"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>template.farmland_categories_view.code</code>.
     */
    public final TableField<FarmlandCategoriesViewRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>template.farmland_categories_view.name</code>.
     */
    public final TableField<FarmlandCategoriesViewRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>template.farmland_categories_view.sector_id</code>.
     */
    public final TableField<FarmlandCategoriesViewRecord, Integer> SECTOR_ID = createField(DSL.name("sector_id"), SQLDataType.INTEGER, this, "");

    private FarmlandCategoriesView(Name alias, Table<FarmlandCategoriesViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private FarmlandCategoriesView(Name alias, Table<FarmlandCategoriesViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("View returning the farmland categories.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/04-views/farmlands.sql"), TableOptions.view("""
        create view "farmland_categories_view" as  SELECT farmland_categories.farmland_category_id,
         farmland_categories.code,
         farmland_categories.name,
         farmland_categories.sector_id
        FROM template.farmland_categories;
        """));
    }

    /**
     * Create an aliased <code>template.farmland_categories_view</code> table
     * reference
     */
    public FarmlandCategoriesView(String alias) {
        this(DSL.name(alias), FARMLAND_CATEGORIES_VIEW);
    }

    /**
     * Create an aliased <code>template.farmland_categories_view</code> table
     * reference
     */
    public FarmlandCategoriesView(Name alias) {
        this(alias, FARMLAND_CATEGORIES_VIEW);
    }

    /**
     * Create a <code>template.farmland_categories_view</code> table reference
     */
    public FarmlandCategoriesView() {
        this(DSL.name("farmland_categories_view"), null);
    }

    public <O extends Record> FarmlandCategoriesView(Table<O> child, ForeignKey<O, FarmlandCategoriesViewRecord> key) {
        super(child, key, FARMLAND_CATEGORIES_VIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public FarmlandCategoriesView as(String alias) {
        return new FarmlandCategoriesView(DSL.name(alias), this);
    }

    @Override
    public FarmlandCategoriesView as(Name alias) {
        return new FarmlandCategoriesView(alias, this);
    }

    @Override
    public FarmlandCategoriesView as(Table<?> alias) {
        return new FarmlandCategoriesView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmlandCategoriesView rename(String name) {
        return new FarmlandCategoriesView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmlandCategoriesView rename(Name name) {
        return new FarmlandCategoriesView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmlandCategoriesView rename(Table<?> name) {
        return new FarmlandCategoriesView(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Short, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Short, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Short, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
