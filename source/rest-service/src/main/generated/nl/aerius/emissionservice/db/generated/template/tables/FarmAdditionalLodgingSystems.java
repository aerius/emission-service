/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.FarmAdditionalLodgingSystemsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Additionele staltechnieken. Dit zijn staltechnieken die zorgen voor extra
 * emissies en die gestapeld kunnen worden op een stalsysteem
 * (farm_lodging_type).
 * Deze additionele staltechnieken zijn afgeleid uit de RAV-code lijst.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/farms.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FarmAdditionalLodgingSystems extends TableImpl<FarmAdditionalLodgingSystemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.farm_additional_lodging_systems</code>
     */
    public static final FarmAdditionalLodgingSystems FARM_ADDITIONAL_LODGING_SYSTEMS = new FarmAdditionalLodgingSystems();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FarmAdditionalLodgingSystemsRecord> getRecordType() {
        return FarmAdditionalLodgingSystemsRecord.class;
    }

    /**
     * The column
     * <code>template.farm_additional_lodging_systems.farm_additional_lodging_system_id</code>.
     */
    public final TableField<FarmAdditionalLodgingSystemsRecord, Integer> FARM_ADDITIONAL_LODGING_SYSTEM_ID = createField(DSL.name("farm_additional_lodging_system_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>template.farm_additional_lodging_systems.farm_animal_category_id</code>.
     */
    public final TableField<FarmAdditionalLodgingSystemsRecord, Integer> FARM_ANIMAL_CATEGORY_ID = createField(DSL.name("farm_animal_category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>template.farm_additional_lodging_systems.code</code>.
     */
    public final TableField<FarmAdditionalLodgingSystemsRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>template.farm_additional_lodging_systems.name</code>.
     */
    public final TableField<FarmAdditionalLodgingSystemsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>template.farm_additional_lodging_systems.description</code>.
     */
    public final TableField<FarmAdditionalLodgingSystemsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>template.farm_additional_lodging_systems.scrubber</code>.
     */
    public final TableField<FarmAdditionalLodgingSystemsRecord, Boolean> SCRUBBER = createField(DSL.name("scrubber"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private FarmAdditionalLodgingSystems(Name alias, Table<FarmAdditionalLodgingSystemsRecord> aliased) {
        this(alias, aliased, null);
    }

    private FarmAdditionalLodgingSystems(Name alias, Table<FarmAdditionalLodgingSystemsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Additionele staltechnieken. Dit zijn staltechnieken die zorgen voor extra emissies en die gestapeld kunnen worden op een stalsysteem (farm_lodging_type).\r\nDeze additionele staltechnieken zijn afgeleid uit de RAV-code lijst.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/farms.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>template.farm_additional_lodging_systems</code>
     * table reference
     */
    public FarmAdditionalLodgingSystems(String alias) {
        this(DSL.name(alias), FARM_ADDITIONAL_LODGING_SYSTEMS);
    }

    /**
     * Create an aliased <code>template.farm_additional_lodging_systems</code>
     * table reference
     */
    public FarmAdditionalLodgingSystems(Name alias) {
        this(alias, FARM_ADDITIONAL_LODGING_SYSTEMS);
    }

    /**
     * Create a <code>template.farm_additional_lodging_systems</code> table
     * reference
     */
    public FarmAdditionalLodgingSystems() {
        this(DSL.name("farm_additional_lodging_systems"), null);
    }

    public <O extends Record> FarmAdditionalLodgingSystems(Table<O> child, ForeignKey<O, FarmAdditionalLodgingSystemsRecord> key) {
        super(child, key, FARM_ADDITIONAL_LODGING_SYSTEMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<FarmAdditionalLodgingSystemsRecord> getPrimaryKey() {
        return Keys.FARM_ADDITIONAL_LODGING_SYSTEMS_PKEY;
    }

    @Override
    public List<UniqueKey<FarmAdditionalLodgingSystemsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.FARM_ADDITIONAL_LODGING_SYSTEMS_CODE_KEY, Keys.FARM_ADDITIONAL_LODGING_SYSTEMS_NAME_KEY);
    }

    @Override
    public List<ForeignKey<FarmAdditionalLodgingSystemsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FARM_ADDITIONAL_LODGING_SYSTEMS__FARM_ADDITIONAL_LODGING_SYSTEMS_FKEY_FARM_ANIMAL_CATEGORIES);
    }

    private transient FarmAnimalCategories _farmAnimalCategories;

    /**
     * Get the implicit join path to the
     * <code>template.farm_animal_categories</code> table.
     */
    public FarmAnimalCategories farmAnimalCategories() {
        if (_farmAnimalCategories == null)
            _farmAnimalCategories = new FarmAnimalCategories(this, Keys.FARM_ADDITIONAL_LODGING_SYSTEMS__FARM_ADDITIONAL_LODGING_SYSTEMS_FKEY_FARM_ANIMAL_CATEGORIES);

        return _farmAnimalCategories;
    }

    @Override
    public FarmAdditionalLodgingSystems as(String alias) {
        return new FarmAdditionalLodgingSystems(DSL.name(alias), this);
    }

    @Override
    public FarmAdditionalLodgingSystems as(Name alias) {
        return new FarmAdditionalLodgingSystems(alias, this);
    }

    @Override
    public FarmAdditionalLodgingSystems as(Table<?> alias) {
        return new FarmAdditionalLodgingSystems(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmAdditionalLodgingSystems rename(String name) {
        return new FarmAdditionalLodgingSystems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmAdditionalLodgingSystems rename(Name name) {
        return new FarmAdditionalLodgingSystems(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmAdditionalLodgingSystems rename(Table<?> name) {
        return new FarmAdditionalLodgingSystems(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, String, String, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
