/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables.records;


import nl.aerius.emissionservice.db.generated.template.tables.RoadCategoryEmissionFactors;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Table containing the emission factors for road categories for different
 * substances.
 * For NL: the emission factors are in g/vehicle/km
 * For UK: the emission factors are in g/km/s for vehicles per 24 hours.
 * 
 * NOTE: The years present in this table are not by definition the same as the
 * AERIUS policy/calculation years.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/roads.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoadCategoryEmissionFactorsRecord extends UpdatableRecordImpl<RoadCategoryEmissionFactorsRecord> implements Record5<Integer, Short, Short, Double, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>template.road_category_emission_factors.road_category_id</code>.
     */
    public void setRoadCategoryId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>template.road_category_emission_factors.road_category_id</code>.
     */
    public Integer getRoadCategoryId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>template.road_category_emission_factors.year</code>.
     */
    public void setYear(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>template.road_category_emission_factors.year</code>.
     */
    public Short getYear() {
        return (Short) get(1);
    }

    /**
     * Setter for
     * <code>template.road_category_emission_factors.substance_id</code>.
     */
    public void setSubstanceId(Short value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>template.road_category_emission_factors.substance_id</code>.
     */
    public Short getSubstanceId() {
        return (Short) get(2);
    }

    /**
     * Setter for
     * <code>template.road_category_emission_factors.emission_factor</code>.
     */
    public void setEmissionFactor(Double value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>template.road_category_emission_factors.emission_factor</code>.
     */
    public Double getEmissionFactor() {
        return (Double) get(3);
    }

    /**
     * Setter for
     * <code>template.road_category_emission_factors.stagnated_emission_factor</code>.
     */
    public void setStagnatedEmissionFactor(Double value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>template.road_category_emission_factors.stagnated_emission_factor</code>.
     */
    public Double getStagnatedEmissionFactor() {
        return (Double) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<Integer, Short, Short> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Short, Short, Double, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, Short, Short, Double, Double> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return RoadCategoryEmissionFactors.ROAD_CATEGORY_EMISSION_FACTORS.ROAD_CATEGORY_ID;
    }

    @Override
    public Field<Short> field2() {
        return RoadCategoryEmissionFactors.ROAD_CATEGORY_EMISSION_FACTORS.YEAR;
    }

    @Override
    public Field<Short> field3() {
        return RoadCategoryEmissionFactors.ROAD_CATEGORY_EMISSION_FACTORS.SUBSTANCE_ID;
    }

    @Override
    public Field<Double> field4() {
        return RoadCategoryEmissionFactors.ROAD_CATEGORY_EMISSION_FACTORS.EMISSION_FACTOR;
    }

    @Override
    public Field<Double> field5() {
        return RoadCategoryEmissionFactors.ROAD_CATEGORY_EMISSION_FACTORS.STAGNATED_EMISSION_FACTOR;
    }

    @Override
    public Integer component1() {
        return getRoadCategoryId();
    }

    @Override
    public Short component2() {
        return getYear();
    }

    @Override
    public Short component3() {
        return getSubstanceId();
    }

    @Override
    public Double component4() {
        return getEmissionFactor();
    }

    @Override
    public Double component5() {
        return getStagnatedEmissionFactor();
    }

    @Override
    public Integer value1() {
        return getRoadCategoryId();
    }

    @Override
    public Short value2() {
        return getYear();
    }

    @Override
    public Short value3() {
        return getSubstanceId();
    }

    @Override
    public Double value4() {
        return getEmissionFactor();
    }

    @Override
    public Double value5() {
        return getStagnatedEmissionFactor();
    }

    @Override
    public RoadCategoryEmissionFactorsRecord value1(Integer value) {
        setRoadCategoryId(value);
        return this;
    }

    @Override
    public RoadCategoryEmissionFactorsRecord value2(Short value) {
        setYear(value);
        return this;
    }

    @Override
    public RoadCategoryEmissionFactorsRecord value3(Short value) {
        setSubstanceId(value);
        return this;
    }

    @Override
    public RoadCategoryEmissionFactorsRecord value4(Double value) {
        setEmissionFactor(value);
        return this;
    }

    @Override
    public RoadCategoryEmissionFactorsRecord value5(Double value) {
        setStagnatedEmissionFactor(value);
        return this;
    }

    @Override
    public RoadCategoryEmissionFactorsRecord values(Integer value1, Short value2, Short value3, Double value4, Double value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RoadCategoryEmissionFactorsRecord
     */
    public RoadCategoryEmissionFactorsRecord() {
        super(RoadCategoryEmissionFactors.ROAD_CATEGORY_EMISSION_FACTORS);
    }

    /**
     * Create a detached, initialised RoadCategoryEmissionFactorsRecord
     */
    public RoadCategoryEmissionFactorsRecord(Integer roadCategoryId, Short year, Short substanceId, Double emissionFactor, Double stagnatedEmissionFactor) {
        super(RoadCategoryEmissionFactors.ROAD_CATEGORY_EMISSION_FACTORS);

        setRoadCategoryId(roadCategoryId);
        setYear(year);
        setSubstanceId(substanceId);
        setEmissionFactor(emissionFactor);
        setStagnatedEmissionFactor(stagnatedEmissionFactor);
    }
}
