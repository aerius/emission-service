/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.public_;


import org.jooq.Domain;
import org.jooq.Schema;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.LazySchema;
import org.jooq.impl.SQLDataType;


/**
 * Convenience access to all Domains in public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Domains {

    /**
     * The domain <code>public.fraction</code>.
     */
    public static final Domain<Float> FRACTION = Internal.createDomain(
          schema()
        , DSL.name("fraction")
        , SQLDataType.REAL
        , Internal.createCheck(null, null, "CHECK (((VALUE >= (0)::real) AND (VALUE <= (1)::real)))")
    );

    /**
     * The domain <code>public.posint</code>.
     */
    public static final Domain<Integer> POSINT = Internal.createDomain(
          schema()
        , DSL.name("posint")
        , SQLDataType.INTEGER
        , Internal.createCheck(null, null, "CHECK ((VALUE >= 0))")
    );

    /**
     * The domain <code>public.posreal</code>.
     */
    public static final Domain<Float> POSREAL = Internal.createDomain(
          schema()
        , DSL.name("posreal")
        , SQLDataType.REAL
        , Internal.createCheck(null, null, "CHECK ((VALUE >= (0)::real))")
    );

    /**
     * The domain <code>public.year_type</code>.
     */
    public static final Domain<Short> YEAR_TYPE = Internal.createDomain(
          schema()
        , DSL.name("year_type")
        , SQLDataType.SMALLINT
        , Internal.createCheck(null, null, "CHECK (((VALUE >= (2000)::smallint) AND (VALUE <= (2050)::smallint)))")
    );

    private static final Schema schema() {
        return new LazySchema(DSL.name("public"), DSL.comment(""), () -> Public.PUBLIC);
    }
}
