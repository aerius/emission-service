/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.ShippingInlandWaterwayCategoriesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table containing all waterway categories in the inland shipping network.
 * @column flowing For some types the current or flow of the waterway is of
 * importance, this is indicated by the flowing boolean.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/shipping_inland.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShippingInlandWaterwayCategories extends TableImpl<ShippingInlandWaterwayCategoriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.shipping_inland_waterway_categories</code>
     */
    public static final ShippingInlandWaterwayCategories SHIPPING_INLAND_WATERWAY_CATEGORIES = new ShippingInlandWaterwayCategories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShippingInlandWaterwayCategoriesRecord> getRecordType() {
        return ShippingInlandWaterwayCategoriesRecord.class;
    }

    /**
     * The column
     * <code>template.shipping_inland_waterway_categories.shipping_inland_waterway_category_id</code>.
     */
    public final TableField<ShippingInlandWaterwayCategoriesRecord, Integer> SHIPPING_INLAND_WATERWAY_CATEGORY_ID = createField(DSL.name("shipping_inland_waterway_category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>template.shipping_inland_waterway_categories.code</code>.
     */
    public final TableField<ShippingInlandWaterwayCategoriesRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>template.shipping_inland_waterway_categories.name</code>.
     */
    public final TableField<ShippingInlandWaterwayCategoriesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>template.shipping_inland_waterway_categories.description</code>.
     */
    public final TableField<ShippingInlandWaterwayCategoriesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>template.shipping_inland_waterway_categories.flowing</code>.
     */
    public final TableField<ShippingInlandWaterwayCategoriesRecord, Boolean> FLOWING = createField(DSL.name("flowing"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private ShippingInlandWaterwayCategories(Name alias, Table<ShippingInlandWaterwayCategoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShippingInlandWaterwayCategories(Name alias, Table<ShippingInlandWaterwayCategoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table containing all waterway categories in the inland shipping network.\r\n@column flowing For some types the current or flow of the waterway is of importance, this is indicated by the flowing boolean.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/shipping_inland.sql"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>template.shipping_inland_waterway_categories</code> table reference
     */
    public ShippingInlandWaterwayCategories(String alias) {
        this(DSL.name(alias), SHIPPING_INLAND_WATERWAY_CATEGORIES);
    }

    /**
     * Create an aliased
     * <code>template.shipping_inland_waterway_categories</code> table reference
     */
    public ShippingInlandWaterwayCategories(Name alias) {
        this(alias, SHIPPING_INLAND_WATERWAY_CATEGORIES);
    }

    /**
     * Create a <code>template.shipping_inland_waterway_categories</code> table
     * reference
     */
    public ShippingInlandWaterwayCategories() {
        this(DSL.name("shipping_inland_waterway_categories"), null);
    }

    public <O extends Record> ShippingInlandWaterwayCategories(Table<O> child, ForeignKey<O, ShippingInlandWaterwayCategoriesRecord> key) {
        super(child, key, SHIPPING_INLAND_WATERWAY_CATEGORIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<ShippingInlandWaterwayCategoriesRecord> getPrimaryKey() {
        return Keys.SHIPPING_INLAND_WATERWAY_CATEGORIES_PKEY;
    }

    @Override
    public List<UniqueKey<ShippingInlandWaterwayCategoriesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SHIPPING_INLAND_WATERWAY_CATEGORIES_CODE_KEY, Keys.SHIPPING_INLAND_WATERWAY_CATEGORIES_NAME_KEY);
    }

    @Override
    public ShippingInlandWaterwayCategories as(String alias) {
        return new ShippingInlandWaterwayCategories(DSL.name(alias), this);
    }

    @Override
    public ShippingInlandWaterwayCategories as(Name alias) {
        return new ShippingInlandWaterwayCategories(alias, this);
    }

    @Override
    public ShippingInlandWaterwayCategories as(Table<?> alias) {
        return new ShippingInlandWaterwayCategories(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingInlandWaterwayCategories rename(String name) {
        return new ShippingInlandWaterwayCategories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingInlandWaterwayCategories rename(Name name) {
        return new ShippingInlandWaterwayCategories(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingInlandWaterwayCategories rename(Table<?> name) {
        return new ShippingInlandWaterwayCategories(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
