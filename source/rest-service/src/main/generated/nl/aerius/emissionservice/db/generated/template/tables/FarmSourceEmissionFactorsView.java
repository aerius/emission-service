/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.public_.enums.FarmEmissionFactorType;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.FarmSourceEmissionFactorsViewRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * View returning the properties of farm sources, including emission factors.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/04-views/farms.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FarmSourceEmissionFactorsView extends TableImpl<FarmSourceEmissionFactorsViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.farm_source_emission_factors_view</code>
     */
    public static final FarmSourceEmissionFactorsView FARM_SOURCE_EMISSION_FACTORS_VIEW = new FarmSourceEmissionFactorsView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FarmSourceEmissionFactorsViewRecord> getRecordType() {
        return FarmSourceEmissionFactorsViewRecord.class;
    }

    /**
     * The column
     * <code>template.farm_source_emission_factors_view.farm_source_category_id</code>.
     */
    public final TableField<FarmSourceEmissionFactorsViewRecord, Integer> FARM_SOURCE_CATEGORY_ID = createField(DSL.name("farm_source_category_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>template.farm_source_emission_factors_view.sector_id</code>.
     */
    public final TableField<FarmSourceEmissionFactorsViewRecord, Integer> SECTOR_ID = createField(DSL.name("sector_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>template.farm_source_emission_factors_view.code</code>.
     */
    public final TableField<FarmSourceEmissionFactorsViewRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>template.farm_source_emission_factors_view.farm_animal_category_id</code>.
     */
    public final TableField<FarmSourceEmissionFactorsViewRecord, Integer> FARM_ANIMAL_CATEGORY_ID = createField(DSL.name("farm_animal_category_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>template.farm_source_emission_factors_view.name</code>.
     */
    public final TableField<FarmSourceEmissionFactorsViewRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>template.farm_source_emission_factors_view.description</code>.
     */
    public final TableField<FarmSourceEmissionFactorsViewRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>template.farm_source_emission_factors_view.farm_emission_factor_type</code>.
     */
    public final TableField<FarmSourceEmissionFactorsViewRecord, FarmEmissionFactorType> FARM_EMISSION_FACTOR_TYPE = createField(DSL.name("farm_emission_factor_type"), SQLDataType.VARCHAR.asEnumDataType(nl.aerius.emissionservice.db.generated.public_.enums.FarmEmissionFactorType.class), this, "");

    /**
     * The column
     * <code>template.farm_source_emission_factors_view.substance_id</code>.
     */
    public final TableField<FarmSourceEmissionFactorsViewRecord, Integer> SUBSTANCE_ID = createField(DSL.name("substance_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>template.farm_source_emission_factors_view.emission_factor</code>.
     */
    public final TableField<FarmSourceEmissionFactorsViewRecord, Float> EMISSION_FACTOR = createField(DSL.name("emission_factor"), SQLDataType.REAL, this, "");

    private FarmSourceEmissionFactorsView(Name alias, Table<FarmSourceEmissionFactorsViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private FarmSourceEmissionFactorsView(Name alias, Table<FarmSourceEmissionFactorsViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("View returning the properties of farm sources, including emission factors.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/04-views/farms.sql"), TableOptions.view("""
        create view "farm_source_emission_factors_view" as  SELECT farm_source_categories.farm_source_category_id,
         farm_source_categories.sector_id,
         farm_source_categories.code,
         farm_source_categories.farm_animal_category_id,
         farm_source_categories.name,
         farm_source_categories.description,
         farm_source_categories.farm_emission_factor_type,
         farm_source_emission_factors.substance_id,
         farm_source_emission_factors.emission_factor
        FROM (template.farm_source_categories
          JOIN template.farm_source_emission_factors USING (farm_source_category_id));
        """));
    }

    /**
     * Create an aliased <code>template.farm_source_emission_factors_view</code>
     * table reference
     */
    public FarmSourceEmissionFactorsView(String alias) {
        this(DSL.name(alias), FARM_SOURCE_EMISSION_FACTORS_VIEW);
    }

    /**
     * Create an aliased <code>template.farm_source_emission_factors_view</code>
     * table reference
     */
    public FarmSourceEmissionFactorsView(Name alias) {
        this(alias, FARM_SOURCE_EMISSION_FACTORS_VIEW);
    }

    /**
     * Create a <code>template.farm_source_emission_factors_view</code> table
     * reference
     */
    public FarmSourceEmissionFactorsView() {
        this(DSL.name("farm_source_emission_factors_view"), null);
    }

    public <O extends Record> FarmSourceEmissionFactorsView(Table<O> child, ForeignKey<O, FarmSourceEmissionFactorsViewRecord> key) {
        super(child, key, FARM_SOURCE_EMISSION_FACTORS_VIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public FarmSourceEmissionFactorsView as(String alias) {
        return new FarmSourceEmissionFactorsView(DSL.name(alias), this);
    }

    @Override
    public FarmSourceEmissionFactorsView as(Name alias) {
        return new FarmSourceEmissionFactorsView(alias, this);
    }

    @Override
    public FarmSourceEmissionFactorsView as(Table<?> alias) {
        return new FarmSourceEmissionFactorsView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmSourceEmissionFactorsView rename(String name) {
        return new FarmSourceEmissionFactorsView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmSourceEmissionFactorsView rename(Name name) {
        return new FarmSourceEmissionFactorsView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmSourceEmissionFactorsView rename(Table<?> name) {
        return new FarmSourceEmissionFactorsView(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, String, Integer, String, String, FarmEmissionFactorType, Integer, Float> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Integer, ? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? super FarmEmissionFactorType, ? super Integer, ? super Float, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Integer, ? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? super FarmEmissionFactorType, ? super Integer, ? super Float, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
