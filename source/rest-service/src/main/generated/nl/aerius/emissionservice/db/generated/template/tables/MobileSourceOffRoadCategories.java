/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.MobileSourceOffRoadCategoriesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table containing the off road mobile source categories (stageklassen).
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/mobile_sources.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MobileSourceOffRoadCategories extends TableImpl<MobileSourceOffRoadCategoriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.mobile_source_off_road_categories</code>
     */
    public static final MobileSourceOffRoadCategories MOBILE_SOURCE_OFF_ROAD_CATEGORIES = new MobileSourceOffRoadCategories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MobileSourceOffRoadCategoriesRecord> getRecordType() {
        return MobileSourceOffRoadCategoriesRecord.class;
    }

    /**
     * The column
     * <code>template.mobile_source_off_road_categories.mobile_source_off_road_category_id</code>.
     */
    public final TableField<MobileSourceOffRoadCategoriesRecord, Short> MOBILE_SOURCE_OFF_ROAD_CATEGORY_ID = createField(DSL.name("mobile_source_off_road_category_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>template.mobile_source_off_road_categories.code</code>.
     */
    public final TableField<MobileSourceOffRoadCategoriesRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>template.mobile_source_off_road_categories.name</code>.
     */
    public final TableField<MobileSourceOffRoadCategoriesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>template.mobile_source_off_road_categories.description</code>.
     */
    public final TableField<MobileSourceOffRoadCategoriesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>template.mobile_source_off_road_categories.sort_order</code>.
     */
    public final TableField<MobileSourceOffRoadCategoriesRecord, Integer> SORT_ORDER = createField(DSL.name("sort_order"), SQLDataType.INTEGER.nullable(false), this, "");

    private MobileSourceOffRoadCategories(Name alias, Table<MobileSourceOffRoadCategoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private MobileSourceOffRoadCategories(Name alias, Table<MobileSourceOffRoadCategoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table containing the off road mobile source categories (stageklassen).\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/mobile_sources.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>template.mobile_source_off_road_categories</code>
     * table reference
     */
    public MobileSourceOffRoadCategories(String alias) {
        this(DSL.name(alias), MOBILE_SOURCE_OFF_ROAD_CATEGORIES);
    }

    /**
     * Create an aliased <code>template.mobile_source_off_road_categories</code>
     * table reference
     */
    public MobileSourceOffRoadCategories(Name alias) {
        this(alias, MOBILE_SOURCE_OFF_ROAD_CATEGORIES);
    }

    /**
     * Create a <code>template.mobile_source_off_road_categories</code> table
     * reference
     */
    public MobileSourceOffRoadCategories() {
        this(DSL.name("mobile_source_off_road_categories"), null);
    }

    public <O extends Record> MobileSourceOffRoadCategories(Table<O> child, ForeignKey<O, MobileSourceOffRoadCategoriesRecord> key) {
        super(child, key, MOBILE_SOURCE_OFF_ROAD_CATEGORIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<MobileSourceOffRoadCategoriesRecord> getPrimaryKey() {
        return Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORIES_PKEY;
    }

    @Override
    public List<UniqueKey<MobileSourceOffRoadCategoriesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORIES_CODE_KEY, Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORIES_NAME_KEY, Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORIES_SORT_ORDER_KEY);
    }

    @Override
    public MobileSourceOffRoadCategories as(String alias) {
        return new MobileSourceOffRoadCategories(DSL.name(alias), this);
    }

    @Override
    public MobileSourceOffRoadCategories as(Name alias) {
        return new MobileSourceOffRoadCategories(alias, this);
    }

    @Override
    public MobileSourceOffRoadCategories as(Table<?> alias) {
        return new MobileSourceOffRoadCategories(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileSourceOffRoadCategories rename(String name) {
        return new MobileSourceOffRoadCategories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileSourceOffRoadCategories rename(Name name) {
        return new MobileSourceOffRoadCategories(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileSourceOffRoadCategories rename(Table<?> name) {
        return new MobileSourceOffRoadCategories(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Short, String, String, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Short, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Short, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
