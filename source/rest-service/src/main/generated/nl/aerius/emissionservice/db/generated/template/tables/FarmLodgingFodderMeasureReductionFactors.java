/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.public_.tables.Substances;
import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.FarmLodgingFodderMeasureReductionFactorsRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table containing the reduction factors (factor 0..1) for fodder and managment
 * measures.
 * When measures are applied to a lodging system, a single reduction factor for
 * the combination of measures is first determined.
 * This reduction factor is then applied on the total emission of the lodging
 * system, including additional or emission reducing lodging systems that are
 * stacked.
 * 
 * @column reduction_factor_floor The reduction factor for emission from the
 * floor.
 * @column reduction_factor_cellar The reduction factor for emission from the
 * manure cellar.
 * @column reduction_factor_total The combined reduction factor for emission
 * from both floor and manure cellar.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/farms.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FarmLodgingFodderMeasureReductionFactors extends TableImpl<FarmLodgingFodderMeasureReductionFactorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.farm_lodging_fodder_measure_reduction_factors</code>
     */
    public static final FarmLodgingFodderMeasureReductionFactors FARM_LODGING_FODDER_MEASURE_REDUCTION_FACTORS = new FarmLodgingFodderMeasureReductionFactors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FarmLodgingFodderMeasureReductionFactorsRecord> getRecordType() {
        return FarmLodgingFodderMeasureReductionFactorsRecord.class;
    }

    /**
     * The column
     * <code>template.farm_lodging_fodder_measure_reduction_factors.farm_lodging_fodder_measure_id</code>.
     */
    public final TableField<FarmLodgingFodderMeasureReductionFactorsRecord, Integer> FARM_LODGING_FODDER_MEASURE_ID = createField(DSL.name("farm_lodging_fodder_measure_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>template.farm_lodging_fodder_measure_reduction_factors.substance_id</code>.
     */
    public final TableField<FarmLodgingFodderMeasureReductionFactorsRecord, Short> SUBSTANCE_ID = createField(DSL.name("substance_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>template.farm_lodging_fodder_measure_reduction_factors.reduction_factor_floor</code>.
     */
    public final TableField<FarmLodgingFodderMeasureReductionFactorsRecord, Float> REDUCTION_FACTOR_FLOOR = createField(DSL.name("reduction_factor_floor"), nl.aerius.emissionservice.db.generated.public_.Domains.FRACTION.getDataType().nullable(false), this, "");

    /**
     * The column
     * <code>template.farm_lodging_fodder_measure_reduction_factors.reduction_factor_cellar</code>.
     */
    public final TableField<FarmLodgingFodderMeasureReductionFactorsRecord, Float> REDUCTION_FACTOR_CELLAR = createField(DSL.name("reduction_factor_cellar"), nl.aerius.emissionservice.db.generated.public_.Domains.FRACTION.getDataType().nullable(false), this, "");

    /**
     * The column
     * <code>template.farm_lodging_fodder_measure_reduction_factors.reduction_factor_total</code>.
     */
    public final TableField<FarmLodgingFodderMeasureReductionFactorsRecord, Float> REDUCTION_FACTOR_TOTAL = createField(DSL.name("reduction_factor_total"), nl.aerius.emissionservice.db.generated.public_.Domains.FRACTION.getDataType().nullable(false), this, "");

    private FarmLodgingFodderMeasureReductionFactors(Name alias, Table<FarmLodgingFodderMeasureReductionFactorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private FarmLodgingFodderMeasureReductionFactors(Name alias, Table<FarmLodgingFodderMeasureReductionFactorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table containing the reduction factors (factor 0..1) for fodder and managment measures.\r\nWhen measures are applied to a lodging system, a single reduction factor for the combination of measures is first determined.\r\nThis reduction factor is then applied on the total emission of the lodging system, including additional or emission reducing lodging systems that are stacked.\r\n\r\n@column reduction_factor_floor The reduction factor for emission from the floor.\r\n@column reduction_factor_cellar The reduction factor for emission from the manure cellar.\r\n@column reduction_factor_total The combined reduction factor for emission from both floor and manure cellar.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/farms.sql"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>template.farm_lodging_fodder_measure_reduction_factors</code> table
     * reference
     */
    public FarmLodgingFodderMeasureReductionFactors(String alias) {
        this(DSL.name(alias), FARM_LODGING_FODDER_MEASURE_REDUCTION_FACTORS);
    }

    /**
     * Create an aliased
     * <code>template.farm_lodging_fodder_measure_reduction_factors</code> table
     * reference
     */
    public FarmLodgingFodderMeasureReductionFactors(Name alias) {
        this(alias, FARM_LODGING_FODDER_MEASURE_REDUCTION_FACTORS);
    }

    /**
     * Create a
     * <code>template.farm_lodging_fodder_measure_reduction_factors</code> table
     * reference
     */
    public FarmLodgingFodderMeasureReductionFactors() {
        this(DSL.name("farm_lodging_fodder_measure_reduction_factors"), null);
    }

    public <O extends Record> FarmLodgingFodderMeasureReductionFactors(Table<O> child, ForeignKey<O, FarmLodgingFodderMeasureReductionFactorsRecord> key) {
        super(child, key, FARM_LODGING_FODDER_MEASURE_REDUCTION_FACTORS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<FarmLodgingFodderMeasureReductionFactorsRecord> getPrimaryKey() {
        return Keys.FARM_LODGING_FODDER_MEASURE_REDUCTION_FACTORS_PKEY;
    }

    @Override
    public List<ForeignKey<FarmLodgingFodderMeasureReductionFactorsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FARM_LODGING_FODDER_MEASURE_REDUCTION_FACTORS__FARM_LODGING_FODDER_MEASURE_REDUCTION_FACTORS_FKEY_MEASURES, Keys.FARM_LODGING_FODDER_MEASURE_REDUCTION_FACTORS__FARM_LODGING_FODDER_MEASURE_REDUCTION_FACTORS_FKEY_SUBSTANCES);
    }

    private transient FarmLodgingFodderMeasures _farmLodgingFodderMeasures;
    private transient Substances _substances;

    /**
     * Get the implicit join path to the
     * <code>template.farm_lodging_fodder_measures</code> table.
     */
    public FarmLodgingFodderMeasures farmLodgingFodderMeasures() {
        if (_farmLodgingFodderMeasures == null)
            _farmLodgingFodderMeasures = new FarmLodgingFodderMeasures(this, Keys.FARM_LODGING_FODDER_MEASURE_REDUCTION_FACTORS__FARM_LODGING_FODDER_MEASURE_REDUCTION_FACTORS_FKEY_MEASURES);

        return _farmLodgingFodderMeasures;
    }

    /**
     * Get the implicit join path to the <code>public.substances</code> table.
     */
    public Substances substances() {
        if (_substances == null)
            _substances = new Substances(this, Keys.FARM_LODGING_FODDER_MEASURE_REDUCTION_FACTORS__FARM_LODGING_FODDER_MEASURE_REDUCTION_FACTORS_FKEY_SUBSTANCES);

        return _substances;
    }

    @Override
    public List<Check<FarmLodgingFodderMeasureReductionFactorsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("farm_lodging_fodder_measure_reduction_factors_chk_factotal"), "(\nCASE\n    WHEN ((reduction_factor_floor)::real = (reduction_factor_cellar)::real) THEN ((reduction_factor_total)::real = (reduction_factor_floor)::real)\n    ELSE ((reduction_factor_total)::real <= ((reduction_factor_floor)::real + (reduction_factor_cellar)::real))\nEND)", true)
        );
    }

    @Override
    public FarmLodgingFodderMeasureReductionFactors as(String alias) {
        return new FarmLodgingFodderMeasureReductionFactors(DSL.name(alias), this);
    }

    @Override
    public FarmLodgingFodderMeasureReductionFactors as(Name alias) {
        return new FarmLodgingFodderMeasureReductionFactors(alias, this);
    }

    @Override
    public FarmLodgingFodderMeasureReductionFactors as(Table<?> alias) {
        return new FarmLodgingFodderMeasureReductionFactors(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmLodgingFodderMeasureReductionFactors rename(String name) {
        return new FarmLodgingFodderMeasureReductionFactors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmLodgingFodderMeasureReductionFactors rename(Name name) {
        return new FarmLodgingFodderMeasureReductionFactors(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmLodgingFodderMeasureReductionFactors rename(Table<?> name) {
        return new FarmLodgingFodderMeasureReductionFactors(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Short, Float, Float, Float> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Short, ? super Float, ? super Float, ? super Float, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Short, ? super Float, ? super Float, ? super Float, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
