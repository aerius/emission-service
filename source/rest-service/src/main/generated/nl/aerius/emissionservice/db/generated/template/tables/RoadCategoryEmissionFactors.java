/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.public_.tables.Substances;
import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.RoadCategoryEmissionFactorsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * De emissie factoren voor verschillende soorten verkeer bij verschillende
 * snelheidstyperingen voor verschillende soorten stoffen.
 * De emissie factors zijn hier in g/voertuig/km.
 * 
 * LET OP: De jaren die in deze tabel voorkomen zijn niet per definitie gelijk
 * aan de AERIUS beleidsjaren.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/roads.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoadCategoryEmissionFactors extends TableImpl<RoadCategoryEmissionFactorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.road_category_emission_factors</code>
     */
    public static final RoadCategoryEmissionFactors ROAD_CATEGORY_EMISSION_FACTORS = new RoadCategoryEmissionFactors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoadCategoryEmissionFactorsRecord> getRecordType() {
        return RoadCategoryEmissionFactorsRecord.class;
    }

    /**
     * The column
     * <code>template.road_category_emission_factors.road_category_id</code>.
     */
    public final TableField<RoadCategoryEmissionFactorsRecord, Integer> ROAD_CATEGORY_ID = createField(DSL.name("road_category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>template.road_category_emission_factors.road_speed_profile_id</code>.
     */
    public final TableField<RoadCategoryEmissionFactorsRecord, Integer> ROAD_SPEED_PROFILE_ID = createField(DSL.name("road_speed_profile_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>template.road_category_emission_factors.year</code>.
     */
    public final TableField<RoadCategoryEmissionFactorsRecord, Short> YEAR = createField(DSL.name("year"), nl.aerius.emissionservice.db.generated.public_.Domains.YEAR_TYPE.getDataType().nullable(false), this, "");

    /**
     * The column
     * <code>template.road_category_emission_factors.substance_id</code>.
     */
    public final TableField<RoadCategoryEmissionFactorsRecord, Short> SUBSTANCE_ID = createField(DSL.name("substance_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>template.road_category_emission_factors.emission_factor</code>.
     */
    public final TableField<RoadCategoryEmissionFactorsRecord, Double> EMISSION_FACTOR = createField(DSL.name("emission_factor"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column
     * <code>template.road_category_emission_factors.stagnated_emission_factor</code>.
     */
    public final TableField<RoadCategoryEmissionFactorsRecord, Double> STAGNATED_EMISSION_FACTOR = createField(DSL.name("stagnated_emission_factor"), SQLDataType.DOUBLE.nullable(false), this, "");

    private RoadCategoryEmissionFactors(Name alias, Table<RoadCategoryEmissionFactorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoadCategoryEmissionFactors(Name alias, Table<RoadCategoryEmissionFactorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("De emissie factoren voor verschillende soorten verkeer bij verschillende snelheidstyperingen voor verschillende soorten stoffen.\r\nDe emissie factors zijn hier in g/voertuig/km.\r\n\r\nLET OP: De jaren die in deze tabel voorkomen zijn niet per definitie gelijk aan de AERIUS beleidsjaren.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/roads.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>template.road_category_emission_factors</code>
     * table reference
     */
    public RoadCategoryEmissionFactors(String alias) {
        this(DSL.name(alias), ROAD_CATEGORY_EMISSION_FACTORS);
    }

    /**
     * Create an aliased <code>template.road_category_emission_factors</code>
     * table reference
     */
    public RoadCategoryEmissionFactors(Name alias) {
        this(alias, ROAD_CATEGORY_EMISSION_FACTORS);
    }

    /**
     * Create a <code>template.road_category_emission_factors</code> table
     * reference
     */
    public RoadCategoryEmissionFactors() {
        this(DSL.name("road_category_emission_factors"), null);
    }

    public <O extends Record> RoadCategoryEmissionFactors(Table<O> child, ForeignKey<O, RoadCategoryEmissionFactorsRecord> key) {
        super(child, key, ROAD_CATEGORY_EMISSION_FACTORS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<RoadCategoryEmissionFactorsRecord> getPrimaryKey() {
        return Keys.ROAD_CATEGORY_EMISSION_FACTORS_PKEY;
    }

    @Override
    public List<ForeignKey<RoadCategoryEmissionFactorsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ROAD_CATEGORY_EMISSION_FACTORS__ROAD_CATEGORY_EMISSION_FACTORS_FKEY_ROAD_CATEGORIES, Keys.ROAD_CATEGORY_EMISSION_FACTORS__ROAD_CATEGORY_EMISSION_FACTORS_FKEY_ROAD_SPEED_PROFILES, Keys.ROAD_CATEGORY_EMISSION_FACTORS__ROAD_CATEGORY_EMISSION_FACTORS_FKEY_SUBSTANCES);
    }

    private transient RoadCategories _roadCategories;
    private transient RoadSpeedProfiles _roadSpeedProfiles;
    private transient Substances _substances;

    /**
     * Get the implicit join path to the <code>template.road_categories</code>
     * table.
     */
    public RoadCategories roadCategories() {
        if (_roadCategories == null)
            _roadCategories = new RoadCategories(this, Keys.ROAD_CATEGORY_EMISSION_FACTORS__ROAD_CATEGORY_EMISSION_FACTORS_FKEY_ROAD_CATEGORIES);

        return _roadCategories;
    }

    /**
     * Get the implicit join path to the
     * <code>template.road_speed_profiles</code> table.
     */
    public RoadSpeedProfiles roadSpeedProfiles() {
        if (_roadSpeedProfiles == null)
            _roadSpeedProfiles = new RoadSpeedProfiles(this, Keys.ROAD_CATEGORY_EMISSION_FACTORS__ROAD_CATEGORY_EMISSION_FACTORS_FKEY_ROAD_SPEED_PROFILES);

        return _roadSpeedProfiles;
    }

    /**
     * Get the implicit join path to the <code>public.substances</code> table.
     */
    public Substances substances() {
        if (_substances == null)
            _substances = new Substances(this, Keys.ROAD_CATEGORY_EMISSION_FACTORS__ROAD_CATEGORY_EMISSION_FACTORS_FKEY_SUBSTANCES);

        return _substances;
    }

    @Override
    public RoadCategoryEmissionFactors as(String alias) {
        return new RoadCategoryEmissionFactors(DSL.name(alias), this);
    }

    @Override
    public RoadCategoryEmissionFactors as(Name alias) {
        return new RoadCategoryEmissionFactors(alias, this);
    }

    @Override
    public RoadCategoryEmissionFactors as(Table<?> alias) {
        return new RoadCategoryEmissionFactors(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadCategoryEmissionFactors rename(String name) {
        return new RoadCategoryEmissionFactors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadCategoryEmissionFactors rename(Name name) {
        return new RoadCategoryEmissionFactors(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadCategoryEmissionFactors rename(Table<?> name) {
        return new RoadCategoryEmissionFactors(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Short, Short, Double, Double> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Integer, ? super Short, ? super Short, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Integer, ? super Short, ? super Short, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
