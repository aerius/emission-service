/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.FarmLodgingSystemDefinitionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Stalbeschrijvingen (BWL-nummers) zoals gebruikt voor de stalsystemen in de
 * RAV.
 * Zie
 * http://www.infomil.nl/onderwerpen/landbouw-tuinbouw/ammoniak/rav/stalbeschrijvingen
 * 
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/farms.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FarmLodgingSystemDefinitions extends TableImpl<FarmLodgingSystemDefinitionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.farm_lodging_system_definitions</code>
     */
    public static final FarmLodgingSystemDefinitions FARM_LODGING_SYSTEM_DEFINITIONS = new FarmLodgingSystemDefinitions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FarmLodgingSystemDefinitionsRecord> getRecordType() {
        return FarmLodgingSystemDefinitionsRecord.class;
    }

    /**
     * The column
     * <code>template.farm_lodging_system_definitions.farm_lodging_system_definition_id</code>.
     */
    public final TableField<FarmLodgingSystemDefinitionsRecord, Integer> FARM_LODGING_SYSTEM_DEFINITION_ID = createField(DSL.name("farm_lodging_system_definition_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>template.farm_lodging_system_definitions.code</code>.
     */
    public final TableField<FarmLodgingSystemDefinitionsRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>template.farm_lodging_system_definitions.name</code>.
     */
    public final TableField<FarmLodgingSystemDefinitionsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>template.farm_lodging_system_definitions.description</code>.
     */
    public final TableField<FarmLodgingSystemDefinitionsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private FarmLodgingSystemDefinitions(Name alias, Table<FarmLodgingSystemDefinitionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private FarmLodgingSystemDefinitions(Name alias, Table<FarmLodgingSystemDefinitionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Stalbeschrijvingen (BWL-nummers) zoals gebruikt voor de stalsystemen in de RAV.\r\nZie http://www.infomil.nl/onderwerpen/landbouw-tuinbouw/ammoniak/rav/stalbeschrijvingen\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/farms.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>template.farm_lodging_system_definitions</code>
     * table reference
     */
    public FarmLodgingSystemDefinitions(String alias) {
        this(DSL.name(alias), FARM_LODGING_SYSTEM_DEFINITIONS);
    }

    /**
     * Create an aliased <code>template.farm_lodging_system_definitions</code>
     * table reference
     */
    public FarmLodgingSystemDefinitions(Name alias) {
        this(alias, FARM_LODGING_SYSTEM_DEFINITIONS);
    }

    /**
     * Create a <code>template.farm_lodging_system_definitions</code> table
     * reference
     */
    public FarmLodgingSystemDefinitions() {
        this(DSL.name("farm_lodging_system_definitions"), null);
    }

    public <O extends Record> FarmLodgingSystemDefinitions(Table<O> child, ForeignKey<O, FarmLodgingSystemDefinitionsRecord> key) {
        super(child, key, FARM_LODGING_SYSTEM_DEFINITIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<FarmLodgingSystemDefinitionsRecord> getPrimaryKey() {
        return Keys.FARM_LODGING_SYSTEM_DEFINITIONS_PKEY;
    }

    @Override
    public List<UniqueKey<FarmLodgingSystemDefinitionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.FARM_LODGING_SYSTEM_DEFINITIONS_CODE_KEY, Keys.FARM_LODGING_SYSTEM_DEFINITIONS_NAME_KEY);
    }

    @Override
    public FarmLodgingSystemDefinitions as(String alias) {
        return new FarmLodgingSystemDefinitions(DSL.name(alias), this);
    }

    @Override
    public FarmLodgingSystemDefinitions as(Name alias) {
        return new FarmLodgingSystemDefinitions(alias, this);
    }

    @Override
    public FarmLodgingSystemDefinitions as(Table<?> alias) {
        return new FarmLodgingSystemDefinitions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmLodgingSystemDefinitions rename(String name) {
        return new FarmLodgingSystemDefinitions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmLodgingSystemDefinitions rename(Name name) {
        return new FarmLodgingSystemDefinitions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmLodgingSystemDefinitions rename(Table<?> name) {
        return new FarmLodgingSystemDefinitions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
