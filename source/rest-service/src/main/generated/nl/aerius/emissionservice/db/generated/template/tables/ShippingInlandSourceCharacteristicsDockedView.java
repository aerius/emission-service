/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.public_.enums.ShippingInlandLadenState;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.ShippingInlandSourceCharacteristicsDockedViewRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * View returning the emission characteristics for inland shipping docks.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/04-views/shipping_inland.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShippingInlandSourceCharacteristicsDockedView extends TableImpl<ShippingInlandSourceCharacteristicsDockedViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.shipping_inland_source_characteristics_docked_view</code>
     */
    public static final ShippingInlandSourceCharacteristicsDockedView SHIPPING_INLAND_SOURCE_CHARACTERISTICS_DOCKED_VIEW = new ShippingInlandSourceCharacteristicsDockedView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShippingInlandSourceCharacteristicsDockedViewRecord> getRecordType() {
        return ShippingInlandSourceCharacteristicsDockedViewRecord.class;
    }

    /**
     * The column
     * <code>template.shipping_inland_source_characteristics_docked_view.shipping_inland_category_id</code>.
     */
    public final TableField<ShippingInlandSourceCharacteristicsDockedViewRecord, Short> SHIPPING_INLAND_CATEGORY_ID = createField(DSL.name("shipping_inland_category_id"), SQLDataType.SMALLINT, this, "");

    /**
     * The column
     * <code>template.shipping_inland_source_characteristics_docked_view.laden_state</code>.
     */
    public final TableField<ShippingInlandSourceCharacteristicsDockedViewRecord, ShippingInlandLadenState> LADEN_STATE = createField(DSL.name("laden_state"), SQLDataType.VARCHAR.asEnumDataType(nl.aerius.emissionservice.db.generated.public_.enums.ShippingInlandLadenState.class), this, "");

    /**
     * The column
     * <code>template.shipping_inland_source_characteristics_docked_view.gcn_sector_id</code>.
     */
    public final TableField<ShippingInlandSourceCharacteristicsDockedViewRecord, Integer> GCN_SECTOR_ID = createField(DSL.name("gcn_sector_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>template.shipping_inland_source_characteristics_docked_view.heat_content</code>.
     */
    public final TableField<ShippingInlandSourceCharacteristicsDockedViewRecord, Float> HEAT_CONTENT = createField(DSL.name("heat_content"), nl.aerius.emissionservice.db.generated.public_.Domains.POSREAL.getDataType(), this, "");

    /**
     * The column
     * <code>template.shipping_inland_source_characteristics_docked_view.height</code>.
     */
    public final TableField<ShippingInlandSourceCharacteristicsDockedViewRecord, Float> HEIGHT = createField(DSL.name("height"), nl.aerius.emissionservice.db.generated.public_.Domains.POSREAL.getDataType(), this, "");

    /**
     * The column
     * <code>template.shipping_inland_source_characteristics_docked_view.spread</code>.
     */
    public final TableField<ShippingInlandSourceCharacteristicsDockedViewRecord, Float> SPREAD = createField(DSL.name("spread"), nl.aerius.emissionservice.db.generated.public_.Domains.POSREAL.getDataType(), this, "");

    /**
     * The column
     * <code>template.shipping_inland_source_characteristics_docked_view.emission_diurnal_variation_id</code>.
     */
    public final TableField<ShippingInlandSourceCharacteristicsDockedViewRecord, Integer> EMISSION_DIURNAL_VARIATION_ID = createField(DSL.name("emission_diurnal_variation_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>template.shipping_inland_source_characteristics_docked_view.emission_diurnal_variation_code</code>.
     */
    public final TableField<ShippingInlandSourceCharacteristicsDockedViewRecord, String> EMISSION_DIURNAL_VARIATION_CODE = createField(DSL.name("emission_diurnal_variation_code"), SQLDataType.CLOB, this, "");

    private ShippingInlandSourceCharacteristicsDockedView(Name alias, Table<ShippingInlandSourceCharacteristicsDockedViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShippingInlandSourceCharacteristicsDockedView(Name alias, Table<ShippingInlandSourceCharacteristicsDockedViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("View returning the emission characteristics for inland shipping docks.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/04-views/shipping_inland.sql"), TableOptions.view("""
        create view "shipping_inland_source_characteristics_docked_view" as  SELECT shipping_inland_category_source_characteristics_docked.shipping_inland_category_id,
         shipping_inland_category_source_characteristics_docked.laden_state,
         shipping_inland_category_source_characteristics_docked.gcn_sector_id,
         shipping_inland_category_source_characteristics_docked.heat_content,
         shipping_inland_category_source_characteristics_docked.height,
         shipping_inland_category_source_characteristics_docked.spread,
         emission_diurnal_variations.emission_diurnal_variation_id,
         emission_diurnal_variations.code AS emission_diurnal_variation_code
        FROM ((template.shipping_inland_category_source_characteristics_docked
          JOIN template.default_gcn_sector_source_characteristics_view USING (gcn_sector_id))
          JOIN template.emission_diurnal_variations USING (emission_diurnal_variation_id));
        """));
    }

    /**
     * Create an aliased
     * <code>template.shipping_inland_source_characteristics_docked_view</code>
     * table reference
     */
    public ShippingInlandSourceCharacteristicsDockedView(String alias) {
        this(DSL.name(alias), SHIPPING_INLAND_SOURCE_CHARACTERISTICS_DOCKED_VIEW);
    }

    /**
     * Create an aliased
     * <code>template.shipping_inland_source_characteristics_docked_view</code>
     * table reference
     */
    public ShippingInlandSourceCharacteristicsDockedView(Name alias) {
        this(alias, SHIPPING_INLAND_SOURCE_CHARACTERISTICS_DOCKED_VIEW);
    }

    /**
     * Create a
     * <code>template.shipping_inland_source_characteristics_docked_view</code>
     * table reference
     */
    public ShippingInlandSourceCharacteristicsDockedView() {
        this(DSL.name("shipping_inland_source_characteristics_docked_view"), null);
    }

    public <O extends Record> ShippingInlandSourceCharacteristicsDockedView(Table<O> child, ForeignKey<O, ShippingInlandSourceCharacteristicsDockedViewRecord> key) {
        super(child, key, SHIPPING_INLAND_SOURCE_CHARACTERISTICS_DOCKED_VIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public ShippingInlandSourceCharacteristicsDockedView as(String alias) {
        return new ShippingInlandSourceCharacteristicsDockedView(DSL.name(alias), this);
    }

    @Override
    public ShippingInlandSourceCharacteristicsDockedView as(Name alias) {
        return new ShippingInlandSourceCharacteristicsDockedView(alias, this);
    }

    @Override
    public ShippingInlandSourceCharacteristicsDockedView as(Table<?> alias) {
        return new ShippingInlandSourceCharacteristicsDockedView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingInlandSourceCharacteristicsDockedView rename(String name) {
        return new ShippingInlandSourceCharacteristicsDockedView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingInlandSourceCharacteristicsDockedView rename(Name name) {
        return new ShippingInlandSourceCharacteristicsDockedView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingInlandSourceCharacteristicsDockedView rename(Table<?> name) {
        return new ShippingInlandSourceCharacteristicsDockedView(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Short, ShippingInlandLadenState, Integer, Float, Float, Float, Integer, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Short, ? super ShippingInlandLadenState, ? super Integer, ? super Float, ? super Float, ? super Float, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Short, ? super ShippingInlandLadenState, ? super Integer, ? super Float, ? super Float, ? super Float, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
