/*
 * This file is generated by jOOQ.
 */
package nl.aerius.emissionservice.db.generated.template.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.aerius.emissionservice.db.generated.template.Keys;
import nl.aerius.emissionservice.db.generated.template.Template;
import nl.aerius.emissionservice.db.generated.template.tables.records.RoadTypesToSpeedProfilesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table linking types of roads and speed profiles.
 * 
 * @file
 * source/database/src/main/sql/template/02-emission_factors/02-tables/roads.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoadTypesToSpeedProfiles extends TableImpl<RoadTypesToSpeedProfilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>template.road_types_to_speed_profiles</code>
     */
    public static final RoadTypesToSpeedProfiles ROAD_TYPES_TO_SPEED_PROFILES = new RoadTypesToSpeedProfiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoadTypesToSpeedProfilesRecord> getRecordType() {
        return RoadTypesToSpeedProfilesRecord.class;
    }

    /**
     * The column
     * <code>template.road_types_to_speed_profiles.road_type_category_id</code>.
     */
    public final TableField<RoadTypesToSpeedProfilesRecord, Integer> ROAD_TYPE_CATEGORY_ID = createField(DSL.name("road_type_category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>template.road_types_to_speed_profiles.road_speed_profile_id</code>.
     */
    public final TableField<RoadTypesToSpeedProfilesRecord, Integer> ROAD_SPEED_PROFILE_ID = createField(DSL.name("road_speed_profile_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private RoadTypesToSpeedProfiles(Name alias, Table<RoadTypesToSpeedProfilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoadTypesToSpeedProfiles(Name alias, Table<RoadTypesToSpeedProfilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table linking types of roads and speed profiles.\r\n\r\n@file source/database/src/main/sql/template/02-emission_factors/02-tables/roads.sql"), TableOptions.table());
    }

    /**
     * Create an aliased <code>template.road_types_to_speed_profiles</code>
     * table reference
     */
    public RoadTypesToSpeedProfiles(String alias) {
        this(DSL.name(alias), ROAD_TYPES_TO_SPEED_PROFILES);
    }

    /**
     * Create an aliased <code>template.road_types_to_speed_profiles</code>
     * table reference
     */
    public RoadTypesToSpeedProfiles(Name alias) {
        this(alias, ROAD_TYPES_TO_SPEED_PROFILES);
    }

    /**
     * Create a <code>template.road_types_to_speed_profiles</code> table
     * reference
     */
    public RoadTypesToSpeedProfiles() {
        this(DSL.name("road_types_to_speed_profiles"), null);
    }

    public <O extends Record> RoadTypesToSpeedProfiles(Table<O> child, ForeignKey<O, RoadTypesToSpeedProfilesRecord> key) {
        super(child, key, ROAD_TYPES_TO_SPEED_PROFILES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Template.TEMPLATE;
    }

    @Override
    public UniqueKey<RoadTypesToSpeedProfilesRecord> getPrimaryKey() {
        return Keys.ROAD_TYPES_TO_SPEED_PROFILES_PKEY;
    }

    @Override
    public List<ForeignKey<RoadTypesToSpeedProfilesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ROAD_TYPES_TO_SPEED_PROFILES__ROAD_TYPES_TO_SPEED_PROFILES_FKEY_ROAD_TYPE_CATEGORIES, Keys.ROAD_TYPES_TO_SPEED_PROFILES__ROAD_TYPES_TO_SPEED_PROFILES_FKEY_ROAD_SPEED_PROFILES);
    }

    private transient RoadTypeCategories _roadTypeCategories;
    private transient RoadSpeedProfiles _roadSpeedProfiles;

    /**
     * Get the implicit join path to the
     * <code>template.road_type_categories</code> table.
     */
    public RoadTypeCategories roadTypeCategories() {
        if (_roadTypeCategories == null)
            _roadTypeCategories = new RoadTypeCategories(this, Keys.ROAD_TYPES_TO_SPEED_PROFILES__ROAD_TYPES_TO_SPEED_PROFILES_FKEY_ROAD_TYPE_CATEGORIES);

        return _roadTypeCategories;
    }

    /**
     * Get the implicit join path to the
     * <code>template.road_speed_profiles</code> table.
     */
    public RoadSpeedProfiles roadSpeedProfiles() {
        if (_roadSpeedProfiles == null)
            _roadSpeedProfiles = new RoadSpeedProfiles(this, Keys.ROAD_TYPES_TO_SPEED_PROFILES__ROAD_TYPES_TO_SPEED_PROFILES_FKEY_ROAD_SPEED_PROFILES);

        return _roadSpeedProfiles;
    }

    @Override
    public RoadTypesToSpeedProfiles as(String alias) {
        return new RoadTypesToSpeedProfiles(DSL.name(alias), this);
    }

    @Override
    public RoadTypesToSpeedProfiles as(Name alias) {
        return new RoadTypesToSpeedProfiles(alias, this);
    }

    @Override
    public RoadTypesToSpeedProfiles as(Table<?> alias) {
        return new RoadTypesToSpeedProfiles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadTypesToSpeedProfiles rename(String name) {
        return new RoadTypesToSpeedProfiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadTypesToSpeedProfiles rename(Name name) {
        return new RoadTypesToSpeedProfiles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadTypesToSpeedProfiles rename(Table<?> name) {
        return new RoadTypesToSpeedProfiles(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
