/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.template.tables;


import nl.overheid.aerius.emissionservice.jooq.template.Template;
import nl.overheid.aerius.emissionservice.jooq.template.tables.records.RoadEmissionFactorsInterpolatedViewRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * De wegemissiefactoren (road_category_emission_factors) waarvan alle ontbrekende 
 * tussenliggende rekenjaren worden geinterpoleerd.
 * 
 * @file source/database/src/main/sql/template/02_emission_factors/04-views/roads.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoadEmissionFactorsInterpolatedView extends TableImpl<RoadEmissionFactorsInterpolatedViewRecord> {

    private static final long serialVersionUID = -1663854583;

    /**
     * The reference instance of <code>template.road_emission_factors_interpolated_view</code>
     */
    public static final RoadEmissionFactorsInterpolatedView ROAD_EMISSION_FACTORS_INTERPOLATED_VIEW = new RoadEmissionFactorsInterpolatedView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoadEmissionFactorsInterpolatedViewRecord> getRecordType() {
        return RoadEmissionFactorsInterpolatedViewRecord.class;
    }

    /**
     * The column <code>template.road_emission_factors_interpolated_view.road_category_id</code>.
     */
    public final TableField<RoadEmissionFactorsInterpolatedViewRecord, Integer> ROAD_CATEGORY_ID = createField(DSL.name("road_category_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>template.road_emission_factors_interpolated_view.road_speed_profile_id</code>.
     */
    public final TableField<RoadEmissionFactorsInterpolatedViewRecord, Integer> ROAD_SPEED_PROFILE_ID = createField(DSL.name("road_speed_profile_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>template.road_emission_factors_interpolated_view.year</code>.
     */
    public final TableField<RoadEmissionFactorsInterpolatedViewRecord, Short> YEAR = createField(DSL.name("year"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>template.road_emission_factors_interpolated_view.substance_id</code>.
     */
    public final TableField<RoadEmissionFactorsInterpolatedViewRecord, Short> SUBSTANCE_ID = createField(DSL.name("substance_id"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>template.road_emission_factors_interpolated_view.emission_factor</code>.
     */
    public final TableField<RoadEmissionFactorsInterpolatedViewRecord, Double> EMISSION_FACTOR = createField(DSL.name("emission_factor"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>template.road_emission_factors_interpolated_view.stagnated_emission_factor</code>.
     */
    public final TableField<RoadEmissionFactorsInterpolatedViewRecord, Double> STAGNATED_EMISSION_FACTOR = createField(DSL.name("stagnated_emission_factor"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>template.road_emission_factors_interpolated_view</code> table reference
     */
    public RoadEmissionFactorsInterpolatedView() {
        this(DSL.name("road_emission_factors_interpolated_view"), null);
    }

    /**
     * Create an aliased <code>template.road_emission_factors_interpolated_view</code> table reference
     */
    public RoadEmissionFactorsInterpolatedView(String alias) {
        this(DSL.name(alias), ROAD_EMISSION_FACTORS_INTERPOLATED_VIEW);
    }

    /**
     * Create an aliased <code>template.road_emission_factors_interpolated_view</code> table reference
     */
    public RoadEmissionFactorsInterpolatedView(Name alias) {
        this(alias, ROAD_EMISSION_FACTORS_INTERPOLATED_VIEW);
    }

    private RoadEmissionFactorsInterpolatedView(Name alias, Table<RoadEmissionFactorsInterpolatedViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoadEmissionFactorsInterpolatedView(Name alias, Table<RoadEmissionFactorsInterpolatedViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("De wegemissiefactoren (road_category_emission_factors) waarvan alle ontbrekende tussenliggende rekenjaren worden geinterpoleerd.\r\n\r\n@file source/database/src/main/sql/template/02_emission_factors/04-views/roads.sql"), TableOptions.view("create view \"road_emission_factors_interpolated_view\" as  SELECT road_emission_factors_interpolation_years_view.road_category_id,\n    road_emission_factors_interpolation_years_view.road_speed_profile_id,\n    road_emission_factors_interpolation_years_view.year,\n    road_emission_factors_interpolation_years_view.substance_id,\n    ae_linear_interpolate((road_emission_factors_interpolation_years_view.begin_year)::double precision, (road_emission_factors_interpolation_years_view.end_year)::double precision, road_emission_factors_begin.emission_factor, road_emission_factors_end.emission_factor, (road_emission_factors_interpolation_years_view.year)::double precision) AS emission_factor,\n    ae_linear_interpolate((road_emission_factors_interpolation_years_view.begin_year)::double precision, (road_emission_factors_interpolation_years_view.end_year)::double precision, road_emission_factors_begin.stagnated_emission_factor, road_emission_factors_end.stagnated_emission_factor, (road_emission_factors_interpolation_years_view.year)::double precision) AS stagnated_emission_factor\n   FROM ((template.road_emission_factors_interpolation_years_view\n     JOIN template.road_category_emission_factors road_emission_factors_begin ON (((road_emission_factors_begin.road_category_id = road_emission_factors_interpolation_years_view.road_category_id) AND (road_emission_factors_begin.road_speed_profile_id = road_emission_factors_interpolation_years_view.road_speed_profile_id) AND (road_emission_factors_begin.substance_id = road_emission_factors_interpolation_years_view.substance_id) AND ((road_emission_factors_begin.year)::smallint = road_emission_factors_interpolation_years_view.begin_year))))\n     JOIN template.road_category_emission_factors road_emission_factors_end ON (((road_emission_factors_end.road_category_id = road_emission_factors_interpolation_years_view.road_category_id) AND (road_emission_factors_end.road_speed_profile_id = road_emission_factors_interpolation_years_view.road_speed_profile_id) AND (road_emission_factors_end.substance_id = road_emission_factors_interpolation_years_view.substance_id) AND ((road_emission_factors_end.year)::smallint = road_emission_factors_interpolation_years_view.end_year))));"));
    }

    public <O extends Record> RoadEmissionFactorsInterpolatedView(Table<O> child, ForeignKey<O, RoadEmissionFactorsInterpolatedViewRecord> key) {
        super(child, key, ROAD_EMISSION_FACTORS_INTERPOLATED_VIEW);
    }

    @Override
    public Schema getSchema() {
        return Template.TEMPLATE;
    }

    @Override
    public RoadEmissionFactorsInterpolatedView as(String alias) {
        return new RoadEmissionFactorsInterpolatedView(DSL.name(alias), this);
    }

    @Override
    public RoadEmissionFactorsInterpolatedView as(Name alias) {
        return new RoadEmissionFactorsInterpolatedView(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadEmissionFactorsInterpolatedView rename(String name) {
        return new RoadEmissionFactorsInterpolatedView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoadEmissionFactorsInterpolatedView rename(Name name) {
        return new RoadEmissionFactorsInterpolatedView(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Short, Short, Double, Double> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
