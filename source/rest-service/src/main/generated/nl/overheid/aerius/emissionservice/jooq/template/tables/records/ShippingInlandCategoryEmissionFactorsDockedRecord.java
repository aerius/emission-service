/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.template.tables.records;


import nl.overheid.aerius.emissionservice.jooq.public_.enums.ShippingInlandLadenState;
import nl.overheid.aerius.emissionservice.jooq.template.tables.ShippingInlandCategoryEmissionFactorsDocked;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * De emissie factoren voor verschillende soorten stilliggende schepen.
 * Deze kenmerken zijn uniek per scheepstype, ladingstoestand en stof.
 * 
 * Hierin worden de emissiefactoren per jaar weergegeven, emission_factor 
 * is de emissie factor tijdens varen (in kg/(kilometer * aantal schepen)) 
 * bij een bepaalde snelheid.
 * 
 * @file source/database/src/main/sql/template/02_emission_factors/02-tables/shipping_inland.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShippingInlandCategoryEmissionFactorsDockedRecord extends UpdatableRecordImpl<ShippingInlandCategoryEmissionFactorsDockedRecord> implements Record5<Short, ShippingInlandLadenState, Short, Short, Float> {

    private static final long serialVersionUID = -1492546666;

    /**
     * Setter for <code>template.shipping_inland_category_emission_factors_docked.shipping_inland_category_id</code>.
     */
    public void setShippingInlandCategoryId(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>template.shipping_inland_category_emission_factors_docked.shipping_inland_category_id</code>.
     */
    public Short getShippingInlandCategoryId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>template.shipping_inland_category_emission_factors_docked.laden_state</code>.
     */
    public void setLadenState(ShippingInlandLadenState value) {
        set(1, value);
    }

    /**
     * Getter for <code>template.shipping_inland_category_emission_factors_docked.laden_state</code>.
     */
    public ShippingInlandLadenState getLadenState() {
        return (ShippingInlandLadenState) get(1);
    }

    /**
     * Setter for <code>template.shipping_inland_category_emission_factors_docked.year</code>.
     */
    public void setYear(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>template.shipping_inland_category_emission_factors_docked.year</code>.
     */
    public Short getYear() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>template.shipping_inland_category_emission_factors_docked.substance_id</code>.
     */
    public void setSubstanceId(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>template.shipping_inland_category_emission_factors_docked.substance_id</code>.
     */
    public Short getSubstanceId() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>template.shipping_inland_category_emission_factors_docked.emission_factor</code>.
     */
    public void setEmissionFactor(Float value) {
        set(4, value);
    }

    /**
     * Getter for <code>template.shipping_inland_category_emission_factors_docked.emission_factor</code>.
     */
    public Float getEmissionFactor() {
        return (Float) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record4<Short, ShippingInlandLadenState, Short, Short> key() {
        return (Record4) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Short, ShippingInlandLadenState, Short, Short, Float> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Short, ShippingInlandLadenState, Short, Short, Float> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return ShippingInlandCategoryEmissionFactorsDocked.SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED.SHIPPING_INLAND_CATEGORY_ID;
    }

    @Override
    public Field<ShippingInlandLadenState> field2() {
        return ShippingInlandCategoryEmissionFactorsDocked.SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED.LADEN_STATE;
    }

    @Override
    public Field<Short> field3() {
        return ShippingInlandCategoryEmissionFactorsDocked.SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED.YEAR;
    }

    @Override
    public Field<Short> field4() {
        return ShippingInlandCategoryEmissionFactorsDocked.SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED.SUBSTANCE_ID;
    }

    @Override
    public Field<Float> field5() {
        return ShippingInlandCategoryEmissionFactorsDocked.SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED.EMISSION_FACTOR;
    }

    @Override
    public Short component1() {
        return getShippingInlandCategoryId();
    }

    @Override
    public ShippingInlandLadenState component2() {
        return getLadenState();
    }

    @Override
    public Short component3() {
        return getYear();
    }

    @Override
    public Short component4() {
        return getSubstanceId();
    }

    @Override
    public Float component5() {
        return getEmissionFactor();
    }

    @Override
    public Short value1() {
        return getShippingInlandCategoryId();
    }

    @Override
    public ShippingInlandLadenState value2() {
        return getLadenState();
    }

    @Override
    public Short value3() {
        return getYear();
    }

    @Override
    public Short value4() {
        return getSubstanceId();
    }

    @Override
    public Float value5() {
        return getEmissionFactor();
    }

    @Override
    public ShippingInlandCategoryEmissionFactorsDockedRecord value1(Short value) {
        setShippingInlandCategoryId(value);
        return this;
    }

    @Override
    public ShippingInlandCategoryEmissionFactorsDockedRecord value2(ShippingInlandLadenState value) {
        setLadenState(value);
        return this;
    }

    @Override
    public ShippingInlandCategoryEmissionFactorsDockedRecord value3(Short value) {
        setYear(value);
        return this;
    }

    @Override
    public ShippingInlandCategoryEmissionFactorsDockedRecord value4(Short value) {
        setSubstanceId(value);
        return this;
    }

    @Override
    public ShippingInlandCategoryEmissionFactorsDockedRecord value5(Float value) {
        setEmissionFactor(value);
        return this;
    }

    @Override
    public ShippingInlandCategoryEmissionFactorsDockedRecord values(Short value1, ShippingInlandLadenState value2, Short value3, Short value4, Float value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ShippingInlandCategoryEmissionFactorsDockedRecord
     */
    public ShippingInlandCategoryEmissionFactorsDockedRecord() {
        super(ShippingInlandCategoryEmissionFactorsDocked.SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED);
    }

    /**
     * Create a detached, initialised ShippingInlandCategoryEmissionFactorsDockedRecord
     */
    public ShippingInlandCategoryEmissionFactorsDockedRecord(Short shippingInlandCategoryId, ShippingInlandLadenState ladenState, Short year, Short substanceId, Float emissionFactor) {
        super(ShippingInlandCategoryEmissionFactorsDocked.SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED);

        set(0, shippingInlandCategoryId);
        set(1, ladenState);
        set(2, year);
        set(3, substanceId);
        set(4, emissionFactor);
    }
}
