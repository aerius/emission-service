/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.template.tables.records;


import nl.overheid.aerius.emissionservice.jooq.template.tables.DefaultGcnSectorSourceCharacteristicsView;

import org.jooq.Field;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.TableRecordImpl;


/**
 * View retourneert de default GCN bron karakteristieken.
 * De GCN bron karakteristieken lijst is per GCN sector en stof. Deze view 
 * retourneert de bron karakteristieken van de meest relevante stof.
 * 
 * @file source/database/src/main/sql/template/01_sectors/04-views.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DefaultGcnSectorSourceCharacteristicsViewRecord extends TableRecordImpl<DefaultGcnSectorSourceCharacteristicsViewRecord> implements Record6<Integer, Float, Float, Float, Integer, Integer> {

    private static final long serialVersionUID = 740609604;

    /**
     * Setter for <code>template.default_gcn_sector_source_characteristics_view.gcn_sector_id</code>.
     */
    public void setGcnSectorId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>template.default_gcn_sector_source_characteristics_view.gcn_sector_id</code>.
     */
    public Integer getGcnSectorId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>template.default_gcn_sector_source_characteristics_view.heat_content</code>.
     */
    public void setHeatContent(Float value) {
        set(1, value);
    }

    /**
     * Getter for <code>template.default_gcn_sector_source_characteristics_view.heat_content</code>.
     */
    public Float getHeatContent() {
        return (Float) get(1);
    }

    /**
     * Setter for <code>template.default_gcn_sector_source_characteristics_view.height</code>.
     */
    public void setHeight(Float value) {
        set(2, value);
    }

    /**
     * Getter for <code>template.default_gcn_sector_source_characteristics_view.height</code>.
     */
    public Float getHeight() {
        return (Float) get(2);
    }

    /**
     * Setter for <code>template.default_gcn_sector_source_characteristics_view.spread</code>.
     */
    public void setSpread(Float value) {
        set(3, value);
    }

    /**
     * Getter for <code>template.default_gcn_sector_source_characteristics_view.spread</code>.
     */
    public Float getSpread() {
        return (Float) get(3);
    }

    /**
     * Setter for <code>template.default_gcn_sector_source_characteristics_view.emission_diurnal_variation_id</code>.
     */
    public void setEmissionDiurnalVariationId(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>template.default_gcn_sector_source_characteristics_view.emission_diurnal_variation_id</code>.
     */
    public Integer getEmissionDiurnalVariationId() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>template.default_gcn_sector_source_characteristics_view.particle_size_distribution</code>.
     */
    public void setParticleSizeDistribution(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>template.default_gcn_sector_source_characteristics_view.particle_size_distribution</code>.
     */
    public Integer getParticleSizeDistribution() {
        return (Integer) get(5);
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Float, Float, Float, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, Float, Float, Float, Integer, Integer> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return DefaultGcnSectorSourceCharacteristicsView.DEFAULT_GCN_SECTOR_SOURCE_CHARACTERISTICS_VIEW.GCN_SECTOR_ID;
    }

    @Override
    public Field<Float> field2() {
        return DefaultGcnSectorSourceCharacteristicsView.DEFAULT_GCN_SECTOR_SOURCE_CHARACTERISTICS_VIEW.HEAT_CONTENT;
    }

    @Override
    public Field<Float> field3() {
        return DefaultGcnSectorSourceCharacteristicsView.DEFAULT_GCN_SECTOR_SOURCE_CHARACTERISTICS_VIEW.HEIGHT;
    }

    @Override
    public Field<Float> field4() {
        return DefaultGcnSectorSourceCharacteristicsView.DEFAULT_GCN_SECTOR_SOURCE_CHARACTERISTICS_VIEW.SPREAD;
    }

    @Override
    public Field<Integer> field5() {
        return DefaultGcnSectorSourceCharacteristicsView.DEFAULT_GCN_SECTOR_SOURCE_CHARACTERISTICS_VIEW.EMISSION_DIURNAL_VARIATION_ID;
    }

    @Override
    public Field<Integer> field6() {
        return DefaultGcnSectorSourceCharacteristicsView.DEFAULT_GCN_SECTOR_SOURCE_CHARACTERISTICS_VIEW.PARTICLE_SIZE_DISTRIBUTION;
    }

    @Override
    public Integer component1() {
        return getGcnSectorId();
    }

    @Override
    public Float component2() {
        return getHeatContent();
    }

    @Override
    public Float component3() {
        return getHeight();
    }

    @Override
    public Float component4() {
        return getSpread();
    }

    @Override
    public Integer component5() {
        return getEmissionDiurnalVariationId();
    }

    @Override
    public Integer component6() {
        return getParticleSizeDistribution();
    }

    @Override
    public Integer value1() {
        return getGcnSectorId();
    }

    @Override
    public Float value2() {
        return getHeatContent();
    }

    @Override
    public Float value3() {
        return getHeight();
    }

    @Override
    public Float value4() {
        return getSpread();
    }

    @Override
    public Integer value5() {
        return getEmissionDiurnalVariationId();
    }

    @Override
    public Integer value6() {
        return getParticleSizeDistribution();
    }

    @Override
    public DefaultGcnSectorSourceCharacteristicsViewRecord value1(Integer value) {
        setGcnSectorId(value);
        return this;
    }

    @Override
    public DefaultGcnSectorSourceCharacteristicsViewRecord value2(Float value) {
        setHeatContent(value);
        return this;
    }

    @Override
    public DefaultGcnSectorSourceCharacteristicsViewRecord value3(Float value) {
        setHeight(value);
        return this;
    }

    @Override
    public DefaultGcnSectorSourceCharacteristicsViewRecord value4(Float value) {
        setSpread(value);
        return this;
    }

    @Override
    public DefaultGcnSectorSourceCharacteristicsViewRecord value5(Integer value) {
        setEmissionDiurnalVariationId(value);
        return this;
    }

    @Override
    public DefaultGcnSectorSourceCharacteristicsViewRecord value6(Integer value) {
        setParticleSizeDistribution(value);
        return this;
    }

    @Override
    public DefaultGcnSectorSourceCharacteristicsViewRecord values(Integer value1, Float value2, Float value3, Float value4, Integer value5, Integer value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DefaultGcnSectorSourceCharacteristicsViewRecord
     */
    public DefaultGcnSectorSourceCharacteristicsViewRecord() {
        super(DefaultGcnSectorSourceCharacteristicsView.DEFAULT_GCN_SECTOR_SOURCE_CHARACTERISTICS_VIEW);
    }

    /**
     * Create a detached, initialised DefaultGcnSectorSourceCharacteristicsViewRecord
     */
    public DefaultGcnSectorSourceCharacteristicsViewRecord(Integer gcnSectorId, Float heatContent, Float height, Float spread, Integer emissionDiurnalVariationId, Integer particleSizeDistribution) {
        super(DefaultGcnSectorSourceCharacteristicsView.DEFAULT_GCN_SECTOR_SOURCE_CHARACTERISTICS_VIEW);

        set(0, gcnSectorId);
        set(1, heatContent);
        set(2, height);
        set(3, spread);
        set(4, emissionDiurnalVariationId);
        set(5, particleSizeDistribution);
    }
}
