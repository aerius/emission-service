/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.template.tables;


import java.util.Arrays;
import java.util.List;

import nl.overheid.aerius.emissionservice.jooq.template.Keys;
import nl.overheid.aerius.emissionservice.jooq.template.Template;
import nl.overheid.aerius.emissionservice.jooq.template.tables.records.MachineryTypesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * De verschillende soorten werktuigen met naam en sector waarin zij gebruikt 
 * worden.
 * 
 * @file source/database/src/main/sql/template/02_emission_factors/02-tables/machinery_types.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MachineryTypes extends TableImpl<MachineryTypesRecord> {

    private static final long serialVersionUID = -195098526;

    /**
     * The reference instance of <code>template.machinery_types</code>
     */
    public static final MachineryTypes MACHINERY_TYPES = new MachineryTypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MachineryTypesRecord> getRecordType() {
        return MachineryTypesRecord.class;
    }

    /**
     * The column <code>template.machinery_types.machinery_type_id</code>.
     */
    public final TableField<MachineryTypesRecord, Integer> MACHINERY_TYPE_ID = createField(DSL.name("machinery_type_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>template.machinery_types.sector_id</code>.
     */
    public final TableField<MachineryTypesRecord, Integer> SECTOR_ID = createField(DSL.name("sector_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>template.machinery_types.code</code>.
     */
    public final TableField<MachineryTypesRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>template.machinery_types.name</code>.
     */
    public final TableField<MachineryTypesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>template.machinery_types.sort_order</code>.
     */
    public final TableField<MachineryTypesRecord, Integer> SORT_ORDER = createField(DSL.name("sort_order"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>template.machinery_types</code> table reference
     */
    public MachineryTypes() {
        this(DSL.name("machinery_types"), null);
    }

    /**
     * Create an aliased <code>template.machinery_types</code> table reference
     */
    public MachineryTypes(String alias) {
        this(DSL.name(alias), MACHINERY_TYPES);
    }

    /**
     * Create an aliased <code>template.machinery_types</code> table reference
     */
    public MachineryTypes(Name alias) {
        this(alias, MACHINERY_TYPES);
    }

    private MachineryTypes(Name alias, Table<MachineryTypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private MachineryTypes(Name alias, Table<MachineryTypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("De verschillende soorten werktuigen met naam en sector waarin zij gebruikt worden.\r\n\r\n@file source/database/src/main/sql/template/02_emission_factors/02-tables/machinery_types.sql"), TableOptions.table());
    }

    public <O extends Record> MachineryTypes(Table<O> child, ForeignKey<O, MachineryTypesRecord> key) {
        super(child, key, MACHINERY_TYPES);
    }

    @Override
    public Schema getSchema() {
        return Template.TEMPLATE;
    }

    @Override
    public UniqueKey<MachineryTypesRecord> getPrimaryKey() {
        return Keys.MACHINERY_TYPES_PKEY;
    }

    @Override
    public List<UniqueKey<MachineryTypesRecord>> getKeys() {
        return Arrays.<UniqueKey<MachineryTypesRecord>>asList(Keys.MACHINERY_TYPES_PKEY, Keys.MACHINERY_TYPES_CODE_KEY, Keys.MACHINERY_TYPES_SORT_ORDER_KEY);
    }

    @Override
    public List<ForeignKey<MachineryTypesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MachineryTypesRecord, ?>>asList(Keys.MACHINERY_TYPES__MACHINERY_TYPES_FKEY_SECTORS);
    }

    public Sectors sectors() {
        return new Sectors(this, Keys.MACHINERY_TYPES__MACHINERY_TYPES_FKEY_SECTORS);
    }

    @Override
    public MachineryTypes as(String alias) {
        return new MachineryTypes(DSL.name(alias), this);
    }

    @Override
    public MachineryTypes as(Name alias) {
        return new MachineryTypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MachineryTypes rename(String name) {
        return new MachineryTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MachineryTypes rename(Name name) {
        return new MachineryTypes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
