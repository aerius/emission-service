/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.template.tables.records;


import nl.overheid.aerius.emissionservice.jooq.template.tables.ShippingMaritimeCategoryManeuverProperties;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Manoeuvreer-eigenschappen per zeevaart schip.
 * 
 * Maneuver_factor is de factor waarmee de emissie in het beginstuk van de 
 * vaarroute moet worden opgehoogd vanwege het manouvreren van het schip bij 
 * de kade.
 * Maneuver_length is de lengte van de route waarbij deze factor gebruikt 
 * moet worden.
 * 
 * @file source/database/src/main/sql/template/02_emission_factors/02-tables/shipping_maritime.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShippingMaritimeCategoryManeuverPropertiesRecord extends UpdatableRecordImpl<ShippingMaritimeCategoryManeuverPropertiesRecord> implements Record3<Short, Float, Float> {

    private static final long serialVersionUID = 1485729468;

    /**
     * Setter for <code>template.shipping_maritime_category_maneuver_properties.shipping_maritime_category_id</code>.
     */
    public void setShippingMaritimeCategoryId(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>template.shipping_maritime_category_maneuver_properties.shipping_maritime_category_id</code>.
     */
    public Short getShippingMaritimeCategoryId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>template.shipping_maritime_category_maneuver_properties.maneuver_factor</code>.
     */
    public void setManeuverFactor(Float value) {
        set(1, value);
    }

    /**
     * Getter for <code>template.shipping_maritime_category_maneuver_properties.maneuver_factor</code>.
     */
    public Float getManeuverFactor() {
        return (Float) get(1);
    }

    /**
     * Setter for <code>template.shipping_maritime_category_maneuver_properties.maneuver_length</code>.
     */
    public void setManeuverLength(Float value) {
        set(2, value);
    }

    /**
     * Getter for <code>template.shipping_maritime_category_maneuver_properties.maneuver_length</code>.
     */
    public Float getManeuverLength() {
        return (Float) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Short> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Short, Float, Float> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Short, Float, Float> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return ShippingMaritimeCategoryManeuverProperties.SHIPPING_MARITIME_CATEGORY_MANEUVER_PROPERTIES.SHIPPING_MARITIME_CATEGORY_ID;
    }

    @Override
    public Field<Float> field2() {
        return ShippingMaritimeCategoryManeuverProperties.SHIPPING_MARITIME_CATEGORY_MANEUVER_PROPERTIES.MANEUVER_FACTOR;
    }

    @Override
    public Field<Float> field3() {
        return ShippingMaritimeCategoryManeuverProperties.SHIPPING_MARITIME_CATEGORY_MANEUVER_PROPERTIES.MANEUVER_LENGTH;
    }

    @Override
    public Short component1() {
        return getShippingMaritimeCategoryId();
    }

    @Override
    public Float component2() {
        return getManeuverFactor();
    }

    @Override
    public Float component3() {
        return getManeuverLength();
    }

    @Override
    public Short value1() {
        return getShippingMaritimeCategoryId();
    }

    @Override
    public Float value2() {
        return getManeuverFactor();
    }

    @Override
    public Float value3() {
        return getManeuverLength();
    }

    @Override
    public ShippingMaritimeCategoryManeuverPropertiesRecord value1(Short value) {
        setShippingMaritimeCategoryId(value);
        return this;
    }

    @Override
    public ShippingMaritimeCategoryManeuverPropertiesRecord value2(Float value) {
        setManeuverFactor(value);
        return this;
    }

    @Override
    public ShippingMaritimeCategoryManeuverPropertiesRecord value3(Float value) {
        setManeuverLength(value);
        return this;
    }

    @Override
    public ShippingMaritimeCategoryManeuverPropertiesRecord values(Short value1, Float value2, Float value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ShippingMaritimeCategoryManeuverPropertiesRecord
     */
    public ShippingMaritimeCategoryManeuverPropertiesRecord() {
        super(ShippingMaritimeCategoryManeuverProperties.SHIPPING_MARITIME_CATEGORY_MANEUVER_PROPERTIES);
    }

    /**
     * Create a detached, initialised ShippingMaritimeCategoryManeuverPropertiesRecord
     */
    public ShippingMaritimeCategoryManeuverPropertiesRecord(Short shippingMaritimeCategoryId, Float maneuverFactor, Float maneuverLength) {
        super(ShippingMaritimeCategoryManeuverProperties.SHIPPING_MARITIME_CATEGORY_MANEUVER_PROPERTIES);

        set(0, shippingMaritimeCategoryId);
        set(1, maneuverFactor);
        set(2, maneuverLength);
    }
}
