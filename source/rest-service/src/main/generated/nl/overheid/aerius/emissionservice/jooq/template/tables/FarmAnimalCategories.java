/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.template.tables;


import java.util.Arrays;
import java.util.List;

import nl.overheid.aerius.emissionservice.jooq.template.Keys;
import nl.overheid.aerius.emissionservice.jooq.template.Template;
import nl.overheid.aerius.emissionservice.jooq.template.tables.records.FarmAnimalCategoriesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Diercategorieen die voorkomen in de RAV-code lijst. (RAV = Regeling ammoniak 
 * en veehouderij)
 * 
 * @file source/database/src/main/sql/template/02_emission_factors/02-tables/farms.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FarmAnimalCategories extends TableImpl<FarmAnimalCategoriesRecord> {

    private static final long serialVersionUID = -1857580132;

    /**
     * The reference instance of <code>template.farm_animal_categories</code>
     */
    public static final FarmAnimalCategories FARM_ANIMAL_CATEGORIES = new FarmAnimalCategories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FarmAnimalCategoriesRecord> getRecordType() {
        return FarmAnimalCategoriesRecord.class;
    }

    /**
     * The column <code>template.farm_animal_categories.farm_animal_category_id</code>.
     */
    public final TableField<FarmAnimalCategoriesRecord, Integer> FARM_ANIMAL_CATEGORY_ID = createField(DSL.name("farm_animal_category_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>template.farm_animal_categories.code</code>.
     */
    public final TableField<FarmAnimalCategoriesRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>template.farm_animal_categories.name</code>.
     */
    public final TableField<FarmAnimalCategoriesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>template.farm_animal_categories.description</code>.
     */
    public final TableField<FarmAnimalCategoriesRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>template.farm_animal_categories</code> table reference
     */
    public FarmAnimalCategories() {
        this(DSL.name("farm_animal_categories"), null);
    }

    /**
     * Create an aliased <code>template.farm_animal_categories</code> table reference
     */
    public FarmAnimalCategories(String alias) {
        this(DSL.name(alias), FARM_ANIMAL_CATEGORIES);
    }

    /**
     * Create an aliased <code>template.farm_animal_categories</code> table reference
     */
    public FarmAnimalCategories(Name alias) {
        this(alias, FARM_ANIMAL_CATEGORIES);
    }

    private FarmAnimalCategories(Name alias, Table<FarmAnimalCategoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private FarmAnimalCategories(Name alias, Table<FarmAnimalCategoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Diercategorieen die voorkomen in de RAV-code lijst. (RAV = Regeling ammoniak en veehouderij)\r\n\r\n@file source/database/src/main/sql/template/02_emission_factors/02-tables/farms.sql"), TableOptions.table());
    }

    public <O extends Record> FarmAnimalCategories(Table<O> child, ForeignKey<O, FarmAnimalCategoriesRecord> key) {
        super(child, key, FARM_ANIMAL_CATEGORIES);
    }

    @Override
    public Schema getSchema() {
        return Template.TEMPLATE;
    }

    @Override
    public UniqueKey<FarmAnimalCategoriesRecord> getPrimaryKey() {
        return Keys.FARM_ANIMAL_CATEGORIES_PKEY;
    }

    @Override
    public List<UniqueKey<FarmAnimalCategoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<FarmAnimalCategoriesRecord>>asList(Keys.FARM_ANIMAL_CATEGORIES_PKEY, Keys.FARM_ANIMAL_CATEGORIES_CODE_KEY, Keys.FARM_ANIMAL_CATEGORIES_NAME_KEY);
    }

    @Override
    public FarmAnimalCategories as(String alias) {
        return new FarmAnimalCategories(DSL.name(alias), this);
    }

    @Override
    public FarmAnimalCategories as(Name alias) {
        return new FarmAnimalCategories(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmAnimalCategories rename(String name) {
        return new FarmAnimalCategories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmAnimalCategories rename(Name name) {
        return new FarmAnimalCategories(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
