/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.public_.tables.records;


import nl.overheid.aerius.emissionservice.jooq.public_.tables.Datasets;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * De verschillende datasets die beschikbaar zijn.
 * De data voor elke dataset bevindt zich in een eigen database schema.
 * 
 * @file source/database/src/main/sql/datasets/02-tables.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatasetsRecord extends UpdatableRecordImpl<DatasetsRecord> implements Record4<String, String, Boolean, String> {

    private static final long serialVersionUID = -860297006;

    /**
     * Setter for <code>public.datasets.dataset_code</code>.
     */
    public void setDatasetCode(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.datasets.dataset_code</code>.
     */
    public String getDatasetCode() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.datasets.schema_name</code>.
     */
    public void setSchemaName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.datasets.schema_name</code>.
     */
    public String getSchemaName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.datasets.latest</code>.
     */
    public void setLatest(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.datasets.latest</code>.
     */
    public Boolean getLatest() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>public.datasets.description</code>.
     */
    public void setDescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.datasets.description</code>.
     */
    public String getDescription() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Boolean, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, Boolean, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Datasets.DATASETS.DATASET_CODE;
    }

    @Override
    public Field<String> field2() {
        return Datasets.DATASETS.SCHEMA_NAME;
    }

    @Override
    public Field<Boolean> field3() {
        return Datasets.DATASETS.LATEST;
    }

    @Override
    public Field<String> field4() {
        return Datasets.DATASETS.DESCRIPTION;
    }

    @Override
    public String component1() {
        return getDatasetCode();
    }

    @Override
    public String component2() {
        return getSchemaName();
    }

    @Override
    public Boolean component3() {
        return getLatest();
    }

    @Override
    public String component4() {
        return getDescription();
    }

    @Override
    public String value1() {
        return getDatasetCode();
    }

    @Override
    public String value2() {
        return getSchemaName();
    }

    @Override
    public Boolean value3() {
        return getLatest();
    }

    @Override
    public String value4() {
        return getDescription();
    }

    @Override
    public DatasetsRecord value1(String value) {
        setDatasetCode(value);
        return this;
    }

    @Override
    public DatasetsRecord value2(String value) {
        setSchemaName(value);
        return this;
    }

    @Override
    public DatasetsRecord value3(Boolean value) {
        setLatest(value);
        return this;
    }

    @Override
    public DatasetsRecord value4(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public DatasetsRecord values(String value1, String value2, Boolean value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DatasetsRecord
     */
    public DatasetsRecord() {
        super(Datasets.DATASETS);
    }

    /**
     * Create a detached, initialised DatasetsRecord
     */
    public DatasetsRecord(String datasetCode, String schemaName, Boolean latest, String description) {
        super(Datasets.DATASETS);

        set(0, datasetCode);
        set(1, schemaName);
        set(2, latest);
        set(3, description);
    }
}
