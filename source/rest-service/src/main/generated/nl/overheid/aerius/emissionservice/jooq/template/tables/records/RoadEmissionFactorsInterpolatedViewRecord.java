/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.template.tables.records;


import nl.overheid.aerius.emissionservice.jooq.template.tables.RoadEmissionFactorsInterpolatedView;

import org.jooq.Field;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.TableRecordImpl;


/**
 * De wegemissiefactoren (road_category_emission_factors) waarvan alle ontbrekende 
 * tussenliggende rekenjaren worden geinterpoleerd.
 * 
 * @file source/database/src/main/sql/template/02_emission_factors/04-views/roads.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoadEmissionFactorsInterpolatedViewRecord extends TableRecordImpl<RoadEmissionFactorsInterpolatedViewRecord> implements Record6<Integer, Integer, Short, Short, Double, Double> {

    private static final long serialVersionUID = -1061497831;

    /**
     * Setter for <code>template.road_emission_factors_interpolated_view.road_category_id</code>.
     */
    public void setRoadCategoryId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>template.road_emission_factors_interpolated_view.road_category_id</code>.
     */
    public Integer getRoadCategoryId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>template.road_emission_factors_interpolated_view.road_speed_profile_id</code>.
     */
    public void setRoadSpeedProfileId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>template.road_emission_factors_interpolated_view.road_speed_profile_id</code>.
     */
    public Integer getRoadSpeedProfileId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>template.road_emission_factors_interpolated_view.year</code>.
     */
    public void setYear(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>template.road_emission_factors_interpolated_view.year</code>.
     */
    public Short getYear() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>template.road_emission_factors_interpolated_view.substance_id</code>.
     */
    public void setSubstanceId(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>template.road_emission_factors_interpolated_view.substance_id</code>.
     */
    public Short getSubstanceId() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>template.road_emission_factors_interpolated_view.emission_factor</code>.
     */
    public void setEmissionFactor(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>template.road_emission_factors_interpolated_view.emission_factor</code>.
     */
    public Double getEmissionFactor() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>template.road_emission_factors_interpolated_view.stagnated_emission_factor</code>.
     */
    public void setStagnatedEmissionFactor(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>template.road_emission_factors_interpolated_view.stagnated_emission_factor</code>.
     */
    public Double getStagnatedEmissionFactor() {
        return (Double) get(5);
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Short, Short, Double, Double> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, Integer, Short, Short, Double, Double> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return RoadEmissionFactorsInterpolatedView.ROAD_EMISSION_FACTORS_INTERPOLATED_VIEW.ROAD_CATEGORY_ID;
    }

    @Override
    public Field<Integer> field2() {
        return RoadEmissionFactorsInterpolatedView.ROAD_EMISSION_FACTORS_INTERPOLATED_VIEW.ROAD_SPEED_PROFILE_ID;
    }

    @Override
    public Field<Short> field3() {
        return RoadEmissionFactorsInterpolatedView.ROAD_EMISSION_FACTORS_INTERPOLATED_VIEW.YEAR;
    }

    @Override
    public Field<Short> field4() {
        return RoadEmissionFactorsInterpolatedView.ROAD_EMISSION_FACTORS_INTERPOLATED_VIEW.SUBSTANCE_ID;
    }

    @Override
    public Field<Double> field5() {
        return RoadEmissionFactorsInterpolatedView.ROAD_EMISSION_FACTORS_INTERPOLATED_VIEW.EMISSION_FACTOR;
    }

    @Override
    public Field<Double> field6() {
        return RoadEmissionFactorsInterpolatedView.ROAD_EMISSION_FACTORS_INTERPOLATED_VIEW.STAGNATED_EMISSION_FACTOR;
    }

    @Override
    public Integer component1() {
        return getRoadCategoryId();
    }

    @Override
    public Integer component2() {
        return getRoadSpeedProfileId();
    }

    @Override
    public Short component3() {
        return getYear();
    }

    @Override
    public Short component4() {
        return getSubstanceId();
    }

    @Override
    public Double component5() {
        return getEmissionFactor();
    }

    @Override
    public Double component6() {
        return getStagnatedEmissionFactor();
    }

    @Override
    public Integer value1() {
        return getRoadCategoryId();
    }

    @Override
    public Integer value2() {
        return getRoadSpeedProfileId();
    }

    @Override
    public Short value3() {
        return getYear();
    }

    @Override
    public Short value4() {
        return getSubstanceId();
    }

    @Override
    public Double value5() {
        return getEmissionFactor();
    }

    @Override
    public Double value6() {
        return getStagnatedEmissionFactor();
    }

    @Override
    public RoadEmissionFactorsInterpolatedViewRecord value1(Integer value) {
        setRoadCategoryId(value);
        return this;
    }

    @Override
    public RoadEmissionFactorsInterpolatedViewRecord value2(Integer value) {
        setRoadSpeedProfileId(value);
        return this;
    }

    @Override
    public RoadEmissionFactorsInterpolatedViewRecord value3(Short value) {
        setYear(value);
        return this;
    }

    @Override
    public RoadEmissionFactorsInterpolatedViewRecord value4(Short value) {
        setSubstanceId(value);
        return this;
    }

    @Override
    public RoadEmissionFactorsInterpolatedViewRecord value5(Double value) {
        setEmissionFactor(value);
        return this;
    }

    @Override
    public RoadEmissionFactorsInterpolatedViewRecord value6(Double value) {
        setStagnatedEmissionFactor(value);
        return this;
    }

    @Override
    public RoadEmissionFactorsInterpolatedViewRecord values(Integer value1, Integer value2, Short value3, Short value4, Double value5, Double value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RoadEmissionFactorsInterpolatedViewRecord
     */
    public RoadEmissionFactorsInterpolatedViewRecord() {
        super(RoadEmissionFactorsInterpolatedView.ROAD_EMISSION_FACTORS_INTERPOLATED_VIEW);
    }

    /**
     * Create a detached, initialised RoadEmissionFactorsInterpolatedViewRecord
     */
    public RoadEmissionFactorsInterpolatedViewRecord(Integer roadCategoryId, Integer roadSpeedProfileId, Short year, Short substanceId, Double emissionFactor, Double stagnatedEmissionFactor) {
        super(RoadEmissionFactorsInterpolatedView.ROAD_EMISSION_FACTORS_INTERPOLATED_VIEW);

        set(0, roadCategoryId);
        set(1, roadSpeedProfileId);
        set(2, year);
        set(3, substanceId);
        set(4, emissionFactor);
        set(5, stagnatedEmissionFactor);
    }
}
