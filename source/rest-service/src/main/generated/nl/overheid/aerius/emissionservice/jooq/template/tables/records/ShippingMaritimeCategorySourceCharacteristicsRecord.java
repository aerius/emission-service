/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.template.tables.records;


import nl.overheid.aerius.emissionservice.jooq.public_.enums.ShippingMovementType;
import nl.overheid.aerius.emissionservice.jooq.template.tables.ShippingMaritimeCategorySourceCharacteristics;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * De OPS karakteristieken per scheepstype.
 * 
 * De warmteinhoud (heat_content) in deze tabel overschrijft verder de warmteinhoud 
 * verkregen via de sector van het scheepstype.
 * Dit omdat de warmteinhoud afhankelijk is van de scheepstype en beweegtype.
 * 
 * De hoogte gedefinieerd in deze tabel overschrijft daarbij de hoogte verkregen 
 * via de sector.
 * Dit omdat de hoogte varieert per tonnage-reeks en beweeg type, niet alleen 
 * per sector.
 * Spreiding is verder weer een karakteristiek die sterk samenhangt per hoogte, 
 * en is daarom ook meegenomen in deze tabel.
 * 
 * @file source/database/src/main/sql/template/02_emission_factors/02-tables/shipping_maritime.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShippingMaritimeCategorySourceCharacteristicsRecord extends UpdatableRecordImpl<ShippingMaritimeCategorySourceCharacteristicsRecord> implements Record7<Short, Short, ShippingMovementType, Integer, Float, Float, Float> {

    private static final long serialVersionUID = 1576148542;

    /**
     * Setter for <code>template.shipping_maritime_category_source_characteristics.shipping_maritime_category_id</code>.
     */
    public void setShippingMaritimeCategoryId(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>template.shipping_maritime_category_source_characteristics.shipping_maritime_category_id</code>.
     */
    public Short getShippingMaritimeCategoryId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>template.shipping_maritime_category_source_characteristics.year</code>.
     */
    public void setYear(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>template.shipping_maritime_category_source_characteristics.year</code>.
     */
    public Short getYear() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>template.shipping_maritime_category_source_characteristics.movement_type</code>.
     */
    public void setMovementType(ShippingMovementType value) {
        set(2, value);
    }

    /**
     * Getter for <code>template.shipping_maritime_category_source_characteristics.movement_type</code>.
     */
    public ShippingMovementType getMovementType() {
        return (ShippingMovementType) get(2);
    }

    /**
     * Setter for <code>template.shipping_maritime_category_source_characteristics.gcn_sector_id</code>.
     */
    public void setGcnSectorId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>template.shipping_maritime_category_source_characteristics.gcn_sector_id</code>.
     */
    public Integer getGcnSectorId() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>template.shipping_maritime_category_source_characteristics.heat_content</code>.
     */
    public void setHeatContent(Float value) {
        set(4, value);
    }

    /**
     * Getter for <code>template.shipping_maritime_category_source_characteristics.heat_content</code>.
     */
    public Float getHeatContent() {
        return (Float) get(4);
    }

    /**
     * Setter for <code>template.shipping_maritime_category_source_characteristics.height</code>.
     */
    public void setHeight(Float value) {
        set(5, value);
    }

    /**
     * Getter for <code>template.shipping_maritime_category_source_characteristics.height</code>.
     */
    public Float getHeight() {
        return (Float) get(5);
    }

    /**
     * Setter for <code>template.shipping_maritime_category_source_characteristics.spread</code>.
     */
    public void setSpread(Float value) {
        set(6, value);
    }

    /**
     * Getter for <code>template.shipping_maritime_category_source_characteristics.spread</code>.
     */
    public Float getSpread() {
        return (Float) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<Short, ShippingMovementType, Short> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Short, Short, ShippingMovementType, Integer, Float, Float, Float> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Short, Short, ShippingMovementType, Integer, Float, Float, Float> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return ShippingMaritimeCategorySourceCharacteristics.SHIPPING_MARITIME_CATEGORY_SOURCE_CHARACTERISTICS.SHIPPING_MARITIME_CATEGORY_ID;
    }

    @Override
    public Field<Short> field2() {
        return ShippingMaritimeCategorySourceCharacteristics.SHIPPING_MARITIME_CATEGORY_SOURCE_CHARACTERISTICS.YEAR;
    }

    @Override
    public Field<ShippingMovementType> field3() {
        return ShippingMaritimeCategorySourceCharacteristics.SHIPPING_MARITIME_CATEGORY_SOURCE_CHARACTERISTICS.MOVEMENT_TYPE;
    }

    @Override
    public Field<Integer> field4() {
        return ShippingMaritimeCategorySourceCharacteristics.SHIPPING_MARITIME_CATEGORY_SOURCE_CHARACTERISTICS.GCN_SECTOR_ID;
    }

    @Override
    public Field<Float> field5() {
        return ShippingMaritimeCategorySourceCharacteristics.SHIPPING_MARITIME_CATEGORY_SOURCE_CHARACTERISTICS.HEAT_CONTENT;
    }

    @Override
    public Field<Float> field6() {
        return ShippingMaritimeCategorySourceCharacteristics.SHIPPING_MARITIME_CATEGORY_SOURCE_CHARACTERISTICS.HEIGHT;
    }

    @Override
    public Field<Float> field7() {
        return ShippingMaritimeCategorySourceCharacteristics.SHIPPING_MARITIME_CATEGORY_SOURCE_CHARACTERISTICS.SPREAD;
    }

    @Override
    public Short component1() {
        return getShippingMaritimeCategoryId();
    }

    @Override
    public Short component2() {
        return getYear();
    }

    @Override
    public ShippingMovementType component3() {
        return getMovementType();
    }

    @Override
    public Integer component4() {
        return getGcnSectorId();
    }

    @Override
    public Float component5() {
        return getHeatContent();
    }

    @Override
    public Float component6() {
        return getHeight();
    }

    @Override
    public Float component7() {
        return getSpread();
    }

    @Override
    public Short value1() {
        return getShippingMaritimeCategoryId();
    }

    @Override
    public Short value2() {
        return getYear();
    }

    @Override
    public ShippingMovementType value3() {
        return getMovementType();
    }

    @Override
    public Integer value4() {
        return getGcnSectorId();
    }

    @Override
    public Float value5() {
        return getHeatContent();
    }

    @Override
    public Float value6() {
        return getHeight();
    }

    @Override
    public Float value7() {
        return getSpread();
    }

    @Override
    public ShippingMaritimeCategorySourceCharacteristicsRecord value1(Short value) {
        setShippingMaritimeCategoryId(value);
        return this;
    }

    @Override
    public ShippingMaritimeCategorySourceCharacteristicsRecord value2(Short value) {
        setYear(value);
        return this;
    }

    @Override
    public ShippingMaritimeCategorySourceCharacteristicsRecord value3(ShippingMovementType value) {
        setMovementType(value);
        return this;
    }

    @Override
    public ShippingMaritimeCategorySourceCharacteristicsRecord value4(Integer value) {
        setGcnSectorId(value);
        return this;
    }

    @Override
    public ShippingMaritimeCategorySourceCharacteristicsRecord value5(Float value) {
        setHeatContent(value);
        return this;
    }

    @Override
    public ShippingMaritimeCategorySourceCharacteristicsRecord value6(Float value) {
        setHeight(value);
        return this;
    }

    @Override
    public ShippingMaritimeCategorySourceCharacteristicsRecord value7(Float value) {
        setSpread(value);
        return this;
    }

    @Override
    public ShippingMaritimeCategorySourceCharacteristicsRecord values(Short value1, Short value2, ShippingMovementType value3, Integer value4, Float value5, Float value6, Float value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ShippingMaritimeCategorySourceCharacteristicsRecord
     */
    public ShippingMaritimeCategorySourceCharacteristicsRecord() {
        super(ShippingMaritimeCategorySourceCharacteristics.SHIPPING_MARITIME_CATEGORY_SOURCE_CHARACTERISTICS);
    }

    /**
     * Create a detached, initialised ShippingMaritimeCategorySourceCharacteristicsRecord
     */
    public ShippingMaritimeCategorySourceCharacteristicsRecord(Short shippingMaritimeCategoryId, Short year, ShippingMovementType movementType, Integer gcnSectorId, Float heatContent, Float height, Float spread) {
        super(ShippingMaritimeCategorySourceCharacteristics.SHIPPING_MARITIME_CATEGORY_SOURCE_CHARACTERISTICS);

        set(0, shippingMaritimeCategoryId);
        set(1, year);
        set(2, movementType);
        set(3, gcnSectorId);
        set(4, heatContent);
        set(5, height);
        set(6, spread);
    }
}
