/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.template.tables.records;


import nl.overheid.aerius.emissionservice.jooq.template.tables.MobileSourceOffRoadCategoryEmissionFactors;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * De emissie factoren (werkend en stationair) voor stageklassen.
 * 
 * Het veld emission_factor_idle is leeg indien er geen stationaire emissieberekening 
 * mogelijk is voor een stageklasse. Er bevindt zich dan ook geen bijbehorend 
 * record in {@see mobile_source_off_road_category_idle_properties}.
 * 
 * @column emission_factor_working EFW_plb, emissie factor werkend per liter 
 * brandstof (g/l)
 * @column emission_factor_idle EFS_plci, emissie factor stationair per uur 
 * per liter cilinder-inhoud (g/l/uur)
 * 
 * @file source/database/src/main/sql/template/02_emission_factors/02-tables/mobile_sources.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MobileSourceOffRoadCategoryEmissionFactorsRecord extends UpdatableRecordImpl<MobileSourceOffRoadCategoryEmissionFactorsRecord> implements Record4<Short, Short, Float, Float> {

    private static final long serialVersionUID = 1041101986;

    /**
     * Setter for <code>template.mobile_source_off_road_category_emission_factors.mobile_source_off_road_category_id</code>.
     */
    public void setMobileSourceOffRoadCategoryId(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>template.mobile_source_off_road_category_emission_factors.mobile_source_off_road_category_id</code>.
     */
    public Short getMobileSourceOffRoadCategoryId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>template.mobile_source_off_road_category_emission_factors.substance_id</code>.
     */
    public void setSubstanceId(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>template.mobile_source_off_road_category_emission_factors.substance_id</code>.
     */
    public Short getSubstanceId() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>template.mobile_source_off_road_category_emission_factors.emission_factor_working</code>.
     */
    public void setEmissionFactorWorking(Float value) {
        set(2, value);
    }

    /**
     * Getter for <code>template.mobile_source_off_road_category_emission_factors.emission_factor_working</code>.
     */
    public Float getEmissionFactorWorking() {
        return (Float) get(2);
    }

    /**
     * Setter for <code>template.mobile_source_off_road_category_emission_factors.emission_factor_idle</code>.
     */
    public void setEmissionFactorIdle(Float value) {
        set(3, value);
    }

    /**
     * Getter for <code>template.mobile_source_off_road_category_emission_factors.emission_factor_idle</code>.
     */
    public Float getEmissionFactorIdle() {
        return (Float) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Short, Short> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Short, Short, Float, Float> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Short, Short, Float, Float> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return MobileSourceOffRoadCategoryEmissionFactors.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS.MOBILE_SOURCE_OFF_ROAD_CATEGORY_ID;
    }

    @Override
    public Field<Short> field2() {
        return MobileSourceOffRoadCategoryEmissionFactors.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS.SUBSTANCE_ID;
    }

    @Override
    public Field<Float> field3() {
        return MobileSourceOffRoadCategoryEmissionFactors.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS.EMISSION_FACTOR_WORKING;
    }

    @Override
    public Field<Float> field4() {
        return MobileSourceOffRoadCategoryEmissionFactors.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS.EMISSION_FACTOR_IDLE;
    }

    @Override
    public Short component1() {
        return getMobileSourceOffRoadCategoryId();
    }

    @Override
    public Short component2() {
        return getSubstanceId();
    }

    @Override
    public Float component3() {
        return getEmissionFactorWorking();
    }

    @Override
    public Float component4() {
        return getEmissionFactorIdle();
    }

    @Override
    public Short value1() {
        return getMobileSourceOffRoadCategoryId();
    }

    @Override
    public Short value2() {
        return getSubstanceId();
    }

    @Override
    public Float value3() {
        return getEmissionFactorWorking();
    }

    @Override
    public Float value4() {
        return getEmissionFactorIdle();
    }

    @Override
    public MobileSourceOffRoadCategoryEmissionFactorsRecord value1(Short value) {
        setMobileSourceOffRoadCategoryId(value);
        return this;
    }

    @Override
    public MobileSourceOffRoadCategoryEmissionFactorsRecord value2(Short value) {
        setSubstanceId(value);
        return this;
    }

    @Override
    public MobileSourceOffRoadCategoryEmissionFactorsRecord value3(Float value) {
        setEmissionFactorWorking(value);
        return this;
    }

    @Override
    public MobileSourceOffRoadCategoryEmissionFactorsRecord value4(Float value) {
        setEmissionFactorIdle(value);
        return this;
    }

    @Override
    public MobileSourceOffRoadCategoryEmissionFactorsRecord values(Short value1, Short value2, Float value3, Float value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MobileSourceOffRoadCategoryEmissionFactorsRecord
     */
    public MobileSourceOffRoadCategoryEmissionFactorsRecord() {
        super(MobileSourceOffRoadCategoryEmissionFactors.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS);
    }

    /**
     * Create a detached, initialised MobileSourceOffRoadCategoryEmissionFactorsRecord
     */
    public MobileSourceOffRoadCategoryEmissionFactorsRecord(Short mobileSourceOffRoadCategoryId, Short substanceId, Float emissionFactorWorking, Float emissionFactorIdle) {
        super(MobileSourceOffRoadCategoryEmissionFactors.MOBILE_SOURCE_OFF_ROAD_CATEGORY_EMISSION_FACTORS);

        set(0, mobileSourceOffRoadCategoryId);
        set(1, substanceId);
        set(2, emissionFactorWorking);
        set(3, emissionFactorIdle);
    }
}
