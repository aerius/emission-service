/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.template.tables;


import java.util.Arrays;
import java.util.List;

import nl.overheid.aerius.emissionservice.jooq.public_.enums.ShippingInlandLadenState;
import nl.overheid.aerius.emissionservice.jooq.public_.tables.Substances;
import nl.overheid.aerius.emissionservice.jooq.template.Keys;
import nl.overheid.aerius.emissionservice.jooq.template.Template;
import nl.overheid.aerius.emissionservice.jooq.template.tables.records.ShippingInlandCategoryEmissionFactorsDockedRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * De emissie factoren voor verschillende soorten stilliggende schepen.
 * Deze kenmerken zijn uniek per scheepstype, ladingstoestand en stof.
 * 
 * Hierin worden de emissiefactoren per jaar weergegeven, emission_factor 
 * is de emissie factor tijdens varen (in kg/(kilometer * aantal schepen)) 
 * bij een bepaalde snelheid.
 * 
 * @file source/database/src/main/sql/template/02_emission_factors/02-tables/shipping_inland.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShippingInlandCategoryEmissionFactorsDocked extends TableImpl<ShippingInlandCategoryEmissionFactorsDockedRecord> {

    private static final long serialVersionUID = 1942983516;

    /**
     * The reference instance of <code>template.shipping_inland_category_emission_factors_docked</code>
     */
    public static final ShippingInlandCategoryEmissionFactorsDocked SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED = new ShippingInlandCategoryEmissionFactorsDocked();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShippingInlandCategoryEmissionFactorsDockedRecord> getRecordType() {
        return ShippingInlandCategoryEmissionFactorsDockedRecord.class;
    }

    /**
     * The column <code>template.shipping_inland_category_emission_factors_docked.shipping_inland_category_id</code>.
     */
    public final TableField<ShippingInlandCategoryEmissionFactorsDockedRecord, Short> SHIPPING_INLAND_CATEGORY_ID = createField(DSL.name("shipping_inland_category_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>template.shipping_inland_category_emission_factors_docked.laden_state</code>.
     */
    public final TableField<ShippingInlandCategoryEmissionFactorsDockedRecord, ShippingInlandLadenState> LADEN_STATE = createField(DSL.name("laden_state"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(nl.overheid.aerius.emissionservice.jooq.public_.enums.ShippingInlandLadenState.class), this, "");

    /**
     * The column <code>template.shipping_inland_category_emission_factors_docked.year</code>.
     */
    public final TableField<ShippingInlandCategoryEmissionFactorsDockedRecord, Short> YEAR = createField(DSL.name("year"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>template.shipping_inland_category_emission_factors_docked.substance_id</code>.
     */
    public final TableField<ShippingInlandCategoryEmissionFactorsDockedRecord, Short> SUBSTANCE_ID = createField(DSL.name("substance_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>template.shipping_inland_category_emission_factors_docked.emission_factor</code>.
     */
    public final TableField<ShippingInlandCategoryEmissionFactorsDockedRecord, Float> EMISSION_FACTOR = createField(DSL.name("emission_factor"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * Create a <code>template.shipping_inland_category_emission_factors_docked</code> table reference
     */
    public ShippingInlandCategoryEmissionFactorsDocked() {
        this(DSL.name("shipping_inland_category_emission_factors_docked"), null);
    }

    /**
     * Create an aliased <code>template.shipping_inland_category_emission_factors_docked</code> table reference
     */
    public ShippingInlandCategoryEmissionFactorsDocked(String alias) {
        this(DSL.name(alias), SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED);
    }

    /**
     * Create an aliased <code>template.shipping_inland_category_emission_factors_docked</code> table reference
     */
    public ShippingInlandCategoryEmissionFactorsDocked(Name alias) {
        this(alias, SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED);
    }

    private ShippingInlandCategoryEmissionFactorsDocked(Name alias, Table<ShippingInlandCategoryEmissionFactorsDockedRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShippingInlandCategoryEmissionFactorsDocked(Name alias, Table<ShippingInlandCategoryEmissionFactorsDockedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("De emissie factoren voor verschillende soorten stilliggende schepen.\r\nDeze kenmerken zijn uniek per scheepstype, ladingstoestand en stof.\r\n\r\nHierin worden de emissiefactoren per jaar weergegeven, emission_factor is de emissie factor tijdens varen (in kg/(kilometer * aantal schepen)) bij een bepaalde snelheid.\r\n\r\n@file source/database/src/main/sql/template/02_emission_factors/02-tables/shipping_inland.sql"), TableOptions.table());
    }

    public <O extends Record> ShippingInlandCategoryEmissionFactorsDocked(Table<O> child, ForeignKey<O, ShippingInlandCategoryEmissionFactorsDockedRecord> key) {
        super(child, key, SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED);
    }

    @Override
    public Schema getSchema() {
        return Template.TEMPLATE;
    }

    @Override
    public UniqueKey<ShippingInlandCategoryEmissionFactorsDockedRecord> getPrimaryKey() {
        return Keys.SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED_PKEY;
    }

    @Override
    public List<UniqueKey<ShippingInlandCategoryEmissionFactorsDockedRecord>> getKeys() {
        return Arrays.<UniqueKey<ShippingInlandCategoryEmissionFactorsDockedRecord>>asList(Keys.SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED_PKEY);
    }

    @Override
    public List<ForeignKey<ShippingInlandCategoryEmissionFactorsDockedRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ShippingInlandCategoryEmissionFactorsDockedRecord, ?>>asList(Keys.SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED__SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED_FKEY_CATEGORIE, Keys.SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED__SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED_FKEY_SUBSTANCE);
    }

    public ShippingInlandCategories shippingInlandCategories() {
        return new ShippingInlandCategories(this, Keys.SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED__SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED_FKEY_CATEGORIE);
    }

    public Substances substances() {
        return new Substances(this, Keys.SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED__SHIPPING_INLAND_CATEGORY_EMISSION_FACTORS_DOCKED_FKEY_SUBSTANCE);
    }

    @Override
    public ShippingInlandCategoryEmissionFactorsDocked as(String alias) {
        return new ShippingInlandCategoryEmissionFactorsDocked(DSL.name(alias), this);
    }

    @Override
    public ShippingInlandCategoryEmissionFactorsDocked as(Name alias) {
        return new ShippingInlandCategoryEmissionFactorsDocked(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingInlandCategoryEmissionFactorsDocked rename(String name) {
        return new ShippingInlandCategoryEmissionFactorsDocked(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingInlandCategoryEmissionFactorsDocked rename(Name name) {
        return new ShippingInlandCategoryEmissionFactorsDocked(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Short, ShippingInlandLadenState, Short, Short, Float> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
