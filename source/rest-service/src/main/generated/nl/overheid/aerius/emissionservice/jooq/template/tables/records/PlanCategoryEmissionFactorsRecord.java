/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.template.tables.records;


import nl.overheid.aerius.emissionservice.jooq.template.tables.PlanCategoryEmissionFactors;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * De emissie factoren voor verschillende soorten plannen.
 * De emissie factoren zijn hier afhankelijk van de category_unit van de bijbehorende 
 * plan_category.
 * 
 * @file source/database/src/main/sql/template/02_emission_factors/02-tables/plans.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlanCategoryEmissionFactorsRecord extends UpdatableRecordImpl<PlanCategoryEmissionFactorsRecord> implements Record3<Short, Short, Float> {

    private static final long serialVersionUID = -96940304;

    /**
     * Setter for <code>template.plan_category_emission_factors.plan_category_id</code>.
     */
    public void setPlanCategoryId(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>template.plan_category_emission_factors.plan_category_id</code>.
     */
    public Short getPlanCategoryId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>template.plan_category_emission_factors.substance_id</code>.
     */
    public void setSubstanceId(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>template.plan_category_emission_factors.substance_id</code>.
     */
    public Short getSubstanceId() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>template.plan_category_emission_factors.emission_factor</code>.
     */
    public void setEmissionFactor(Float value) {
        set(2, value);
    }

    /**
     * Getter for <code>template.plan_category_emission_factors.emission_factor</code>.
     */
    public Float getEmissionFactor() {
        return (Float) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Short, Short> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Short, Short, Float> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Short, Short, Float> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return PlanCategoryEmissionFactors.PLAN_CATEGORY_EMISSION_FACTORS.PLAN_CATEGORY_ID;
    }

    @Override
    public Field<Short> field2() {
        return PlanCategoryEmissionFactors.PLAN_CATEGORY_EMISSION_FACTORS.SUBSTANCE_ID;
    }

    @Override
    public Field<Float> field3() {
        return PlanCategoryEmissionFactors.PLAN_CATEGORY_EMISSION_FACTORS.EMISSION_FACTOR;
    }

    @Override
    public Short component1() {
        return getPlanCategoryId();
    }

    @Override
    public Short component2() {
        return getSubstanceId();
    }

    @Override
    public Float component3() {
        return getEmissionFactor();
    }

    @Override
    public Short value1() {
        return getPlanCategoryId();
    }

    @Override
    public Short value2() {
        return getSubstanceId();
    }

    @Override
    public Float value3() {
        return getEmissionFactor();
    }

    @Override
    public PlanCategoryEmissionFactorsRecord value1(Short value) {
        setPlanCategoryId(value);
        return this;
    }

    @Override
    public PlanCategoryEmissionFactorsRecord value2(Short value) {
        setSubstanceId(value);
        return this;
    }

    @Override
    public PlanCategoryEmissionFactorsRecord value3(Float value) {
        setEmissionFactor(value);
        return this;
    }

    @Override
    public PlanCategoryEmissionFactorsRecord values(Short value1, Short value2, Float value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PlanCategoryEmissionFactorsRecord
     */
    public PlanCategoryEmissionFactorsRecord() {
        super(PlanCategoryEmissionFactors.PLAN_CATEGORY_EMISSION_FACTORS);
    }

    /**
     * Create a detached, initialised PlanCategoryEmissionFactorsRecord
     */
    public PlanCategoryEmissionFactorsRecord(Short planCategoryId, Short substanceId, Float emissionFactor) {
        super(PlanCategoryEmissionFactors.PLAN_CATEGORY_EMISSION_FACTORS);

        set(0, planCategoryId);
        set(1, substanceId);
        set(2, emissionFactor);
    }
}
