/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.template.tables.records;


import nl.overheid.aerius.emissionservice.jooq.template.tables.SectorsMainGcnSector;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Koppeltabel om voor de sectoren (zonder (sub)categorieen) aan te geven 
 * aan welke hoofd-GCN-sector deze bronnen gekoppeld kunnen worden.
 * 
 * @file source/database/src/main/sql/template/01_sectors/02-tables/01-sectors.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SectorsMainGcnSectorRecord extends UpdatableRecordImpl<SectorsMainGcnSectorRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = 1625537611;

    /**
     * Setter for <code>template.sectors_main_gcn_sector.sector_id</code>.
     */
    public void setSectorId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>template.sectors_main_gcn_sector.sector_id</code>.
     */
    public Integer getSectorId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>template.sectors_main_gcn_sector.gcn_sector_id</code>.
     */
    public void setGcnSectorId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>template.sectors_main_gcn_sector.gcn_sector_id</code>.
     */
    public Integer getGcnSectorId() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return SectorsMainGcnSector.SECTORS_MAIN_GCN_SECTOR.SECTOR_ID;
    }

    @Override
    public Field<Integer> field2() {
        return SectorsMainGcnSector.SECTORS_MAIN_GCN_SECTOR.GCN_SECTOR_ID;
    }

    @Override
    public Integer component1() {
        return getSectorId();
    }

    @Override
    public Integer component2() {
        return getGcnSectorId();
    }

    @Override
    public Integer value1() {
        return getSectorId();
    }

    @Override
    public Integer value2() {
        return getGcnSectorId();
    }

    @Override
    public SectorsMainGcnSectorRecord value1(Integer value) {
        setSectorId(value);
        return this;
    }

    @Override
    public SectorsMainGcnSectorRecord value2(Integer value) {
        setGcnSectorId(value);
        return this;
    }

    @Override
    public SectorsMainGcnSectorRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SectorsMainGcnSectorRecord
     */
    public SectorsMainGcnSectorRecord() {
        super(SectorsMainGcnSector.SECTORS_MAIN_GCN_SECTOR);
    }

    /**
     * Create a detached, initialised SectorsMainGcnSectorRecord
     */
    public SectorsMainGcnSectorRecord(Integer sectorId, Integer gcnSectorId) {
        super(SectorsMainGcnSector.SECTORS_MAIN_GCN_SECTOR);

        set(0, sectorId);
        set(1, gcnSectorId);
    }
}
