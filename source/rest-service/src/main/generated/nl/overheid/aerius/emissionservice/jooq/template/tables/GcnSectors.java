/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.template.tables;


import java.util.Arrays;
import java.util.List;

import nl.overheid.aerius.emissionservice.jooq.template.Keys;
import nl.overheid.aerius.emissionservice.jooq.template.Template;
import nl.overheid.aerius.emissionservice.jooq.template.tables.records.GcnSectorsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Sectorindeling van het RIVM.
 * Elke GCN-sector is gekoppeld aan een AERIUS-sector. Hierdoor weten we aan 
 * welke AERIUS-sector de depositie van de RIVM-bronnen toegekend moet worden.
 * 
 * 
 * @file source/database/src/main/sql/template/01_sectors/02-tables/01-sectors.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GcnSectors extends TableImpl<GcnSectorsRecord> {

    private static final long serialVersionUID = 849701622;

    /**
     * The reference instance of <code>template.gcn_sectors</code>
     */
    public static final GcnSectors GCN_SECTORS = new GcnSectors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GcnSectorsRecord> getRecordType() {
        return GcnSectorsRecord.class;
    }

    /**
     * The column <code>template.gcn_sectors.gcn_sector_id</code>.
     */
    public final TableField<GcnSectorsRecord, Integer> GCN_SECTOR_ID = createField(DSL.name("gcn_sector_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>template.gcn_sectors.sector_id</code>.
     */
    public final TableField<GcnSectorsRecord, Integer> SECTOR_ID = createField(DSL.name("sector_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>template.gcn_sectors.description</code>.
     */
    public final TableField<GcnSectorsRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>template.gcn_sectors</code> table reference
     */
    public GcnSectors() {
        this(DSL.name("gcn_sectors"), null);
    }

    /**
     * Create an aliased <code>template.gcn_sectors</code> table reference
     */
    public GcnSectors(String alias) {
        this(DSL.name(alias), GCN_SECTORS);
    }

    /**
     * Create an aliased <code>template.gcn_sectors</code> table reference
     */
    public GcnSectors(Name alias) {
        this(alias, GCN_SECTORS);
    }

    private GcnSectors(Name alias, Table<GcnSectorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private GcnSectors(Name alias, Table<GcnSectorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Sectorindeling van het RIVM.\r\nElke GCN-sector is gekoppeld aan een AERIUS-sector. Hierdoor weten we aan welke AERIUS-sector de depositie van de RIVM-bronnen toegekend moet worden.\r\n\r\n@file source/database/src/main/sql/template/01_sectors/02-tables/01-sectors.sql"), TableOptions.table());
    }

    public <O extends Record> GcnSectors(Table<O> child, ForeignKey<O, GcnSectorsRecord> key) {
        super(child, key, GCN_SECTORS);
    }

    @Override
    public Schema getSchema() {
        return Template.TEMPLATE;
    }

    @Override
    public UniqueKey<GcnSectorsRecord> getPrimaryKey() {
        return Keys.GCN_SECTORS_PKEY;
    }

    @Override
    public List<UniqueKey<GcnSectorsRecord>> getKeys() {
        return Arrays.<UniqueKey<GcnSectorsRecord>>asList(Keys.GCN_SECTORS_PKEY);
    }

    @Override
    public List<ForeignKey<GcnSectorsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GcnSectorsRecord, ?>>asList(Keys.GCN_SECTORS__GCN_SECTORS_FKEY_SECTORS);
    }

    public Sectors sectors() {
        return new Sectors(this, Keys.GCN_SECTORS__GCN_SECTORS_FKEY_SECTORS);
    }

    @Override
    public GcnSectors as(String alias) {
        return new GcnSectors(DSL.name(alias), this);
    }

    @Override
    public GcnSectors as(Name alias) {
        return new GcnSectors(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GcnSectors rename(String name) {
        return new GcnSectors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GcnSectors rename(Name name) {
        return new GcnSectors(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
