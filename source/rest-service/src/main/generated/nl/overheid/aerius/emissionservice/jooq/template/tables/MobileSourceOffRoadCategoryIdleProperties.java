/*
 * This file is generated by jOOQ.
 */
package nl.overheid.aerius.emissionservice.jooq.template.tables;


import java.util.Arrays;
import java.util.List;

import nl.overheid.aerius.emissionservice.jooq.template.Keys;
import nl.overheid.aerius.emissionservice.jooq.template.Template;
import nl.overheid.aerius.emissionservice.jooq.template.tables.records.MobileSourceOffRoadCategoryIdlePropertiesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Eigenschappen per stageklasse die nodig zijn om de stationaire emissie 
 * te berekenen (onafhankelijk van de stof).
 * 
 * Niet voor alle stageklasses zijn stationaire emissieberekeningen mogelijk, 
 * in dat geval ontbreekt het record.
 * 
 * @column power_min Vmin, minimaal vermogen binnen de opgegeven stage-klasse 
 * (KW)
 * @column power_max Vmax, maximaal vermogen binnen de opgegeven stage-klasse 
 * (KW)
 * @column fuel_consumption_idle GBS_plci, liter brandstof verbruik stationair 
 * per uur per liter cilinder-inhoud (l/l/uur)
 * 
 * @file source/database/src/main/sql/template/02_emission_factors/02-tables/mobile_sources.sql
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MobileSourceOffRoadCategoryIdleProperties extends TableImpl<MobileSourceOffRoadCategoryIdlePropertiesRecord> {

    private static final long serialVersionUID = 359932508;

    /**
     * The reference instance of <code>template.mobile_source_off_road_category_idle_properties</code>
     */
    public static final MobileSourceOffRoadCategoryIdleProperties MOBILE_SOURCE_OFF_ROAD_CATEGORY_IDLE_PROPERTIES = new MobileSourceOffRoadCategoryIdleProperties();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MobileSourceOffRoadCategoryIdlePropertiesRecord> getRecordType() {
        return MobileSourceOffRoadCategoryIdlePropertiesRecord.class;
    }

    /**
     * The column <code>template.mobile_source_off_road_category_idle_properties.mobile_source_off_road_category_id</code>.
     */
    public final TableField<MobileSourceOffRoadCategoryIdlePropertiesRecord, Short> MOBILE_SOURCE_OFF_ROAD_CATEGORY_ID = createField(DSL.name("mobile_source_off_road_category_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>template.mobile_source_off_road_category_idle_properties.power_min</code>.
     */
    public final TableField<MobileSourceOffRoadCategoryIdlePropertiesRecord, Float> POWER_MIN = createField(DSL.name("power_min"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>template.mobile_source_off_road_category_idle_properties.power_max</code>.
     */
    public final TableField<MobileSourceOffRoadCategoryIdlePropertiesRecord, Float> POWER_MAX = createField(DSL.name("power_max"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>template.mobile_source_off_road_category_idle_properties.fuel_consumption_idle</code>.
     */
    public final TableField<MobileSourceOffRoadCategoryIdlePropertiesRecord, Float> FUEL_CONSUMPTION_IDLE = createField(DSL.name("fuel_consumption_idle"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * Create a <code>template.mobile_source_off_road_category_idle_properties</code> table reference
     */
    public MobileSourceOffRoadCategoryIdleProperties() {
        this(DSL.name("mobile_source_off_road_category_idle_properties"), null);
    }

    /**
     * Create an aliased <code>template.mobile_source_off_road_category_idle_properties</code> table reference
     */
    public MobileSourceOffRoadCategoryIdleProperties(String alias) {
        this(DSL.name(alias), MOBILE_SOURCE_OFF_ROAD_CATEGORY_IDLE_PROPERTIES);
    }

    /**
     * Create an aliased <code>template.mobile_source_off_road_category_idle_properties</code> table reference
     */
    public MobileSourceOffRoadCategoryIdleProperties(Name alias) {
        this(alias, MOBILE_SOURCE_OFF_ROAD_CATEGORY_IDLE_PROPERTIES);
    }

    private MobileSourceOffRoadCategoryIdleProperties(Name alias, Table<MobileSourceOffRoadCategoryIdlePropertiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private MobileSourceOffRoadCategoryIdleProperties(Name alias, Table<MobileSourceOffRoadCategoryIdlePropertiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Eigenschappen per stageklasse die nodig zijn om de stationaire emissie te berekenen (onafhankelijk van de stof).\r\n\r\nNiet voor alle stageklasses zijn stationaire emissieberekeningen mogelijk, in dat geval ontbreekt het record.\r\n\r\n@column power_min Vmin, minimaal vermogen binnen de opgegeven stage-klasse (KW)\r\n@column power_max Vmax, maximaal vermogen binnen de opgegeven stage-klasse (KW)\r\n@column fuel_consumption_idle GBS_plci, liter brandstof verbruik stationair per uur per liter cilinder-inhoud (l/l/uur)\r\n\r\n@file source/database/src/main/sql/template/02_emission_factors/02-tables/mobile_sources.sql"), TableOptions.table());
    }

    public <O extends Record> MobileSourceOffRoadCategoryIdleProperties(Table<O> child, ForeignKey<O, MobileSourceOffRoadCategoryIdlePropertiesRecord> key) {
        super(child, key, MOBILE_SOURCE_OFF_ROAD_CATEGORY_IDLE_PROPERTIES);
    }

    @Override
    public Schema getSchema() {
        return Template.TEMPLATE;
    }

    @Override
    public UniqueKey<MobileSourceOffRoadCategoryIdlePropertiesRecord> getPrimaryKey() {
        return Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORY_IDLE_PROP_PKEY;
    }

    @Override
    public List<UniqueKey<MobileSourceOffRoadCategoryIdlePropertiesRecord>> getKeys() {
        return Arrays.<UniqueKey<MobileSourceOffRoadCategoryIdlePropertiesRecord>>asList(Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORY_IDLE_PROP_PKEY);
    }

    @Override
    public List<ForeignKey<MobileSourceOffRoadCategoryIdlePropertiesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MobileSourceOffRoadCategoryIdlePropertiesRecord, ?>>asList(Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORY_IDLE_PROPERTIES__MOBILE_SOURCE_OFF_ROAD_CATEGORY_IDLE_PROP_FKEY_CAT_ID);
    }

    public MobileSourceOffRoadCategories mobileSourceOffRoadCategories() {
        return new MobileSourceOffRoadCategories(this, Keys.MOBILE_SOURCE_OFF_ROAD_CATEGORY_IDLE_PROPERTIES__MOBILE_SOURCE_OFF_ROAD_CATEGORY_IDLE_PROP_FKEY_CAT_ID);
    }

    @Override
    public MobileSourceOffRoadCategoryIdleProperties as(String alias) {
        return new MobileSourceOffRoadCategoryIdleProperties(DSL.name(alias), this);
    }

    @Override
    public MobileSourceOffRoadCategoryIdleProperties as(Name alias) {
        return new MobileSourceOffRoadCategoryIdleProperties(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileSourceOffRoadCategoryIdleProperties rename(String name) {
        return new MobileSourceOffRoadCategoryIdleProperties(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileSourceOffRoadCategoryIdleProperties rename(Name name) {
        return new MobileSourceOffRoadCategoryIdleProperties(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Short, Float, Float, Float> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
